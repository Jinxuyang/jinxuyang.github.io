<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020Review</title>
      <link href="2020/12/30/2020Review/"/>
      <url>2020/12/30/2020Review/</url>
      
        <content type="html"><![CDATA[<p>2020过的很快啊，忙忙碌碌倒也还算充实，写个博客记录记录这对我来说很有意义的一年</p><a id="more"></a><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>这一年学了很多东西，从只会一点C，到现在转投java拥抱spring全家桶，能自己写一点东西出来，很有成就感。但其他就比较拉跨了，几乎把所有时间所有精力放在了这方面，高数大物什么的都是速成的，绩点一般。</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>这一年完成了222次commit</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231190003.png" alt="image-20201231185955963"></p><p>前半年年时间都在学习，到了后半年，才开始慢慢自己写一些东西传到GitHub上，建了25个仓库其中自己写的感觉还有点用的就俩</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231191413.png" alt="image-20201231191413121"></p><p>yiban-auto-checkin </p><p><a href="https://github.com/Jinxuyang/yiban-auto-checkin">https://github.com/Jinxuyang/yiban-auto-checkin</a></p><p>不是什么正经东西但是有用，收获了11个star，最顶峰的时候有1100+人使用，怂了关了</p><p>api-call-counter </p><p><a href="https://github.com/Jinxuyang/api-call-counter">https://github.com/Jinxuyang/api-call-counter</a></p><p>这个现在就有基本的功能，用redis存储数据，只需要引入jar包配置redis，默认统计controller包下方法的调用次数，也可以通过给方法上打注解来统计指定方法，想把这个好好写写做的完善一点。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>写了40篇博客，95%都是笔记没有什么深度，也就自己复习的时候可以看看</p><p>本来计划再写一篇关于Spring Security，一篇关于api-call-counter的，一拖再拖，看来得拖到明年了，属实拉跨</p><p>明年希望能写出一些有深度，有水平的博客，一周一篇，希望能坚持下去，</p><p>还有很多篇没有往博客上传，重装了一次电脑东西都搞没了hhh，也没再搞好</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194935.png" alt="image-20201231194935707"></p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194946.png" alt="image-20201231194946039"></p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194954.png" alt="image-20201231194954771"></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>唉…也就那样，和往年一样，没去什么地方玩，也没干什么有趣的事情，也还没有<strong>女朋友</strong></p><p>比较幸运，比较正确的事就是来铁头，东西也学了，饭也干了，认识了许多小伙伴，very good</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>今年最让我记忆深刻的游戏非<strong>巫师3：狂猎</strong>莫属</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231202640.png" alt="image-20201231202640482"></p><p>没有可以完成成就，没有专门收集装备，开了最低难度，就看了剧情，游戏初期感觉很拖沓，感觉很无聊，许许多多奇怪的名字</p><p>搞得人….差点错过了这部游戏，47块本体加DLC绝对物超所值</p><p>游戏的配乐也极其好听，导致</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231211651.jpg" alt="Screenshot_20201228_120305"></p><p>总之，绝对不要错过</p><p>还有两个我特别喜欢的游戏</p><p>一个是 Factorio 很好玩，很费肝</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231212126.png" alt="image-20201231212125985"></p><p>另一个是Oxygen Not Include</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231202542.png" alt="image-20201231202542614"></p><p>同样值得尝试</p><h2 id="憧憬"><a href="#憧憬" class="headerlink" title="憧憬"></a>憧憬</h2><ol><li><p>代码能力更上一层楼</p><ol><li>写个 50+star 的项目？</li></ol></li><li><p>能出去走走</p><ol><li>没有什么特别想去的地方，总之不想一直待在学校了</li></ol></li><li><p>身体健康</p></li><li><p style="color:#f8f9fa">找个女朋友</p></li></ol><p>   很惨，2020快结束的时候感冒了….浑身难受</p><p>   最后，大家新年快乐！！！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES学习笔记</title>
      <link href="2020/12/22/ElasticSearch/"/>
      <url>2020/12/22/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="下载（docker）"><a href="#下载（docker）" class="headerlink" title="下载（docker）"></a>下载（docker）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;config</span><br><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;data</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;&#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type&#x3D;single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \</span><br><span class="line">-v  &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">-d elasticsearch:7.6.2 </span><br></pre></td></tr></table></figure><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update elasticsearch --restart&#x3D;always</span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201222203731.png" alt="A{V60~K}ZEBX}6QLXDJB9FO"></p><ul><li><p>索引相当于数据库</p></li><li><p>类型相当于数据表(慢慢会被弃用)</p></li><li><p>文档相当于数据库的数据行</p><ul><li>字段：文档中的kv对</li><li>词：表示文本中的一个单词</li><li>标记：表示在字段中出现的词</li></ul></li></ul><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p>github地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>分词器版本和es版本对应</p><p>解压后放入ex的plugins目录下</p><h4 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h4><p>最少切分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;好好生活&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好好&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;生活&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h4><p>穷尽可能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;好好生活&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好好&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好生&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;生活&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增加词库"><a href="#增加词库" class="headerlink" title="增加词库"></a>增加词库</h3><h2 id="Rest风格api"><a href="#Rest风格api" class="headerlink" title="Rest风格api"></a>Rest风格api</h2><ul><li>GET: 获取</li><li>POST: 更新</li><li>PUT:创建</li><li>DELETE:删除</li></ul><h3 id="创建索引（PUT）"><a href="#创建索引（PUT）" class="headerlink" title="创建索引（PUT）"></a>创建索引（PUT）</h3><p>发送PUT请求到</p><p><code>http://localhost:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;</code></p><p>例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT http://192.168.56.10:9200/movies/movie/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><p>使用完全相同的索引类型id，再次发送PUT请求,带上新的JSON对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT http://192.168.56.10:9200/movies/movie/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span>,</span><br><span class="line">    <span class="attr">&quot;genres&quot;</span>: [<span class="string">&quot;Crime&quot;</span>, <span class="string">&quot;Drama&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_version加一</p><p>reslult为update</p><h3 id="通过ID获取文档-索引"><a href="#通过ID获取文档-索引" class="headerlink" title="通过ID获取文档/索引"></a>通过ID获取文档/索引</h3><p>发送GET到<code>http://localhost:9200/movies/movie/1</code></p><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span>,</span><br><span class="line">        <span class="attr">&quot;genres&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Crime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Drama&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>发送DELETE到<code>http://localhost:9200/movies/movie/1</code></p><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心功能：搜索"><a href="#核心功能：搜索" class="headerlink" title="核心功能：搜索"></a>核心功能：搜索</h3><p><a href="http://localhost:9200/_search">http://localhost:9200/_search</a> </p><p><a href="http://localhost:9200/movies/_search">http://localhost:9200/movies/_search</a> - 在电影索引中搜索所有类型</p><p><a href="http://localhost:9200/movies/movie/_search">http://localhost:9200/movies/movie/_search</a> - 在电影索引中显式搜索电影类型的文档。</p><h4 id="搜索请求正文和DSL"><a href="#搜索请求正文和DSL" class="headerlink" title="搜索请求正文和DSL"></a>搜索请求正文和DSL</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//Query DSL here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; 1</span><br><span class="line">    &quot;bool&quot;: &#123; 2</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;title&quot;:   &quot;Search&quot;        &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Elasticsearch&quot;</span> &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [ 3</span><br><span class="line">        &#123; &quot;term&quot;:  &#123; &quot;status&quot;: &quot;published&quot; &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;range&quot;</span>: &#123; <span class="attr">&quot;publish_date&quot;</span>: &#123; <span class="attr">&quot;gte&quot;</span>: <span class="string">&quot;2015-01-01&quot;</span> &#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>query包含查询上下文</li><li>两个match被用来给每个匹配到的文档评分</li><li>filter会过滤掉不符合条件的</li></ol><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><p>符合查询包括</p><ol><li>bool query：默认</li><li>boosting query：返回文档匹配到positive，同时减少匹配到negative的文档的分数</li><li>constant_score query: 所有匹配的文档将被给予相同分数</li><li>dis_max query</li><li>function_score query</li></ol><h5 id="Boolean-query"><a href="#Boolean-query" class="headerlink" title="Boolean query"></a>Boolean query</h5><table><thead><tr><th><strong>Occur</strong></th><th>表头</th></tr></thead><tbody><tr><td>must</td><td>文档中必须包含，匹配到会有加分</td></tr><tr><td>filter</td><td>文档中必须包含，但不会加分</td></tr><tr><td>should</td><td>文档中应该出现</td></tr><tr><td>must_not</td><td>文档中不能出现，分数将被忽略</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;user.id&quot;</span> : <span class="string">&quot;kimchy&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;production&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : &#123; <span class="attr">&quot;gte&quot;</span> : <span class="number">10</span>, <span class="attr">&quot;lte&quot;</span> : <span class="number">20</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;should&quot;</span> : [</span><br><span class="line">        &#123; <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;env1&quot;</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;deployed&quot;</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;minimum_should_match&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;boost&quot;</span> : <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合Spring-Boot"><a href="#整合Spring-Boot" class="headerlink" title="整合Spring Boot"></a>整合Spring Boot</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="2020/12/18/Docker/"/>
      <url>2020/12/18/Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="docker-安装mysql"><a href="#docker-安装mysql" class="headerlink" title="docker 安装mysql"></a>docker 安装mysql</h2><ol><li><p><code>docker pull mysql:5.7</code> 冒号后加版本，在<a href="https://hub.docker.com/_/mysql%E6%9F%A5%E7%9C%8B">https://hub.docker.com/_/mysql查看</a></p></li><li><p>启动</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   docker run -p 6000:3306 --name mysql-6000 \</span><br><span class="line">   -v /mydata/mysql-6000/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">   -v /mydata/mysql6000/data:/var/lib/mysql \</span><br><span class="line">   -v /mydata/mysql6000/conf:/etc/mysql \</span><br><span class="line">   -e MYSQL_ROOT_PASSWORD=JINXUyang123 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>-p设置端口及映射端口  linux端口:docker容器端口</li><li>–name 设置容器名称</li><li>-v设置挂载</li><li>-e MYSQL_ROOT_PASSWORD=root 设置MySQL密码</li></ul></li></ol><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><ol><li><code>docker pull redis</code></li><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="2020/11/11/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/11/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis学习笔记"><a href="#Redis学习笔记" class="headerlink" title="Redis学习笔记"></a>Redis学习笔记</h2><p>NoSQL（Not only SQL）</p><p>泛指非关系型数据库</p><a id="more"></a><h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>一个 key 对应一个 value，二进制安全，可以存放jpg图片或者序列化的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">get key</span><br><span class="line">keys * &#x2F;&#x2F; 获取所有key</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incr key 自增1</span><br><span class="line">decr key 自减1</span><br><span class="line">INCRBY key 10 增10</span><br><span class="line">DECRBY key 10 减10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GETRANGE key 0 3 获取字符串的0-3</span><br><span class="line">GETRANGE key 0 -1 获取整个字符串</span><br><span class="line">SETRANGE key 1 xxxxx 替换指定开始位置字符串</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setex(set with expire)设置过期时间</span><br><span class="line">setnx(set if not exist)不存在在设置</span><br><span class="line"></span><br><span class="line">setex key 30 &quot;xxx&quot;设置字符串过期时间30s</span><br><span class="line">setnx key &quot;xxx&quot;当可以不存在时设置，否则创建失败</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mset k1 v1 k2 v2 k3 v3 一次设置多个值</span><br><span class="line">msetnx k1 v1 k2 v2 设置k1 k2时同时成功同时失败</span><br><span class="line"></span><br><span class="line">mget k1 k2 k3 一次获取多个值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set user:1 &#123;name:zhangsan,age:18&#125; 设置一个user:1 对象，值为json字符串</span><br><span class="line">mset user:1:name zhangsan user:1:age 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getset 先get再set</span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>所有List命令都是l开头</p><p>List中的值可以重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LPUSH list xxx 向列表头部插或多个</span><br><span class="line">RPUSH list xxx 向尾部插</span><br><span class="line">LANGE</span><br><span class="line">LPOP list移除头</span><br><span class="line">RPOP list移除尾</span><br><span class="line"></span><br><span class="line">Lindex list 1 获取第一个（通过下标获取值）</span><br><span class="line">Llen list 返回列表长度</span><br><span class="line"></span><br><span class="line">Lrem list 1 one 移除列表中的一个one</span><br><span class="line">Lrem list 2 three 移除列表中的两个three</span><br><span class="line"></span><br><span class="line">trim list 1 2修剪，只要1到2的值</span><br><span class="line"></span><br><span class="line">rpoplpush list newlist 从list pop,push到newlist</span><br><span class="line"></span><br><span class="line">lset list 0 xxx 往0处插xxx</span><br><span class="line"></span><br><span class="line">LINSERT list before &quot;xxx&quot; &quot;yyy&quot; </span><br><span class="line">LINSERT list after &quot;xxx&quot; &quot;yyy&quot;</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>set中的值不可重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="built_in">set</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">smembers <span class="built_in">set</span> 查看所有value</span><br><span class="line">smember <span class="built_in">set</span> xxx 判断xxx是否在<span class="built_in">set</span>中</span><br><span class="line">scard <span class="built_in">set</span> 获取<span class="built_in">set</span>中元素个数</span><br><span class="line">srem <span class="built_in">set</span> xxx 移除xxx</span><br><span class="line"></span><br><span class="line">srandmember <span class="built_in">set</span> 随机抽出元素</span><br><span class="line">srandmember <span class="built_in">set</span> 2 随机抽出2个元素</span><br><span class="line"></span><br><span class="line">smove <span class="built_in">set</span> newset xxx 将xxx从<span class="built_in">set</span>移动到newset</span><br><span class="line"></span><br><span class="line">spop随机删除一个元素</span><br><span class="line"></span><br><span class="line">sdiff set1 set2 看两个<span class="built_in">set</span>的不同元素</span><br><span class="line">sinter set1 set2 看交集 </span><br><span class="line">sunion set1 set2 看并集</span><br></pre></td></tr></table></figure><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>key-map </p><p>key-&lt;key,map&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hset</span><br><span class="line">hmset</span><br><span class="line">hget</span><br><span class="line">hmget</span><br><span class="line">hdel</span><br><span class="line">hgetall</span><br><span class="line">hlen</span><br></pre></td></tr></table></figure><p>Zset</p><p>在set的基础上增加了一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zset</span><br><span class="line">zadd zset 1000 xxx</span><br><span class="line">zrangescore zset -inf +inf 排序</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>Redis单条命令保存原子性，事务不保证原子性</p><p>Redis没有隔离级别的概念</p><p>Redis事务本质一组命令的集合 ；一个事务中所有命令都会被序列化，在事务执行过程中，会按顺序执行；一次性顺序性排他性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multi 开启事务，下面输入的命令都会暂时放在队列里</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>执行队列中的命令</span><br><span class="line">discard取消事务</span><br></pre></td></tr></table></figure><ul><li><p>有错误的命令（例如getset）其他所有的命令都不会执行</p></li><li><p>命令不存在语法性错误，命令执行时其他命令是我可以执行的</p></li></ul><h3 id="Redis实现乐观锁"><a href="#Redis实现乐观锁" class="headerlink" title="Redis实现乐观锁"></a>Redis实现乐观锁</h3><ul><li><p>乐观锁</p><p>认为什么时候都不会出现问题，不会上锁，更新数据时判断，在此期间是否有人修改过这个数据，数据被更改事务执行失败</p></li><li><p>悲观锁</p><p>认为什么时候都会出现问题，无论做什么都加锁</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watch xxx 监视xxx</span><br><span class="line">multi </span><br><span class="line">命令</span><br><span class="line"><span class="built_in">exec</span> 若xxx在事务期间改变会执行失败</span><br></pre></td></tr></table></figure><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis &#x3D; new Jedis(&quot;host&quot;,6379);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习笔记</title>
      <link href="2020/11/09/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/09/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-Cloud-学习笔记"><a href="#Spring-Cloud-学习笔记" class="headerlink" title="Spring Cloud 学习笔记"></a>Spring Cloud 学习笔记</h1><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>通过访问<code>https://start.spring.io/actuator/info</code></p><a id="more"></a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;git&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;82af3869647d62a1e520a076908c14eee4715d8d&quot;</span>,</span><br><span class="line"><span class="attr">&quot;commit&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;82af386&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2020-11-02T15:56:02Z&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;build&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;artifact&quot;</span>: <span class="string">&quot;start-site&quot;</span>,</span><br><span class="line"><span class="attr">&quot;versions&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;spring-boot&quot;</span>: <span class="string">&quot;2.3.5.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;initializr&quot;</span>: <span class="string">&quot;0.10.0-SNAPSHOT&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;start.spring.io website&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2020-11-02T16:15:14.702Z&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;io.spring.start&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;bom-ranges&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;azure&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.10&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.10&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;codecentric-spring-boot-admin&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;solace-spring-boot&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.0.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.1.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;solace-spring-cloud&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.0.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.1.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Finchley.M2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M7&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M9&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.RC1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.RC2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.SR4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.M1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.SR6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.999.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.999.BUILD-SNAPSHOT and &lt;2.2.0.M4&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Hoxton.SR8&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M4 and &lt;2.3.6.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Hoxton.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.6.BUILD-SNAPSHOT and &lt;2.4.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-M3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0.M1 and &lt;=2.4.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0.M2 and &lt;=2.4.0-M3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M4&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud-alibaba&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.2.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud-services&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.3.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.8.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.6.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.0.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.RELEASE and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-statemachine&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.0.M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.0.0.M5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.0.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;vaadin&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;10.0.17&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;14.4.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;wavefront&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.4.0-M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.0-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;dependency-ranges&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;okta&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.2.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.2.RELEASE and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.4.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;mybatis&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;geode&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.2.10.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M5 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.3.4.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.4.0-M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;camel&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.22.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.25.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.3.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.5.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;open-service-broker&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.1.3.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.0.4.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.1.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择Spring boot版本和Spring cloud版本</p><h2 id="引入spring-cloud-alibaba"><a href="#引入spring-cloud-alibaba" class="headerlink" title="引入spring cloud alibaba"></a>引入spring cloud alibaba</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p><h3 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h3><p>项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。</p><p>由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此我们采取跟 SpringBoot 版本号一致的版本:</p><ul><li>1.5.x 版本适用于 Spring Boot 1.5.x</li><li>2.0.x 版本适用于 Spring Boot 2.0.x</li><li>2.1.x 版本适用于 Spring Boot 2.1.x</li><li>2.2.x 版本适用于 Spring Boot 2.2.x</li></ul><h2 id="使用nacos"><a href="#使用nacos" class="headerlink" title="使用nacos"></a>使用nacos</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载地址<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>windows上运行下载.zip文件，运行startup.cmd</p><p>默认端口为8848</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">application</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><h2 id="使用OpenFeign"><a href="#使用OpenFeign" class="headerlink" title="使用OpenFeign"></a>使用OpenFeign</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写接口"><a href="#写接口" class="headerlink" title="写接口"></a>写接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;要调用的服务名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;路径&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span></span>;<span class="comment">// 与被调用的方法相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开启远程调用功能"><a href="#开启远程调用功能" class="headerlink" title="开启远程调用功能"></a>开启远程调用功能</h3><p>在spring启动类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;接口所在包&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h2><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新建bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure><h3 id="配置中心添加"><a href="#配置中心添加" class="headerlink" title="配置中心添加"></a>配置中心添加</h3><p>应用名.后缀</p><h3 id="动态获取配置"><a href="#动态获取配置" class="headerlink" title="动态获取配置"></a>动态获取配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure><p>配置中心和本地配置冲突时，优先使用配置中心</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="命名空间：配置隔离"><a href="#命名空间：配置隔离" class="headerlink" title="命名空间：配置隔离"></a>命名空间：配置隔离</h4><p>例如：</p><ol><li>开发环境，测试环境，生产环境</li><li>微服务</li></ol><p>修改默认命名空间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">5c990c25-30e9-4490-8e52-aaa45d8bbeb9</span> <span class="string">命名空间id</span></span><br></pre></td></tr></table></figure><p><img src="D:\Personal\Blog\source_posts\img\84@_NEV9[]LIK_WB9~WV{VI.png" alt="img"></p><h4 id="配置集"><a href="#配置集" class="headerlink" title="配置集"></a>配置集</h4><h4 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h4><h2 id="网关Spring-Cloud-Gateway"><a href="#网关Spring-Cloud-Gateway" class="headerlink" title="网关Spring Cloud Gateway"></a>网关Spring Cloud Gateway</h2><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="出现the-‘Access-Control-Allow-Origin’-header-contains-multiple-values"><a href="#出现the-‘Access-Control-Allow-Origin’-header-contains-multiple-values" class="headerlink" title="出现the ‘Access-Control-Allow-Origin’ header contains multiple values"></a>出现the ‘Access-Control-Allow-Origin’ header contains multiple values</h3><p><img src="D:\Personal\Blog\source_posts\img\1.png" alt="1"></p><p>这是spring的一个问题</p><p>可以通过修改配置文件解决</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Origin</span> <span class="string">Access-Control-Allow-Credentials,</span> <span class="string">RETAIN_UNIQUE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot解决跨域问题</title>
      <link href="2020/09/15/CORS/"/>
      <url>2020/09/15/CORS/</url>
      
        <content type="html"><![CDATA[<p>spring boot 解决跨域问题代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fehead.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任何头</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任何方法（post、get等）</span></span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5)配置有效时长</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600</span>*<span class="number">24L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> cors </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linxu命令</title>
      <link href="2020/09/14/linxu-command/"/>
      <url>2020/09/14/linxu-command/</url>
      
        <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><a id="more"></a><h3 id="开发80端口"><a href="#开发80端口" class="headerlink" title="开发80端口"></a>开发80端口</h3><p><code> firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p><h3 id="查询端口号80-是否开启"><a href="#查询端口号80-是否开启" class="headerlink" title="查询端口号80 是否开启"></a>查询端口号80 是否开启</h3><p><code>firewall-cmd --query-port=80/tcp</code></p><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><p><code> firewall-cmd --reload</code></p><h3 id="查询有哪些端口是开启的"><a href="#查询有哪些端口是开启的" class="headerlink" title="查询有哪些端口是开启的"></a>查询有哪些端口是开启的</h3><p><code>firewall-cmd --list-port</code></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>--zone #作用域 --add-port=80/tcp #添加端口，格式为：端口/通讯协议 --permanent #永久生效，没有此参数重启后失效</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我是如何实现易班自动打卡的？</title>
      <link href="2020/07/28/yiban-auto-checkin/"/>
      <url>2020/07/28/yiban-auto-checkin/</url>
      
        <content type="html"><![CDATA[<p>需要用到的工具</p><p>HttpCanary</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ol><li><p>先进入易班，然后退出登录，方便我们一会记录整个登录和打卡的过程</p></li><li><p>打开HttpCanary将易班添加为目标程</p></li><li><p>开始抓包</p></li><li><p>完成从登录易班到打卡完成的整个过程的抓包</p><a id="more"></a></li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们倒着来分析</p><ol><li><p>抓到了很多数据包，但是音频和图片js…文件是我们不需要的，因此进行过滤保留这三种数据包即可</p></li><li><p>开始一个一个分析，发现一个数据包很可疑，打开一看这不就是我们提交的表单吗</p></li><li><p>验证猜想，重发这个请求，返回消息如下，可以确定这就是我们要找的数据包</p></li><li><p>猜想是否可以依靠每天自动重发这个请求实现签到，答案是否定的，是什么原因呢</p><ol><li><p>分析该请求的请求头，发现这里有一个Cookie，有两个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client&#x3D;android</span><br><span class="line">PHPSESSID&#x3D;96098a2d53fdfef072b13f7113da5e17</span><br></pre></td></tr></table></figure></li><li><p>第一个不用说，第二个就是罪魁祸首，一看这名字就知道肯定和SESSION有关，百度一下</p></li></ol></li><li><p>好了这下目标明确，寻找是谁第一次Set了这个Cookie，筛选，好了就是他，理论上我们只要，发送一下这个请求就可以拿到Cookie</p></li><li><p>问题又来了，这些又是啥？？？继续往下看</p></li><li><p>首先猜测一下这个act=iappxxxxx应该是易班小程序的ID，那么OK，他是不会变的，记住就行了，那么这个v是什么？看了看他的前一个请求发现就是access_token</p></li><li><p>好了继续寻找access_token</p></li><li><p>拉到最下面，第一个请求应该就是登录的请求，查看他的响应信息果然access_token就在里面</p></li><li><p>至此，抓包数据分析完成</p></li></ol><p><strong>总结：</strong></p><ol><li>登录拿到access_token</li><li>拿着access_token去获得Cookie</li><li>拿着Cookie提交表单</li><li>完成</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>以下使用java，使用Hutool进行Http请求、json解析等等等</strong></p><p>获取Access_token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">getAccess_token</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置请求参数</span></span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;account&quot;</span>,username);</span><br><span class="line">        map.put(<span class="string">&quot;passwd&quot;</span>,password);</span><br><span class="line">        map.put(<span class="string">&quot;ct&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;identify&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;v&quot;</span>,<span class="string">&quot;4.7.4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取返回的字符串</span></span><br><span class="line">        String jsonStr = HttpUtil.get(<span class="string">&quot;https://mobile.yiban.cn/api/v2/passport/login&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把获取到的字符串转换为JSONObject对象</span></span><br><span class="line">        JSONObject jsonObject = JSONUtil.parseObj(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//try catch一下，以防获取到一些奇奇怪怪的东西</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//比较状态码，是否登陆成功</span></span><br><span class="line">            <span class="keyword">if</span> (jsonObject.get(<span class="string">&quot;response&quot;</span>).equals(<span class="string">&quot;100&quot;</span>))&#123;</span><br><span class="line">                String res = ((JSONObject) jsonObject.get(<span class="string">&quot;data&quot;</span>)).getStr(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> CommonResult.success(res,<span class="string">&quot;拿到数据了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;易班返回的Json数据可能有变化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">getPHPSESSID</span><span class="params">(String access_token)</span></span>&#123;</span><br><span class="line">        <span class="comment">//请求数据</span></span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;act&quot;</span>,<span class="string">&quot;iapp610661&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;access_token&quot;</span>,access_token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送请求，从cookie中获取PHPSESSIONID</span></span><br><span class="line">        HttpResponse response = HttpRequest</span><br><span class="line">                .get(<span class="string">&quot;http://f.yiban.cn/iapp/index&quot;</span>)</span><br><span class="line">                .form(map)</span><br><span class="line">                .setFollowRedirects(<span class="keyword">true</span>)</span><br><span class="line">                .execute();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String res = response.header(<span class="string">&quot;Set-Cookie&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CommonResult.success(res,<span class="string">&quot;成功获取SESSID&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;没获取到SESSID&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>提交表单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">submit</span><span class="params">(String cookie, String content)</span></span>&#123;</span><br><span class="line">        HttpResponse response = HttpRequest.post(<span class="string">&quot;http://yiban.sust.edu.cn/v4/public/index.php/Index/form/add.html?id=9&quot;</span>)</span><br><span class="line">                .contentType(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">                .body(content)</span><br><span class="line">                .cookie(cookie)</span><br><span class="line">                .execute();</span><br><span class="line">        JSONObject jsonObject = JSONUtil.parseObj(response.body());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jsonObject.get(<span class="string">&quot;code&quot;</span>).equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.success(jsonObject.getStr(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.failed(jsonObject.getStr(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(e.getMessage()+  <span class="string">&quot;没找到返回的code，奇了怪了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发送邮件(不得不说Hutool就是好用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MailUtil.send(<span class="string">&quot;你的邮箱&quot;</span>,标题,内容,是否为html(<span class="keyword">boolean</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习笔记</title>
      <link href="2020/07/21/algorithm/"/>
      <url>2020/07/21/algorithm/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li><p>一一列举</p></li><li><p>不重复，不遗漏</p><a id="more"></a></li></ul><h3 id="优化枚举的基本思路"><a href="#优化枚举的基本思路" class="headerlink" title="优化枚举的基本思路"></a>优化枚举的基本思路</h3><p>减少枚举次数</p><ul><li>选择合适的枚举对象</li><li>选择合适的枚举方向 ——方便排除非法和不是最优的情况</li><li>选择合适的数据维护方法 ——转化问题</li></ul><h4 id="例1-最大正方形"><a href="#例1-最大正方形" class="headerlink" title="例1.最大正方形"></a>例1.最大正方形</h4><p>题目</p><p>在一个N*N（N&lt;100）的矩阵中求一个最大的正方形使得该正方形的四个顶点是由“#”构成</p><p>##**#</p><p>*****</p><p>**##*</p><p>#*#*#*</p><p>*#*#*</p><p>思路</p><ol><li>几个点可以确定一个正方形？<ul><li>对角线上的两个点确定一个正方形</li></ul></li><li>明确思路使用枚举法，枚举所有两个点的组合，判断剩下两个点是否是#，是的话记录面积不是就继续枚举下一个组合，直至枚举完所有集合</li></ol><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>对于一个数列，再开一个数组，第n个数就存前n个数字的和</p><h4 id="例2-数列求和问题"><a href="#例2-数列求和问题" class="headerlink" title="例2 数列求和问题"></a>例2 数列求和问题</h4><p>给定一个数列{an}（1&lt;= n &lt;= 100000）,有q（1&lt;= n &lt;= 100000）次询问，每次询问从i到j的元素之和</p><p><strong>思路</strong></p><ol><li>暴力，直接算（范围大的话必超时）</li><li>先便利数据，求前缀和，存到数组中</li><li>使用时直接求aj-ai即可</li></ol><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><h4 id="例3-数列修改问题"><a href="#例3-数列修改问题" class="headerlink" title="例3 数列修改问题"></a>例3 数列修改问题</h4><p>给定一个数列{an}（1&lt;= n &lt;= 100000）,有q（1&lt;= n &lt;= 100000）次修改，每次修改把从i到j的每个元素加上k，求所有修改之后的每个数值</p><p><strong>思路</strong></p><ol><li>暴力，每次修改都遍历区间（时间复杂度太大）</li><li>思考问题，进行修改时区间什么没有变，什么变了<ol><li>区间内各个元素之间的差值未变</li><li>端点处的差值改变</li></ol></li><li>把修改的地方从整个区间变到区间的端点，就可以大大减少时间复杂度<ol><li>当我们对第i到j个数加上k的话，i与i-1的差值增加了k，j与j加一的差值减少了k，区间内部相邻两数差值不变</li><li>因此可以使用一个数组来维护第i个数和第i-1个数的差值（默认第一个数的前一个数是0），将[i,j]这个区间的每个数+1时，只需要修改i和j+1（i+k，j+1-k）</li><li>对这个数组求前缀和，即可得到数列的值</li><li>这种方法叫<strong>差分</strong></li></ol></li></ol><h3 id="差分与前缀和的关系"><a href="#差分与前缀和的关系" class="headerlink" title="差分与前缀和的关系"></a>差分与前缀和的关系</h3><p>差分和前缀和是一对对称的操作</p><p>差分数组求前缀和就是原数组，对前缀和求差分也能得到原数组</p><h3 id="尺取法"><a href="#尺取法" class="headerlink" title="尺取法"></a>尺取法</h3><p>给定长度为n的正整数数列以及整数S，求出总和不小于S的连续子串的长度的最小值，如果接不存在，输出0</p><ol><li>暴力，枚举两个点的所有组合，选择和大于等于S的最短子串（时间复杂度爆炸）（O（n3））</li><li>优化，使用前缀和省去计算和的那一步复杂度变为（O（n2）），依然不低</li><li>使用尺取法（O（n））<ol><li>确定两个端点，从数组0开始</li><li>首先向右移动右边的端点，判断和是否大于S，若大于S就移动左边的端点，一直移动直至再移动一次就不大于S时，记录长度</li><li>继续移动右端点，重复2，直至数组结束</li><li>得出最小距离</li></ol></li></ol><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><ol><li>对问题求解时，总是做出在当前看来最好的选择，不从整体上考虑，做出的选择是局部是上最优解</li><li>使用贪心算法解决的问题都是能够证贪心出的局部最优解是所求的全局最优解</li></ol><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h3 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h3><ul><li><p>**sort(beg,end,comp)**给数组排序，返回排号的数组,cmp可以不写，comp用来定义比较方法</p><ul><li><pre><code class="c++">int a[10]= &#123;1, 5, 8, 9, 6, 7, 3, 4, 2, 0&#125;;sort(a, a+10);//两个参数，第一个是你要排的的开始位置的指针，第二个是结束处的指针的下一位//可以理解为从a开始，要排几位//STL遵循[a,b)原则，因此是a到a+10</code></pre></li></ul></li><li><p><strong>search</strong></p><ul><li>**binary_search(起始地址，结束地址，要查找的值)**，返回布尔值，匹配返回true</li><li>**lower_bound(beg,end,val)**返回可插入的最小位置的迭代器（可以理解为指针）<ul><li>例插入3</li><li>1 2 2 2 (可以被插到这) <strong>3</strong> 3 3 4 5</li><li>返回加粗3处的指针</li><li>第一个<strong>大于等于</strong>你查询的数的位置</li></ul></li><li>**upper_bound(beg,end,val)**返回可插入的最大位置的迭代器（可以理解为指针）<ul><li>1 2 2 2  3 3 3 (可以被插到这) <strong>4</strong> 5</li><li>返回加粗4处的指针</li><li>第一个<strong>大于</strong>你查询的数的位置</li></ul></li><li><strong>使用前数组一定要排序</strong></li></ul></li><li><p>**find(beg,end,val)**返回val第一次出现的地址</p></li><li><p><strong>count(beg,end,val)**返回val的出现次数 返回一个</strong>ptrdiff_t**(typedef long long ptrdiff_t)我也不知道这是个啥</p></li><li><p>**swap(a,b)**交换两个数</p></li><li></li></ul><h2 id="二分、三分"><a href="#二分、三分" class="headerlink" title="二分、三分"></a>二分、三分</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="2020/06/22/MyBatis/"/>
      <url>2020/06/22/MyBatis/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>创建实体类和实体类的接口</p><ol><li>User</li><li>IUserDao</li></ol><a id="more"></a></li><li><p>配置主配置文件</p><p>SqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 mybatis 的环境 default属性没有固定的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置 mysql 的环境 这里的ID需要和environments标签中的default属性相同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://121.36.19.47:3306/mybatis_learn&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 每个Dao独立的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建映射配置文件</p><ol><li><p>IUserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace写类的全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作 ID填写方法名 resultType填写要封装成的JavaBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>注意</strong>：</p><ol><li>MyBatis的映射配置文件位置必须和Dao接口的包结构相同</li><li>映射配置文件的mapper标签的namespace属性取值必须是Dao接口的全限定类名</li><li>映射配置文件的操作配置，id属性的取值必须是dao接口的方法名</li></ol><p>​    遵从这三点，在开发中就无需实现IUserDao的类，MyBatis代替我们完成</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>读取配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建SqlSessionFactory工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(in);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建SqlSession对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = factory.openSession();</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>创建Dao接口的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IUserDao userDao = session.getMapper(IUserDao.class); </span><br></pre></td></tr></table></figure></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.close();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><ol><li><p>省略映射配置文件</p></li><li><p>在要实现的接口上写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;Sql语句&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>主配置文件&lt;mapper&gt;标签下使用class属性指定被注解的Dao全限定类名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;dao.IUserDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><h4 id="配置文件写法"><a href="#配置文件写法" class="headerlink" title="配置文件写法"></a>配置文件写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注解写法"><a href="#注解写法" class="headerlink" title="注解写法"></a>注解写法</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Insert</span>(&quot;INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span><br></pre></td></tr></table></figure><p>需要向接口中传入一个User对象</p><p>最后需要commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.commit();</span><br></pre></td></tr></table></figure><h4 id="获取插入数据的ID"><a href="#获取插入数据的ID" class="headerlink" title="获取插入数据的ID"></a>获取插入数据的ID</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">”id“</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        SELECT last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>keyProperty表示返回值的名称 </p><p>order表示执行该命令的时间，AFTER表示插入之后再执行</p><h3 id="改、删"><a href="#改、删" class="headerlink" title="改、删"></a>改、删</h3><p>与增加操作类似只需要改变标签名称或注解的@Xxx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;xx.xx&quot;</span>&gt;</span></span><br><span class="line">Sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;xx.xx&quot;</span>&gt;</span></span><br><span class="line">Sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;....&quot;)</span></span><br><span class="line"><span class="meta">@Delete(&quot;....&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h3 id="获取用户总记录的条数"><a href="#获取用户总记录的条数" class="headerlink" title="获取用户总记录的条数"></a>获取用户总记录的条数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">SELECT count(id) FROM user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p>Object Graphic Navigation Language</p><h2 id="连接池与事务控制"><a href="#连接池与事务控制" class="headerlink" title="连接池与事务控制"></a>连接池与事务控制</h2><h3 id="MyBatis中的连接池"><a href="#MyBatis中的连接池" class="headerlink" title="MyBatis中的连接池"></a>MyBatis中的连接池</h3><p>mybatis中提供了3种方式配置</p><p>在SqlMapConfig.xml中的dataSource标签中，type属性就是配置采用何种连接池的方式</p><ul><li>POOLED        采用传统javax.sql.DataSource规范中的连接池</li><li>UNPOOLED  虽然实现了javax.sql.DataSource，但没有使用池的思想</li><li>JNDI</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>可以在创造SqlSession对象时，给OpenSession中传一个true，就可以实现自动提交</p><h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><h3 id="lt-if-gt-标签"><a href="#lt-if-gt-标签" class="headerlink" title="&lt;if&gt;标签"></a>&lt;if&gt;标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != NULL&quot;</span>&gt;</span></span><br><span class="line">    AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    AND ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-where-gt"><a href="#lt-where-gt" class="headerlink" title="&lt;where&gt;"></a>&lt;where&gt;</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != NULL&quot;</span>&gt;</span></span><br><span class="line">    AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    AND ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>I don’t have a favorite singer, but a film soundtrack composer whose name is hans zimmer is my favorite composer. I know him from a film called Interstellar. At the same time, Interstellar is also my favorite film. It is because of this excellent OST that there are such excellent film。</p><p>Let’s enjoy it together</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池</title>
      <link href="2020/06/01/DataSource/"/>
      <url>2020/06/01/DataSource/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据库连接池"><a href="#什么是数据库连接池" class="headerlink" title="什么是数据库连接池"></a>什么是数据库连接池</h2><p>数据库连接池就是一个存放数据库连接的容器</p><p>当系统初始化完成后，容器就被创建，容器中会申请一些连接对象，当用户来访问数据时，从容器中获取连接对象，用户访问完后，将连接对象归还给容器</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>接口：DataSource<ol><li>方法<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()<ul><li>如果连接是从数据库连接池中获得的就归还给连接池，而不是关闭连接</li></ul></li></ul></li><li>由数据库厂商实现\<ol><li>数据库连接池技术<ol><li>C3P0</li><li>Druid</li></ol></li></ol></li></ol></li></ol><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>定义配置文件：<ol><li>c3p0.properties/c3p0-config.xml</li><li>放在src文件夹下</li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource( )</li></ol></li></ol><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>配置文件<ol><li>xxx.properties</li><li>可以叫任意名称，放在任意目录下</li></ol></li><li>加载配置文件<ol><li>Properties</li></ol></li><li>数据库连接池对象 DruidDataSourceFactory <ol><li>参数：字节流对象</li><li>方法：createDataSource获取一个DataSource对象</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cookie&amp;session</title>
      <link href="2020/06/01/cookie-session/"/>
      <url>2020/06/01/cookie-session/</url>
      
        <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话"></a>什么是会话</h3><p>一次会话中包含多次请求和响应</p><p>一次会话：浏览器第一次给服务器发送请求，会话建立，指导一方断开为止</p><a id="more"></a><h3 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h3><p>在一次会话范围内的多次请求共享数据</p><h3 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h3><ol><li>客户端会话技术（数据存放在客户端）：Cookie</li><li>服务端会话技术（数据存放在服务端）：Session</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>创建Cookie对象】<ol><li>new Cookie(String name,String value)</li></ol></li><li>发送Ciookie对象<ol><li>response.addCookie(Cookie cookie)</li></ol></li><li>获取Cookie<ol><li>Cookie[] request.getCookies()</li></ol></li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>基于请求头Cookie和响应头Set-Cookie实现</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>一次可以发送多个Cookie（创建多个Cookie对象，多次调用AddCookie）</p></li><li><p>Cookie可以保存多长时间</p><ol><li>默认情况下，浏览器关闭后Cookie销毁</li><li>持久化存储<ol><li>setMaxAge(int seconds)<ol><li>正数，将Cookie数据写道硬盘中，设置Cookie存货时间，单位s</li><li>负数，默认值，结束会话删除</li><li>0，删除Cookie信息</li></ol></li></ol></li></ol></li><li><p>Cookie的获取范围</p><ol><li></li></ol></li></ol><h3 id="特点和作用"><a href="#特点和作用" class="headerlink" title="特点和作用"></a>特点和作用</h3><ol><li>cookie储存在客户端</li><li>浏览器对于单个Cookie大小有限制4kb，对一个域名下总cookie数量有限制20个</li></ol><ol><li><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>获取HttpSession对象(域对象)</p><ol><li>request.getSession()</li></ol></li><li><p>方法</p><ol><li>Object getAttribute(String name)</li><li>void setAttribute(String name,Object value)</li><li>void removeAttribute(String name)</li></ol></li></ol><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>Session的实现依赖于Cookie</p><p>首次使用时服务器向浏览器发送一个Cookie包含一个JSESSIONID，再次访问时，浏览器向服务器发送JSESSIONID，服务器通过这个ID，确保两次访问使用的是同一个HttpSeesion对象</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>客户端关闭服务器不关闭，两次访问不是同一个Session<ol><li>若需要相同可以设置Cookie的存活时间</li></ol></li><li>服务器关闭客户端不关闭，两次访问不是同一个Session<ol><li>session钝化：</li><li>session活化</li></ol></li><li>Session失效时间<ol><li>服务器关闭</li><li>调用一个自杀方法</li><li>默认失效时间30min</li></ol></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>存储一次会话的数据，存在服务端</li><li>可以存储任意类型数据，任意大小</li><li>比Cookie安全</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XML学习笔记</title>
      <link href="2020/05/31/XML/"/>
      <url>2020/05/31/XML/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>XML(Extensible Markup Language)<strong>可扩展</strong>标记语言</p><p>可扩展：标签都是可以自定义的</p><p>语法严格</p><a id="more"></a><h2 id="啥用"><a href="#啥用" class="headerlink" title="啥用"></a>啥用</h2><ol><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;? version = &#x27;1.0&#x27; ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>第一行必须为版本声明（必须是第一行，第一行是空行都不行）</li><li>有且只能有一个根标签(&lt;users&gt;&lt;/users&gt;)</li><li>属性值必须用 引号引起来（单双都行）</li><li>标签都是成对出现（除首行）</li><li>标签名称区分大小写</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="2020/05/30/Spring/"/>
      <url>2020/05/30/Spring/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h2><p>将对象的创建交给框架</p><p>目的：降低程序间的耦合</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>Maven项目引入一下依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在项目的src文件下创建bean.xml(可以是任何名称文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置bean标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean标签：用于配置让spring创建对象，并且存入ioc容器之中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：对象的唯一标识。 class属性：指定要创建对象的全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.xxx.xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//1.使用ApplicationContext接口获取spring容器 </span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>); </span><br><span class="line">    <span class="comment">//2.根据bean的id获取对象 </span></span><br><span class="line">    Object ObjectName = (Object) ac.getBean(<span class="string">&quot;bean.xml里的id&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BeanFactory与ApplicationContext"><a href="#BeanFactory与ApplicationContext" class="headerlink" title="BeanFactory与ApplicationContext"></a>BeanFactory与ApplicationContext</h4></li></ol><p>BeanFactory是顶层接口</p><p>ApplicationContext是BeanFactory的子接口</p><p>不同：对象的创建时间不同</p><ul><li>BeanFactory 什么时候用什么时候创建</li><li>ApplicationContext默认情况下读取完配置文件之后就创建 （<strong>一般用它</strong>）</li></ul><h4 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h4><ul><li>ClassPathXmlApplicationContext：<br>它是从类的根路径下加载配置文件 推荐</li><li>FileSystemXmlApplicationContext：<br>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</li><li>AnnotationConfigApplicationContext:<br>当我们使用注解配置容器对象时，需要使用此类来创建spring 容器。它用来读取注解。</li></ul><h4 id="Bean标签"><a href="#Bean标签" class="headerlink" title="Bean标签"></a>Bean标签</h4><p><strong>属性：</strong></p><ol><li>作用<ol><li>用于配置对象让Spring创建</li><li>默认调用对象的无参构造器构造</li></ol></li><li>属性<ol><li>id:给对象指定唯一标识符</li><li>class：指定对象的全限定类名</li><li>scope：指定对象的作用范围<ol><li>singleton :默认值，单例的. </li><li>prototype :多例的.  </li><li>request :WEB项目中,Spring创建一个Bean的对象,将对象存入到request域中. </li><li>session :WEB项目中,Spring创建一个Bean的对象,将对象存入到session域中. </li><li>global session :WEB项目中,应用在Portlet环境.如果没有Portlet环境那么globalSession相当于session.</li></ol></li><li>init-method：指定类中的初始化方法名称 </li><li>destroy-method：指定类中销毁方法名称</li></ol></li></ol><h4 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h4><ol><li>使用默认无参构造函数</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.Xxx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用静态工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Xxx <span class="title">name</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Xxx(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是: 使用StaticFactory类中的静态方法name创建对象，并存入spring容器 </span></span><br><span class="line"><span class="comment">id属性：指定bean的id，用于从容器中获取 </span></span><br><span class="line"><span class="comment">class属性：指定静态工厂的全限定类名 </span></span><br><span class="line"><span class="comment">factory-method属性：指定生产对象的静态方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实例工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Xxx <span class="title">name</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Xxx(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是： 先把工厂的创建交给spring来管理。 然后在使用工厂的bean来调用里面的方法 </span></span><br><span class="line"><span class="comment">factory-bean属性：用于指定实例工厂bean的id。 </span></span><br><span class="line"><span class="comment">factory-method属性：用于指定实例工厂中创建对象的方法。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="comment">&lt;!--工厂类--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> <span class="comment">&lt;!--工厂中的方法--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>理解控制反转和依赖注入：<a href="https://zhuanlan.zhihu.com/p/33492169">https://zhuanlan.zhihu.com/p/33492169</a></p><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>使用类中的构造函数，给成员变量赋值</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">constructor-arg :</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">index:指定参数在构造函数参数列表的索引位置，从0开始</span></span><br><span class="line"><span class="comment">type:指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">name:指定参数在构造函数中的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">value:它能赋的值是基本数据类型和String类型</span></span><br><span class="line"><span class="comment">ref:它能赋的值是其他bean类型，也就是说，必须得是在配置文件中配置过的bean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过配置文件给bean中的属性传值：使用set方法的方式 (常用)</span></span><br><span class="line"><span class="comment">property</span></span><br><span class="line"><span class="comment">属性： </span></span><br><span class="line"><span class="comment">name：找的是类中set方法后面的部分 </span></span><br><span class="line"><span class="comment">ref：给属性赋值是其他bean类型的 </span></span><br><span class="line"><span class="comment">value：给属性赋值是基本数据类型和string类型的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给数组注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 list 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 set 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 Map 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 properties 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>@Component</p><p>​    用于把当前类对象存入Spring容器种，相当于配置文件里的&lt;bean&gt;&lt;/bean&gt;</p><p>这个注解有一个属性value用于指定bean的id，默认值为当前类名，首字母小写</p><p>@Controller @Service @Repository  这三个注解的作用和属性与@Component相同，只是提供了更加明确的语义化  </p><h3 id="注入数据"><a href="#注入数据" class="headerlink" title="注入数据"></a>注入数据</h3><p>相当于&lt;property name=”” ref=””&gt;  </p><p><strong>@AutoWired</strong> 自动按照类型注入  </p><p>使用注解注入属性时， set 方法可以省略</p><p>当有多个类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找    </p><p><strong>@Qualifier</strong>  在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。 </p><p>给字段注入时不能独立使用，必须和@Autowire 一起使用;给方法参数注入时，可以独立使用。  </p><p>属性：value，bean 的id</p><p><strong>@Resource</strong>  直接按照 Bean 的 id 注入 </p><p>属性：value，bean 的id</p><p><strong>@Value</strong>  注入基本数据类型和 String 类型数据的  </p><p>value：用于指定值  </p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习笔记</title>
      <link href="2020/05/30/JDBC/"/>
      <url>2020/05/30/JDBC/</url>
      
        <content type="html"><![CDATA[<h3 id="JDBC是啥"><a href="#JDBC是啥" class="headerlink" title="JDBC是啥"></a>JDBC是啥</h3><p>JDBC(Java DataBase connectivity)(Java 数据库连接)</p><p>由SUN公司定义的一系列操作关系型数据库的接口，后由数据库厂商对接口进行实现，提供数据库驱动jar包</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//把com.mysql.jdbc.Driver这个字节码文件加载到内存里</span></span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p><code>host = jdbc:mysql://host /db</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(host,username,passwd);</span><br></pre></td></tr></table></figure><p>连接时发现报错</p><blockquote><p>The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><p>解决方法</p><p>host后加上<code>?serverTimezone=UTC</code></p><h2 id="对象详解"><a href="#对象详解" class="headerlink" title="对象详解"></a>对象详解</h2><ol><li>DriverManage驱动管理<ul><li>注册驱动<ul><li>MySQL5以后可以自动注册</li></ul></li><li>获取数据库连接<ul><li>static getConnection(String url,String user,String password)</li><li>url = jdbc:mysql://ip地址:端口号/数据库名</li></ul></li></ul></li><li>Connection数据库连接对象<ol><li>获取执行sql语句的对象<ul><li> Statement CreateStatement(String sql)</li><li>Prestatement prepareStatement(String sql)</li></ul></li><li>管理事务</li></ol></li><li>Statement执行sql语句<ol><li>执行sql<ol><li>int executeUpdate(String sql)：执行DML(insert,update,delete)，DDL(create,alter,drop)<ul><li>返回值是操作后影响的行数</li><li>可以用来判断成功与否</li></ul></li><li>ResultSet executeQuery(String sql):执行DQL(select)</li></ol></li></ol></li><li>ResultSet查询结果的封装<ul><li>boolean next()游标向下移动一行(默认指向表头)，判断是否有数据</li><li>getXxx(“列名/列的编号，从1开始”)获取数据Xxx代表类型</li></ul></li><li>PreparedStatement<ol><li>SQL注入问题:在拼接sql‘语句时，有一些特殊的词参与拼接会造成安全问题</li><li>使用PreparedStatem对象解决问题<ol><li>定义sql语句时使用<code>?</code>作为占位符，替换参数</li><li>使用setXxx(？的编号从1开始，参数的值)</li><li>执行sql语句时不再需要传参</li></ol></li></ol></li></ol><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><p>Spring框架提供的JDBC简单封装</p><p>提供一个JDBCTemplate</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>创建JdbcTemplate，依赖于DataSource<ol><li>JdbcTemplate template = new JdbcTemplate</li></ol></li><li>调用JdbcTemplate的方法完成CRUD操作<ol><li>update()增删改</li><li>queryForMap()将查询结果封装为map集合</li><li>queryForList()将查询结果封装为list集合</li><li>query()查询结果，将查询结果封装为JavaBean对象</li><li>queryForObject()将查询结果封装为对象</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet学习笔记</title>
      <link href="2020/05/30/Servlet/"/>
      <url>2020/05/30/Servlet/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><p>Servlet(Service applet)运行在服务器的小程序</p><p>Servlet就是一个<strong>接口</strong>，定义了某个Java类能被tomcat识别的规则</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>新建一个类</li><li>实现servlet的接口</li><li>实现接口中的抽象类</li><li>配置servlet</li></ol><h2 id="Servlet的执行流程"><a href="#Servlet的执行流程" class="headerlink" title="Servlet的执行流程"></a>Servlet的执行流程</h2><p><img src="https://i.loli.net/2020/05/30/zigWGXkjAqUTQS6.png"></p><h2 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h2><h3 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet的地址<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问Servlet的地址<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当</p><h3 id="Servlet启动时自动装载"><a href="#Servlet启动时自动装载" class="headerlink" title="Servlet启动时自动装载"></a>Servlet启动时自动装载</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">//加上这些代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">loadon-startup</span>&gt;</span>num<span class="tag">&lt;/<span class="name">loadon-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>num越小优先级越高</p><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p><code>@WebServlet(&quot;url&quot;)</code></p><p>就不用在web.xml里面配置了</p><h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><p>第一次访问后，servlet创建，第二次访问时不需要创建，直接使用，当服务器关闭时，servlet销毁</p><h2 id="Servlet结构"><a href="#Servlet结构" class="headerlink" title="Servlet结构"></a>Servlet结构</h2><p>Servlet接口下有两个实现类</p><p>HttpServlet和GenericServlet</p><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>除了service类外，对Servlet接口的其他类都进行了空实现</p><p>以后使用Servlet时，对该类进行继承就行</p><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>对http协议进行了封装，简化操作 </p><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ServletRequest --接口</span><br><span class="line">继承</span><br><span class="line">HttpServletRequest --接口</span><br><span class="line">实现</span><br><span class="line">org.apache.catalina.connector.RequestFacade(tomcat实现)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h3><h4 id="获取请求行"><a href="#获取请求行" class="headerlink" title="获取请求行"></a>获取请求行</h4><ol><li>getMethod获取请求方法</li><li><strong>getContextPath取虚拟目录</strong></li><li>getServletPath获取Servlet路径</li><li>getQueryString获取请求参数</li><li><strong>获取请求URI</strong><ol><li>getRequestURI</li><li>getRequestURL</li></ol></li><li>getProtocol获取协议版本</li><li>getRemoteAddr获取客户机IP地址</li></ol><h4 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h4><ol><li>getHeader(String name)通过请求头的名称获得请求头</li><li>Enumeration&lt;String&gt; getHeaderNames()获取所有请求头的名称</li></ol><h4 id="获取请求体"><a href="#获取请求体" class="headerlink" title="获取请求体"></a>获取请求体</h4><ul><li>只有POST有请求体</li></ul><ol><li>获取流对象<ul><li>BufferReader getReader()获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()获取字节输入流，可以操作所有数据类型</li></ul></li><li>从流对象中获取数据</li></ol><h4 id="其他（重要）"><a href="#其他（重要）" class="headerlink" title="其他（重要）"></a>其他（重要）</h4><ol><li><p>获取请求参数的通用方式（兼容GET&amp;POST）</p><ol><li>String getParameter(String name)根据参数名获取参数值</li><li>String[] getParameterValues(String name)根据参数名获取参数值的数组 – hobby=吃饭&amp;hobby=睡觉</li><li>Enumeration&lt;String&gt; getParameterNames()获取所有请求参数的名称</li><li>Map&lt;String,String[]&gt; getParameterMap()获取所有参数的map集合</li></ol></li><li><p>请求转发</p><ol><li><p>步骤</p><ol><li><p>通过request对象获取请求转发器对象：RequestDispatcher get RequestDispatcher(String path)</p></li><li><p>使用RequestDispatcher对象进行转发：forward(ServletRequest request,ServletResponse response)</p><p><code>request.getRequestDispatcher(&quot;/path&quot;).forward(request,response)</code></p></li></ol></li><li><p>特点</p><ol><li>浏览器地址栏不变化</li><li>只能转发到当前服务器内部资源</li><li>访问带转发是一次请求</li></ol></li></ol></li><li><p>共享数据</p><ul><li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p></li><li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p></li><li><p>方法：</p><ol><li>void setAttribute(String name,Object obj)存储数据</li><li>Object getAttribute(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ol></li></ul></li><li><p>获取ServletContext</p><p>1. </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="2020/05/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/05/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="登录登出"><a href="#登录登出" class="headerlink" title="登录登出"></a>登录登出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -P端口号 -h服务器名称</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; <span class="built_in">exit</span>;退出</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><p>登陆时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -P端口号 -h服务器名称 --prompt 提示符</span><br></pre></td></tr></table></figure><p>登陆后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt 提示符</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\D完整日期 \d当前数据库 \h服务器名称 \u当前用户</span><br></pre></td></tr></table></figure><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li>关键字与函数名全部大写</li><li>数据库名，表名称，字段名称全部小写</li><li>MySQL语句必须以分号结尾</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name </span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="2020/04/29/PHP/"/>
      <url>2020/04/29/PHP/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h2><p>php代码需要写在<code>&lt;?php ?&gt;</code>之间</p><p>echo用来输出</p><p>php连接两个字符串使用<code>.</code>而不是<code>+</code></p><p>php每条语句都以;结尾</p><a id="more"></a><p><code>//</code>表示注释</p><h2 id="PHP的新东西"><a href="#PHP的新东西" class="headerlink" title="PHP的新东西"></a>PHP的新东西</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure><p>PHP有两种数组：索引数组、关联数组。</p><h4 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h4><p>索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fruit</span> = <span class="keyword">array</span>(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;菠萝&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以使用<code>print_r($fruit);</code>语句输出数组键及对应的值</p><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><p><code>$arr[0]=&#39;苹果&#39;;</code></p><p><code>array(&#39;0&#39;=&gt;&#39;苹果&#39;);</code></p><p><code>array(&quot;苹果&quot;,&quot;香蕉&quot;);</code></p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><p><code>$arr[&quot;0&quot;];</code>/<code>$arr[0];</code></p><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><p>关联数组是指数组的键是字符串的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fruit</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span>=&gt;<span class="string">&quot;苹果&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;banana&#x27;</span>=&gt;<span class="string">&quot;香蕉&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;pineapple&#x27;</span>=&gt;<span class="string">&quot;菠萝&quot;</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure><p>可以使用<code>print_r($fruit);</code>语句输出数组键及对应的值。</p><h5 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h5><p><code>$arr[&#39;apple&#39;]=&#39;苹果&#39;;</code></p><p><code>array(&#39;apple&#39;=&gt;&#39;苹果&#39;);</code></p><h5 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h5><p><code>$fruit[&#39;banana&#39;];</code></p><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类是一类东西的结构描述，而对象则是一类东西的一个具体实例</p><p>定义一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//方法内部可以使用$this伪变量调用对象的属性或者方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象通过new关键字进行实例化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="comment">//也可以采用变量来创建</span></span><br><span class="line"><span class="variable">$className</span> = <span class="string">&#x27;Car&#x27;</span>;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> <span class="variable">$className</span>();</span><br></pre></td></tr></table></figure><h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><p>在类中定义的变量称之为属性</p><p>属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成</p><p>public：公开的<br>protected：受保护的<br>private：私有的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义公共属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    <span class="comment">//定义受保护的属性</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$corlor</span> = <span class="string">&#x27;白色&#x27;</span>;</span><br><span class="line">    <span class="comment">//定义私有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$price</span> = <span class="string">&#x27;100000&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认都为public，外部可以访问。一般通过-&gt;对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;name;   <span class="comment">//调用对象的属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;color;  <span class="comment">//错误 受保护的属性不允许外部调用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;price; <span class="comment">//错误 私有属性不允许外部调用</span></span><br></pre></td></tr></table></figure><p>受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$price</span> = <span class="string">&#x27;1000&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;price; <span class="comment">//内部访问私有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><p>方法就是在类中的function</p><p>的方法也具有public，protected 以及 private 的访问控制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;getName();</span><br></pre></td></tr></table></figure><p>使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Car::getName(); <span class="comment">//结果为“汽车”</span></span><br></pre></td></tr></table></figure><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>PHP5可以在类中使用**__construct()**定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;构造函数被调用\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car(); <span class="comment">//实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span></span><br></pre></td></tr></table></figure><p>在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用</p><p>PHP5支持析构函数，使用**__destruct()**进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;构造函数被调用 \n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;析构函数被调用 \n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car(); <span class="comment">//实例化时会调用构造函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;使用后，准备销毁car对象 \n&#x27;</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$car</span>); <span class="comment">//销毁时会调用析构函数</span></span><br></pre></td></tr></table></figure><h4 id="静态关键字"><a href="#静态关键字" class="headerlink" title="静态关键字"></a>静态关键字</h4><p>静态属性与方法可以在不实例化类的情况下调用，直接使用<code>类名::方法名</code>的方式进行调用。静态属性<strong>不允许</strong>对象使用-&gt;操作符调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$speed</span> = <span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Car::getSpeed();  <span class="comment">//调用静态方法</span></span><br></pre></td></tr></table></figure><p>静态方法也可以通过变量来进行动态调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;getSpeed&#x27;</span>;</span><br><span class="line"><span class="variable">$className</span> = <span class="string">&#x27;Car&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$className</span>::<span class="variable">$func</span>();  <span class="comment">//动态调用静态方法</span></span><br></pre></td></tr></table></figure><p>静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$speed</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>+=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::speedUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BigCar::start();</span><br><span class="line"><span class="keyword">echo</span> BigCar::getSpeed();</span><br></pre></td></tr></table></figure><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>访问控制通过关键字public，protected和private来实现。</p><p>被定义为公有的类成员可以在任何地方被访问。</p><p>被定义为受保护的类成员则可以被其自身以及其子类和父类访问。</p><p>被定义为私有的类成员则只能被其定义所在的类访问。</p><p>默认为公有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;object create&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_object</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$_object</span>)) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_object</span> = <span class="keyword">new</span> Car(); <span class="comment">//内部方法可以调用私有方法，因此这里可以创建对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$car = new Car(); //这里不允许直接实例化对象</span></span><br><span class="line"><span class="variable">$car</span> = Car::getInstance(); <span class="comment">//通过静态方法来获得一个实例</span></span><br></pre></td></tr></table></figure><h4 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;speed += <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用extends</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h4 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h4><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能出现错误或异常的代码</span></span><br><span class="line">            <span class="comment">//catch表示捕获，Exception是php已定义好的异常类</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="comment">//对异常处理，方法：</span></span><br><span class="line">                <span class="comment">//1、自己处理</span></span><br><span class="line">                <span class="comment">//2、不处理，将其再次抛出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可抛出一个异常的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params"><span class="variable">$number</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$number</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;异常提示-数字必须小于等于1&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在 &quot;try&quot; 代码块中触发异常</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     checkNum(<span class="number">2</span>);</span><br><span class="line">     <span class="comment">//如果异常被抛出，那么下面一行代码将不会被输出</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;如果能看到这个提示，说明你的数字小于等于1&#x27;</span>;</span><br><span class="line"> &#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">     <span class="comment">//捕获异常</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;捕获异常: &#x27;</span> .<span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h4><p>PHP具有很多异常处理类，其中Exception是所有异常处理的基类。</p><p>Exception具有几个基本属性与方法，其中包括了：</p><p>message 异常消息内容<br>code 异常代码<br>file 抛出异常的文件名<br>line 抛出异常在该文件的行数</p><p>其中常用的方法有：</p><p>getTrace 获取异常追踪信息<br>getTraceAsString 获取异常追踪信息的字符串<br>getMessage 获取出错信息</p><h4 id="捕获异常信息"><a href="#捕获异常信息" class="headerlink" title="捕获异常信息"></a>捕获异常信息</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;wrong&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Error:&#x27;</span>.<span class="variable">$ex</span>-&gt;getMessage().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ex</span>-&gt;getTraceAsString().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;异常处理后，继续执行其他代码&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="将错误信息写入错误日志"><a href="#将错误信息写入错误日志" class="headerlink" title="将错误信息写入错误日志"></a>将错误信息写入错误日志</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;wrong&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;Error:&#x27;</span>.<span class="variable">$ex</span>-&gt;getMessage().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="variable">$ex</span>-&gt;getTraceAsString().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="string">&#x27;异常行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;getLine().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="string">&#x27;所在文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;getFile().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//将异常信息记录到日志中</span></span><br><span class="line">file_put_contents(<span class="string">&#x27;error.log&#x27;</span>, <span class="variable">$msg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP数据库"><a href="#PHP数据库" class="headerlink" title="PHP数据库"></a>PHP数据库</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">&#x27;code1&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">mysql_connect(<span class="variable">$host</span>,<span class="variable">$user</span>,<span class="variable">$pass</span>);<span class="comment">//连接数据库</span></span><br><span class="line">mysql_select_db(<span class="string">&#x27;code1&#x27;</span>);<span class="comment">//选择数据库</span></span><br><span class="line">mysql_query(<span class="string">&quot;set names &#x27;utf8&#x27;&quot;</span>);<span class="comment">//设置字符编码</span></span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>在数据库建立连接以后就可以进行查询，采用mysql_query加sql语句的形式向数据库发送查询指令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = mysql_query(<span class="string">&#x27;select * from user limit 1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>对于查询类的语句会返回一个资源句柄（resource），可以通过该资源获取查询结果集中的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$res</span>);</span><br><span class="line">var_dump(<span class="variable">$row</span>);</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">&quot;insert into user(name, age, class) values(&#x27;李四&#x27;, 18, &#x27;高三一班&#x27;)&quot;</span>); <span class="comment">//执行插入语句</span></span><br></pre></td></tr></table></figure><p>在mysql中，执行插入语句以后，可以得到自增的主键id,通过PHP的mysql_insert_id函数可以获取该id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$uid &#x3D; mysql_insert_id();</span><br></pre></td></tr></table></figure><h4 id="取得数据查询结果"><a href="#取得数据查询结果" class="headerlink" title="取得数据查询结果"></a>取得数据查询结果</h4>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习笔记</title>
      <link href="2020/04/27/jQuery/"/>
      <url>2020/04/27/jQuery/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>环境搭建<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> alert($)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想要使用jQuery只需要在&lt;head&gt;标签中</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：一定千万不要在引用jquery的script标签里再写js了，重新写一个script标签</strong></p><p>可以在这里<a href="https://jquery.com/download/%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8jQuery%E7%9A%84%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC">https://jquery.com/download/下载使用jQuery的其他版本</a></p><p>网速慢的话</p><p><a href="https://www.bootcdn.cn/jquery/">https://www.bootcdn.cn/jquery/</a></p><p>这样操作</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$( &quot;#id&quot; )</span><br></pre></td></tr></table></figure><p>id若多个元素分配了相同的id，将只匹配该id选择集合的第一个DOM元素，按理来说id需要唯一</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.class&quot;</span>)</span><br></pre></td></tr></table></figure><p>假如你想改变某一类标签内容的样式可以直接使用<code>$(.class).css()</code>,不再像原生js一样需要循环</p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;tag&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="全能选择器"><a href="#全能选择器" class="headerlink" title="全能选择器"></a>全能选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;*&quot;</span>)</span><br></pre></td></tr></table></figure><p>获取文档中的所有元素</p><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p>文档中的所有的节点之间都是有这样或者那样的关系。我们可以把节点之间的关系可以用传统的家族关系来描述，可以把文档树当作一个家谱，那么节点与节点直接就会存在父子，兄弟，祖孙的关系了。</p><p><img src="http://img.mukewang.com/5590e98b0001f60d06130229.jpg"></p><h3 id="基本筛选选择器"><a href="#基本筛选选择器" class="headerlink" title="基本筛选选择器"></a>基本筛选选择器</h3><p><img src="http://img.mukewang.com/57cd1df2000146de06020498.jpg"></p><p>假如你使用标签选择器选取了所有div标签，但是你只想要第一个就可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:first&quot;</span>)<span class="comment">//选择第一个</span></span><br><span class="line">$(<span class="string">&quot;div:eq(0)&quot;</span>)<span class="comment">//选择索引值为0的那个</span></span><br><span class="line">$(<span class="string">&quot;div:lt(1)&quot;</span>)<span class="comment">//选择索引值小于1的</span></span><br></pre></td></tr></table></figure><h3 id="内容筛选选择器"><a href="#内容筛选选择器" class="headerlink" title="内容筛选选择器"></a>内容筛选选择器</h3><p><img src="http://img.mukewang.com/57cd20bf0001a97f05290214.jpg"></p><ol><li>:contains与:has都有查找的意思，但是contains查找包含“<strong>指定文本</strong>”的元素，has查找包含“<strong>指定元素</strong>”的元素</li><li>如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。</li><li>:parent与:empty是相反的，两者所涉及的子元素，包括文本节点</li></ol><h3 id="可见性筛选选择器"><a href="#可见性筛选选择器" class="headerlink" title="可见性筛选选择器"></a>可见性筛选选择器</h3><p><img src="http://img.mukewang.com/5590f6de0001e2b204460106.jpg"></p><p>我们有几种方式可以隐藏一个元素：</p><ol><li>CSS display的值是none。</li><li>type=”hidden”的表单元素。</li><li>宽度和高度都显式设置为0。</li><li>一个祖先元素是隐藏的，该元素是不会在页面上显示</li><li>CSS visibility的值是hidden</li><li>CSS opacity的值是0</li></ol><h3 id="属性筛选选择器"><a href="#属性筛选选择器" class="headerlink" title="属性筛选选择器"></a>属性筛选选择器</h3><p><img src="http://img.mukewang.com/57d654200001c46507360560.jpg"></p><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;一个元素集合[属性 | 属性 运算符 &quot;</span>value<span class="string">&quot;]&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="子元素筛选选择器"><a href="#子元素筛选选择器" class="headerlink" title="子元素筛选选择器"></a>子元素筛选选择器</h3><p><img src="https://img3.mukewang.com/5bac45120001301105960331.jpg"></p><ol><li>:first只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)</li><li>:last 只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素</li><li>如果子元素只有一个的话，:first-child与:last-child是同一个</li><li> :only-child匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配</li><li>jQuery实现:nth-child(n)是严格来自CSS规范，所以n值是“索引”，也就是说，从1开始计数，:nth-child(index)从1开始的，而eq(index)是从0开始的</li><li>nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算</li></ol><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><p><img src="http://img.mukewang.com/5592040d0001f8eb04940441.jpg" alt="img"></p><h4 id="表单对象属性筛选选择器"><a href="#表单对象属性筛选选择器" class="headerlink" title="表单对象属性筛选选择器"></a>表单对象属性筛选选择器</h4><p><img src="http://img.mukewang.com/55920c2f0001198b04940201.jpg" alt="img"></p><h3 id="特殊选择器this"><a href="#特殊选择器this" class="headerlink" title="特殊选择器this"></a>特殊选择器this</h3><blockquote><p>this，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。<br>$(this),代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值</p></blockquote><h2 id="属性与样式"><a href="#属性与样式" class="headerlink" title="属性与样式"></a>属性与样式</h2><h3 id="attr-与-removeAttr"><a href="#attr-与-removeAttr" class="headerlink" title="attr()与.removeAttr()"></a>attr()与.removeAttr()</h3><p>用来获取和设置元素属性</p><p><strong>attr()有4个表达式</strong></p><ol><li>attr(传入属性名)：获取属性的值</li><li>attr(属性名, 属性值)：设置属性的值</li><li>attr(属性名,函数值)：设置属性的函数值</li><li>attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }</li></ol><p><strong>removeAttr()删除方法</strong></p><p>.removeAttr( attributeName ) : 为匹配的元素集合中的每个元素中移除一个属性（attribute）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=<span class="string">&quot;10086&quot;</span>&gt;移动&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#10086&quot;</span>).attr(id,<span class="number">10001</span>);</span><br><span class="line">$(<span class="string">&quot;#10001&quot;</span>).attr(id);</span><br></pre></td></tr></table></figure><h3 id="html-及-text"><a href="#html-及-text" class="headerlink" title=".html()及.text()"></a>.html()及.text()</h3><p>.html() 获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法：</p><ol><li>.html() 不传入值，就是获取集合中第一个匹配元素的HTML内容</li><li>.html( htmlString ) 设置每一个匹配元素的html内容</li><li>.html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数</li></ol><p>.text()</p><p>得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法：</p><ol><li>.text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代</li><li>.text( textString ) 用于设置匹配元素内容的文本</li><li>.text( function(index, text) ) 用来返回设置文本内容的一个函数</li></ol><p>.html处理的是元素内容，.text处理的是文本内容</p><h3 id="val"><a href="#val" class="headerlink" title=".val()"></a>.val()</h3><p><strong>.val()方法</strong></p><p>主要是用于处理表单元素的值，比如 input, select 和 textarea。</p><ol><li>.val()无参数，获取匹配的元素集合中第一个元素的当前值</li><li>.val( value )，设置匹配的元素集合中每个元素的值</li><li>.val( function ) ，一个用来返回设置值的函数</li></ol><p><strong>.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容</strong>。</p><h3 id="addClass-和removeClass"><a href="#addClass-和removeClass" class="headerlink" title=".addClass()和removeClass()"></a>.addClass()和removeClass()</h3><p><strong>addClass( className )方法</strong></p><ol><li>.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名</li><li>.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名</li></ol><p><strong>注意事项：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上</span><br></pre></td></tr></table></figure><p><strong>.removeClass( )方法</strong></p><ol><li>.removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名</li><li>.removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名</li></ol><p><strong>注意事项</strong></p><p>如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除</p><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title=".toggleClass()"></a>.toggleClass()</h3><p>一次执行相当于addClass，再次执行相当于removeClass</p><p><strong>.toggleClass( )方法：</strong>在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类</p><ol><li>.toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名</li><li>.toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除</li><li>.toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值</li><li>.toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数</li></ol><p><strong>注意事项：</strong></p><ol><li>toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加</li></ol><h3 id="css"><a href="#css" class="headerlink" title=".css()"></a>.css()</h3><p><strong>获取：</strong></p><ol><li>.css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css(<span class="string">&quot;background-color&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>.css( propertyNames )：传递一组数组，返回一个对象结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css([<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;height&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>设置：</strong></p><ol><li><p>.css(propertyName, value )：设置CSS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css(&quot;background-color&quot;,&quot;red&quot;)</span><br></pre></td></tr></table></figure></li><li><p>.css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css(&quot;width&quot;,function(index,value)&#123;</span><br><span class="line">            &#x2F;&#x2F;value带单位，先分解</span><br><span class="line">            value &#x3D; value.split(&#39;px&#39;);</span><br><span class="line">            &#x2F;&#x2F;返回一个新的值，在原有的值上，增加50px</span><br><span class="line">            return (Number(value[0]) + 50) + value[1];</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>.css( properties )：可以传一个对象，同时设置多个样式</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css(&#123;</span><br><span class="line">            &#39;font-size&#39;        :&quot;15px&quot;,</span><br><span class="line">            &quot;background-color&quot; :&quot;#40E0D0&quot;,</span><br><span class="line">            &quot;border&quot;           :&quot;1px solid red&quot;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="结点创建与属性"><a href="#结点创建与属性" class="headerlink" title="结点创建与属性"></a>结点创建与属性</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;div class=&#x27;right&#x27;&gt;&lt;div class=&#x27;aaron&#x27;&gt;动态创建DIV元素节点&lt;/div&gt;&lt;/div&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><img src="http://img.mukewang.com/56cc12f800017b4104480146.jpg" alt="img"></p><p>.append(), 内容在方法的后面，参数是将要插入的内容。</p><p>.appendTo()刚好相反，内容在方法前面，无论是一个选择器表达式 或创建作为标记上的标记它都将被插入到目标容器的末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">append()前面是被插入的对象，后面是要在对象内插入的元素内容</span><br><span class="line">appendTo()前面是要插入的元素内容，而后面是被插入的对象</span><br></pre></td></tr></table></figure><p><strong>作用是一样的</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="2020/04/26/CSS/"/>
      <url>2020/04/26/CSS/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>穿衣服</p><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p><img src="http://img.mukewang.com/52fde5c30001b0fe03030117.jpg" alt="CSS"></p><p>选择符又名选择器，指明网页中要应用样式规则的元素</p><a id="more"></a><p><strong>最后一条声明可以没有分号</strong></p><p>/<em>这样写注释\</em>/</p><h2 id="CSS的三种用法及优先级"><a href="#CSS的三种用法及优先级" class="headerlink" title="CSS的三种用法及优先级"></a>CSS的三种用法及优先级</h2><h3 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h3><p>直接写在标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">    红</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p style="color:red">    红</p>多条语句用;分开<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:12px&quot;</span>&gt;</span>红<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p style="color:red;font-size:36px">红</p><h3 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    p&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">    我是蓝的</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部式"><a href="#外部式" class="headerlink" title="外部式"></a>外部式</h3><p>创建一个单独的css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;base.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用上面这句引用，通常写在head标签中</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>内联式 &gt; 嵌入式 &gt; 外部式</strong></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>使用”<strong>.</strong>“开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.1&#123;</span><br><span class="line">color:pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    粉🐖</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#1&#123;</span><br><span class="line">color:pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    粉🐖</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类选择器和ID选择器的区别"><a href="#类选择器和ID选择器的区别" class="headerlink" title="类选择器和ID选择器的区别"></a>类选择器和ID选择器的区别</h3><ol><li>ID选择器只可以使用一次，而类选择器可以使用多次</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>我不是<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>🐖<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是错的嗷</p><ol start="2"><li>还可以这样写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.1&#123;</span><br><span class="line">color:pink;</span><br><span class="line">&#125;</span><br><span class="line">.2&#123;</span><br><span class="line">font-size:200px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">”1</span> <span class="attr">2</span>“&gt;</span>大粉🐖<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="亲戚关系选择器hhh"><a href="#亲戚关系选择器hhh" class="headerlink" title="亲戚关系选择器hhh"></a>亲戚关系选择器hhh</h3><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>🐖<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.1&gt;<span class="selector-tag">sapn</span>&#123;<span class="attribute">color</span>:pink&#125;</span><br></pre></td></tr></table></figure><p>选择class名为1下的子元素&lt;span&gt;</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.1 <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:pink&#125;</span><br></pre></td></tr></table></figure><p>与子选择器的区别：子选择器只选择他的直接后代，而后代选择器把他的儿子孙子重孙都选上了,都变成粉色了</p><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">color</span>:pink;&#125;</span><br></pre></td></tr></table></figure><p>这下所以标签的元素都成粉的了</p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>给不存在的标签（或标签的某种状态）设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:pink;&#125;</span><br></pre></td></tr></table></figure><p>当鼠标经过时变粉</p><h3 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:pink;&#125;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>:pink;&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:pink;&#125;</span><br></pre></td></tr></table></figure><h2 id="继承，优先级和重要性"><a href="#继承，优先级和重要性" class="headerlink" title="继承，优先级和重要性"></a>继承，优先级和重要性</h2><h3 id="样式的继承性"><a href="#样式的继承性" class="headerlink" title="样式的继承性"></a>样式的继承性</h3><p>什么是继承性？</p><p>允许样式不仅应用于某个特定html标签，而且应用于后代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hhhhh<span class="tag">&lt;<span class="name">sapn</span>&gt;</span>wllll<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hhhhh是红色，wllll也是红色</p><p><strong>但是某些CSS样式不具有继承性</strong></p><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><p>1、如果一个元素使用了多个选择器,则会按照选择器的优先级来给定样式。</p><p>2、选择器的优先级依次是: 内联样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器</p><h3 id="权值"><a href="#权值" class="headerlink" title="权值"></a>权值</h3><p><strong>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100</strong></p><p>若多个选择器匹配到了一个标签上，那么谁的权值高就显示谁的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125; <span class="comment">/*权值为1*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:green;&#125; <span class="comment">/*权值为1+1=2*/</span></span><br><span class="line"><span class="selector-class">.warning</span>&#123;<span class="attribute">color</span>:white;&#125; <span class="comment">/*权值为10*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-class">.warning</span>&#123;<span class="attribute">color</span>:purple;&#125; <span class="comment">/*权值为1+1+10=12*/</span></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-class">.note</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:yellow;&#125; <span class="comment">/*权值为100+10+1=111*/</span></span><br></pre></td></tr></table></figure><h3 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red<span class="meta">!important</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:green;&#125;</span><br><span class="line">&lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>带有!important的会被应用，无论其他的权值有多高</p><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><h3 id="关于字体"><a href="#关于字体" class="headerlink" title="关于字体"></a>关于字体</h3><h4 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;Microsoft Yahei&quot;</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="font-weight字体粗细"><a href="#font-weight字体粗细" class="headerlink" title="font-weight字体粗细"></a>font-weight字体粗细</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p span&#123;font-weight:bold;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值。定义标准的字符。</td></tr><tr><td align="left">bold</td><td align="left">定义粗体字符。</td></tr><tr><td align="left">bolder</td><td align="left">定义更粗的字符。</td></tr><tr><td align="left">lighter</td><td align="left">定义更细的字符。</td></tr><tr><td align="left">100/200/300/400/500/600/700/800/900</td><td align="left">定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承字体的粗细。</td></tr></tbody></table><h4 id="font-style字体样式"><a href="#font-style字体样式" class="headerlink" title="font-style字体样式"></a>font-style字体样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;font-style:normal;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值。浏览器显示一个标准的字体样式。</td></tr><tr><td align="left">italic</td><td align="left">浏览器会显示一个斜体的字体样式。</td></tr><tr><td align="left">oblique</td><td align="left">浏览器会显示一个倾斜的字体样式。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承字体样式。</td></tr></tbody></table><h4 id="color设置字体颜色"><a href="#color设置字体颜色" class="headerlink" title="color设置字体颜色"></a>color设置字体颜色</h4><ul><li><p>英文命令颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure></li><li><p>RGB 颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:rgb(133,45,200);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:rgb(20%,33%,25%);&#125;</span><br></pre></td></tr></table></figure></li><li><p>十六进制颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:#00ffff;&#125;</span><br></pre></td></tr></table></figure><h4 id="font家族的缩写"><a href="#font家族的缩写" class="headerlink" title="font家族的缩写"></a>font家族的缩写</h4></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>:italic;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">12px</span>; </span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">1.5em</span>; </span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;宋体&quot;</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么多行的代码其实可以缩写为一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font</span>:italic  bold  <span class="number">12px</span>/<span class="number">1.5em</span>  <span class="string">&quot;宋体&quot;</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>想要使用这种简写方式，至少要指定font-size和font-family，其他属性未指定则会使用默认值</strong></li><li><strong>在缩写时 font-size 与 line-height 中间要加入“/”斜扛</strong></li></ol><h3 id="关于文本"><a href="#关于文本" class="headerlink" title="关于文本"></a>关于文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-decoration</span>:none&#125;</span><br></pre></td></tr></table></figure><h4 id="text-decoration给文本添加修饰"><a href="#text-decoration给文本添加修饰" class="headerlink" title="text-decoration给文本添加修饰"></a>text-decoration给文本添加修饰</h4><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">默认。定义标准的文本。</td></tr><tr><td align="left">underline</td><td align="left">定义文本下的一条线。</td></tr><tr><td align="left">overline</td><td align="left">定义文本上的一条线。</td></tr><tr><td align="left">line-through</td><td align="left">定义穿过文本下的一条线。</td></tr><tr><td align="left">blink</td><td align="left">定义闪烁的文本。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 text-decoration 属性的值。</td></tr></tbody></table><h4 id="text-indent为文本添加首行缩进"><a href="#text-indent为文本添加首行缩进" class="headerlink" title="text-indent为文本添加首行缩进"></a>text-indent为文本添加首行缩进</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;text-indent:2em;&#125;</span><br></pre></td></tr></table></figure><p>1em 等于当前的字体尺寸。</p><p>2em 等于当前字体尺寸的两倍。</p><p>例如，如果某元素以 12pt 显示，那么 2em 是24pt。</p><p>在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体</p><h4 id="line-height为文字间设置行间距-行高"><a href="#line-height为文字间设置行间距-行高" class="headerlink" title="line-height为文字间设置行间距/行高"></a>line-height为文字间设置行间距/行高</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;line-height:1.5em;&#125;</span><br></pre></td></tr></table></figure><h4 id="letter-word-spacing增加或减少字符间的空白"><a href="#letter-word-spacing增加或减少字符间的空白" class="headerlink" title="letter/word-spacing增加或减少字符间的空白"></a>letter/word-spacing增加或减少字符间的空白</h4><p><code>letter-spacing</code>为文字或字母中间设置间隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">letter-spacing</span>:<span class="number">50px</span>;&#125;</span><br></pre></td></tr></table></figure><p><code>word-spacing</code>为单词之间设置间距</p><h4 id="text-align设置文本对齐方式"><a href="#text-align设置文本对齐方式" class="headerlink" title="text-align设置文本对齐方式"></a>text-align设置文本对齐方式</h4><p>为块状元素设置对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;text-align:center&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">把文本排列到左边。默认值：由浏览器决定。</td></tr><tr><td align="left">right</td><td align="left">把文本排列到右边。</td></tr><tr><td align="left">center</td><td align="left">把文本排列到中间。</td></tr><tr><td align="left">justify</td><td align="left">实现两端对齐文本效果。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 text-align 属性的值。</td></tr></tbody></table><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在CSS中，HTML中的标签，被分为三类</p><ul><li><p>块状元素</p><ul><li>```html<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 内联元素</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;html</span><br><span class="line">    &lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>内联块元素</p><ul><li><pre><code class="html">&lt;img&gt;、&lt;input&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 块级元素</span><br><span class="line"></span><br><span class="line">- 每个块级元素都从新的一行开始</span><br><span class="line">- 元素高度、宽度、行高、顶边底边距都可设置</span><br><span class="line">- 元素宽度在不设置的情况下，是他本身父容器的100%，即和父元素宽度一致</span><br><span class="line"></span><br><span class="line">通过</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;css</span><br><span class="line">a&#123;display:block;&#125;</span><br></pre></td></tr></table></figure>可以将内联元素转换为块状元素</code></pre></li></ul></li></ul><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><ul><li>和其他元素都在一行上</li><li>元素的高度、宽度及顶部和底部边距<strong>不可</strong>设置</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:inline;&#125;</span><br></pre></td></tr></table></figure><p>可以将块状元素转换为内联元素</p><h4 id="内联块状元素"><a href="#内联块状元素" class="headerlink" title="内联块状元素"></a>内联块状元素</h4><ul><li>和其他元素在一行上</li><li>高宽，行高，顶底边距都可设置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:inline-block;&#125;</span><br></pre></td></tr></table></figure><p>当display设置为none时，元素隐藏</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="盒模型基本知识"><a href="#盒模型基本知识" class="headerlink" title="盒模型基本知识"></a>盒模型基本知识</h4><p><img src="http://img.mukewang.com/543b4cae0001b34304300350.jpg"></p><ul><li>padding 是盒子里的内容到盒子边框的距离</li><li>border 是盒子的边框</li><li>margin 是盒子边框距离别的盒子边框的距离</li></ul><p><img src="http://img.mukewang.com/539fbb3a0001304305570259.jpg"></p><p><strong>css内定义的宽（width）和高（height），指的是填充以里的内容范围。</strong></p><p><strong>因此一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</strong></p><h4 id="background-color背景色"><a href="#background-color背景色" class="headerlink" title="background-color背景色"></a>background-color背景色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div&#123;background-color:red;&#125;&#x2F;&#x2F;为块状元素设置</span><br><span class="line">a&#123;background-color:green;&#125;&#x2F;&#x2F;为行内元素设置</span><br></pre></td></tr></table></figure><h4 id="border为盒子添加边框"><a href="#border为盒子添加边框" class="headerlink" title="border为盒子添加边框"></a>border为盒子添加边框</h4><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>border-width</em></td><td align="left">规定边框的宽度。参阅：<a href="https://www.w3school.com.cn/cssref/pr_border-width.asp">border-width</a> 中可能的值。</td></tr><tr><td align="left"><em>border-style</em></td><td align="left">规定边框的样式。参阅：<a href="https://www.w3school.com.cn/cssref/pr_border-style.asp">border-style</a> 中可能的值。</td></tr><tr><td align="left"><em>border-color</em></td><td align="left">规定边框的颜色。参阅：<a href="https://www.w3school.com.cn/cssref/pr_border-color.asp">border-color</a> 中可能的值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border-width:2px;</span><br><span class="line">    border-style:solid;</span><br><span class="line">    border-color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:2px  solid  red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="border-方向-为盒子的某一边框设置样式"><a href="#border-方向-为盒子的某一边框设置样式" class="headerlink" title="border-方向 为盒子的某一边框设置样式"></a>border-方向 为盒子的某一边框设置样式</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&#123;border-bottom/top/left/right:xxx xxx&#125;</span><br></pre></td></tr></table></figure><h5 id="border-radius-为边框四个角分别设置圆角"><a href="#border-radius-为边框四个角分别设置圆角" class="headerlink" title="border-radius 为边框四个角分别设置圆角"></a>border-radius 为边框四个角分别设置圆角</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><p>顺序为左上、右上、右下、左下</p><p>也可以分开写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</span><br><span class="line">   <span class="attribute">border-bottom-left-radius</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果四个圆角都为10px;可以这么写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123; <span class="attribute">border-radius</span>:<span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果左上角和右下角圆角效果一样为10px，右上角和左下角圆角一样为20px，可以这么写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123; <span class="attribute">border-radius</span>:<span class="number">10px</span> <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><p>需要特别注意的：一个正方形，当设置圆角效果值为元素宽度一半时，显示效果为圆形。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">5px</span> solid red;</span><br><span class="line">       <span class="attribute">border-radius</span>: <span class="number">100px</span>/<span class="number">50%</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="padding为盒子设置填充"><a href="#padding为盒子设置填充" class="headerlink" title="padding为盒子设置填充"></a>padding为盒子设置填充</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&#123;padding:20px 10px 15px 30px;&#125;</span><br></pre></td></tr></table></figure><p>上右下左</p><p><img src="https://img.mukewang.com/5e95733a0001dead04210227.jpg"></p><p>其他设置方法与border-radius类似</p><h4 id="margin为盒子设置外边距"><a href="#margin为盒子设置外边距" class="headerlink" title="margin为盒子设置外边距"></a>margin为盒子设置外边距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&#123;margin:20px 10px 15px 30px;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img4.mukewang.com/5e95747a0001a39505090231.jpg"></p><p>一样</p><h2 id="布局模型"><a href="#布局模型" class="headerlink" title="布局模型"></a>布局模型</h2><h3 id="流动模型（Flow）"><a href="#流动模型（Flow）" class="headerlink" title="流动模型（Flow）"></a>流动模型（Flow）</h3><p>默认的网页布局模式</p><p>特征</p><ul><li>块状元素会在所处的包含元素内，自上而下垂直延申分布(默认状态下块元素的宽度为100%)</li><li>内联元素都会在包含元素内从左到右水平分布</li></ul><h3 id="浮动模型-Float"><a href="#浮动模型-Float" class="headerlink" title="浮动模型(Float)"></a>浮动模型(Float)</h3><p>可以设置两个块状元素显示一行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">float</span>:left/right;&#125;</span><br></pre></td></tr></table></figure><p>设置靠左or靠右</p><p>也可以分别设置，使之一个靠左一个靠右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div1</span>&#123;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-id">#div2</span>&#123;<span class="attribute">float</span>:right;&#125;</span><br></pre></td></tr></table></figure><h3 id="层模型"><a href="#层模型" class="headerlink" title="层模型"></a>层模型</h3><p><strong>关于文档流可以看这篇<a href="https://blog.csdn.net/wayne1998/article/details/80230608">https://blog.csdn.net/wayne1998/article/details/80230608</a></strong></p><p>层模型有三种形式：</p><p>1、<strong>绝对定位</strong>(position: absolute)</p><p>这条语句的作用将元素从<strong>文档流</strong>中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于<strong>浏览器窗口</strong>。</p><p>2、<strong>相对定位</strong>(position: relative)</p><p>它通过left、right、top、bottom属性确定元素在<strong>正常文档流中</strong>的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于<strong>以前的位置移动，</strong>移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。</p><p><strong>我的理解是，先正常生成元素，然后再浮起来，相对原来的位置进行移动</strong></p><p><img src="http://img.mukewang.com/541a4bfc0001abef05940489.jpg"></p><p>3、<strong>固定定位</strong>(position: fixed)</p><p>fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（<strong>屏幕内的网页窗口</strong>）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> red solid;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弹性盒模型"><a href="#弹性盒模型" class="headerlink" title="弹性盒模型"></a>弹性盒模型</h2><p><strong>这个好这个好<a href="https://www.jianshu.com/p/5856c4ae91f2">https://www.jianshu.com/p/5856c4ae91f2</a></strong></p><p>弹性盒子由弹性容器和弹性子元素组成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:flex | inline-flex;</span><br></pre></td></tr></table></figure><p>弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。</p><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-direction</td><td>指定弹性容器中子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td>flex-flow</td><td>flex-direction 和 flex-wrap 的简写</td></tr><tr><td>align-items</td><td>设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式</td></tr><tr><td>align-content</td><td>修改 flex-wrap 属性的行为，类似 align-items, 但不是设置子元素对齐，而是设置行对齐</td></tr><tr><td>justify-content</td><td>设置弹性盒子元素在主轴（横轴）方向上的对齐方式</td></tr></tbody></table><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>决定子元素排列方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123; <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>row</td><td>默认值。元素将水平显示，正如一个行一样。</td></tr><tr><td>row-reverse</td><td>与 row 相同，但是以相反的顺序。</td></tr><tr><td>column</td><td>元素将垂直显示，正如一个列一样。</td></tr><tr><td>column-reverse</td><td>与 column 相同，但是以相反的顺序。</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/2326131-bbd36877856086ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796/format/webp"></p><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>flex-wrap 属性规定flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值。规定元素不拆行或不拆列。</td></tr><tr><td>wrap</td><td>规定元素在必要的时候拆行或拆列。</td></tr><tr><td>wrap-reverse</td><td>规定元素在必要的时候拆行或拆列，但是以相反的顺序。</td></tr></tbody></table><p>可以取三个值：<br>（1） nowrap (默认)：不换行。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-b71b6e4c79ceb64b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><p>（2）wrap：换行，第一行在上方。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-6de957f9ef4d43fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><p>（3）wrap-reverse：换行，第一行在下方。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-b432b2461d51d73a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123; <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt; &#125;</span><br></pre></td></tr></table></figure><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td></tr><tr><td>center</td><td>项目位于容器的中心。</td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td></tr><tr><td>baseline</td><td>项目位于容器的基线上。</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/2326131-b3099f9b3e8bea50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/617/format/webp" alt="img"></p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值。项目位于容器的开头。</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td></tr><tr><td>center</td><td>项目位于容器的中心。</td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/2326131-86f8477572e8b976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp" alt="img"></p><h3 id="弹性子元素属性"><a href="#弹性子元素属性" class="headerlink" title="弹性子元素属性"></a>弹性子元素属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>order</td><td>设置弹性盒子的子元素排列顺序。</td></tr><tr><td>flex-grow</td><td>设置或检索弹性盒子元素的扩展比率。</td></tr><tr><td>flex-shrink</td><td>指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</td></tr><tr><td>flex-basis</td><td>用于设置或检索弹性盒伸缩基准值。</td></tr><tr><td>flex</td><td>设置弹性盒子的子元素如何分配空间。</td></tr><tr><td>align-self</td><td>在弹性子元素上使用。覆盖容器的 align-items 属性。</td></tr></tbody></table><h4 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">order</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：用整数值来定义排列顺序，数值小的排在前面。可以为负值，默认为0。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-5466d2ec3968ca3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp" alt="img"></p><h4 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-grow</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-189a57eada2a12a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/802/format/webp" alt="img"></p><h4 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-shrink</span>: &lt;integer&gt;; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个数字，规定项目将相对于其他灵活的项目进行收缩的量。默认值是 1。</p><p><img src="https://upload-images.jianshu.io/upload_images/2326131-b55c4a8caa6d3a90.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp" alt="img"></p><h4 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex-basis</span>: &lt;integer&gt; | auto; &#125;</span><br></pre></td></tr></table></figure><p><integer>：一个长度单位或者一个百分比，规定元素的初始长度。<br> auto：默认值。长度等于元素的长度。如果该项目未指定长度，则长度将根据内容决定。</p><h4 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h4><p>flex 属性用于设置或检索弹性盒模型对象的子元素如何分配空间。</p><p>flex 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123; <span class="attribute">flex</span>: flex-grow flex-shrink flex-basis | auto | initial | inherit; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>flex-grow</td><td>一个数字，规定项目将相对于其他元素进行扩展的量。</td></tr><tr><td>flex-shrink</td><td>一个数字，规定项目将相对于其他元素进行收缩的量。</td></tr><tr><td>flex-basis</td><td>项目的长度。合法值：”auto”、”inherit” 或一个后跟 “%”、”px”、”em” 或任何其他长度单位的数字。</td></tr><tr><td>auto</td><td>与 1 1 auto 相同。</td></tr><tr><td>none</td><td>与 0 0 auto 相同。</td></tr><tr><td>initial</td><td>设置该属性为它的默认值，即为 0 1 auto。</td></tr><tr><td>inherit</td><td>从父元素继承该属性。</td></tr></tbody></table><h4 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> <span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | stretch | center | flex-start | flex-end | baseline | initial | inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。</td></tr><tr><td>stretch</td><td>元素被拉伸以适应容器。</td></tr><tr><td>center</td><td>元素位于容器的中心。</td></tr><tr><td>flex-start</td><td>元素位于容器的开头。</td></tr><tr><td>flex-end</td><td>元素位于容器的结尾。</td></tr><tr><td>baseline</td><td>元素位于容器的基线上。</td></tr><tr><td>initial</td><td>设置该属性为它的默认值。</td></tr><tr><td>inherit</td><td>从父元素继承该属性。</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/2326131-8dc02c66cf79f0e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/743/format/webp" alt="img"></p><p><strong>作者：弓三水</strong><br><strong>链接：<a href="https://www.jianshu.com/p/5856c4ae91f2">https://www.jianshu.com/p/5856c4ae91f2</a></strong><br><strong>来源：简书</strong><br><strong>写的很全很好很厉害，直接复制了，方便以后查阅</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图（Graph）</title>
      <link href="2020/04/26/graph/"/>
      <url>2020/04/26/graph/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="图（Graph）"><a href="#图（Graph）" class="headerlink" title="图（Graph）"></a>图（Graph）</h3><ul><li><p>表示多对多的关系</p></li><li><p>包含</p><ul><li><p>一组顶点:通常用V（Vertex）表示顶点集合</p></li><li><p>一组边：通常用E（Edge）表示边的集合</p><ul><li><p>边是顶点对：（v,w）属于E，v,w属于V</p></li><li><p>有向边&lt;v,w&gt;表示从v指向w的边（单行线）</p></li><li><p>不考虑重边和自回路</p><a id="more"></a></li></ul></li></ul></li></ul><h4 id="抽象数据类型定义"><a href="#抽象数据类型定义" class="headerlink" title="抽象数据类型定义"></a>抽象数据类型定义</h4><ul><li>类型名称：图（Graph）</li><li>操作对象集：G（V，E）由一个非空的有限顶点集合V和一个有限边集合E组成</li><li>操作集<ul><li>Graph Create()</li><li>Graph InsertVertex(Graph G,Vertex V)</li><li>Graph InsertEdge(Graph G,Edge e)</li><li>void DFS(Graph G,Vertex v)</li><li>void BFS(Graph G,Vertex v)</li><li>void ShortestPath(Graph G,Vertex v,int Dist[])</li><li>void MST(Graph G)最小生成树</li></ul></li></ul><h4 id="如何表示一个图"><a href="#如何表示一个图" class="headerlink" title="如何表示一个图"></a>如何表示一个图</h4><ul><li>邻接矩阵<ul><li>有边记为1</li><li>优缺点<ul><li>直观简单，方便查找任意一对顶点之间是否有边，方便查找任一顶点的所有邻接点（有边直接相连的顶点）</li><li>方便计算任意顶点的度<ul><li>无向图：对应行或列非零元素个数</li><li>有向图：非零行是出度，非零列的入度</li></ul></li><li>若是稀疏矩阵的话会造成空间浪费以及时间浪费</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GNode</span> *<span class="title">PtrToGNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Nv;<span class="comment">//定点数</span></span><br><span class="line">    <span class="keyword">int</span> Ne;<span class="comment">//边数</span></span><br><span class="line">    WeightType G[MaxVertexNum][MaxVertexNum];</span><br><span class="line">    DataType Data[MaxVertexNum]; <span class="comment">//顶点包含的数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> PtrToGNode MGraph;</span><br></pre></td></tr></table></figure><p>MGraph创建并初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Vertex;</span><br><span class="line"><span class="function">MGraph <span class="title">CreateGraph</span><span class="params">(<span class="keyword">int</span> VertexNum)</span></span>&#123;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    MGraph Graph;</span><br><span class="line">    Graph = (MGraph)mallcon(<span class="keyword">sizeof</span>(struct GNode));</span><br><span class="line">    Graph-&gt;Nv = VertexNum;</span><br><span class="line">    Graph-&gt;Ne = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把Graph全部置为0</span></span><br><span class="line">    <span class="keyword">for</span>(V = <span class="number">0</span>;V &lt; Graph-&gt;Nv;V++)&#123;</span><br><span class="line"><span class="keyword">for</span>(W = <span class="number">0</span>;W &lt; Graph-&gt;Nv;W++)&#123;</span><br><span class="line">            Graph-&gt;G[V][W] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向MGraph插入边</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">PtrToENode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">Vertex V1,V2;</span><br><span class="line">    WeightType Weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToENode Edge;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertEdge</span><span class="params">(MGraph Graph,Edge E)</span></span>&#123;</span><br><span class="line">Graph-&gt;G[E-&gt;V1][E-&gt;V2] = E-&gt;Weight;</span><br><span class="line">    <span class="comment">//若为无向图，则还要插入边（V2，V1）</span></span><br><span class="line">    Graph-&gt;G[E-&gt;V2][E-&gt;V1] = E-&gt;Weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立完整的MGraph</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MGraph <span class="title">BuildGraph</span><span class="params">()</span></span>&#123;</span><br><span class="line">MGraph Grpah;</span><br><span class="line">    Edge E;</span><br><span class="line">    Vertex V;</span><br><span class="line">    <span class="keyword">int</span> Nv,i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Nv);</span><br><span class="line">    Graph = CreateGraph(Nv);</span><br><span class="line">    scnaf(<span class="string">&quot;%d&quot;</span>,&amp;(Graph-&gt;Ne));</span><br><span class="line">    <span class="keyword">if</span>(Graph-&gt;Ne != <span class="number">0</span>)&#123;</span><br><span class="line">E = (Edge)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ENode));</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; Graph-&gt;Ne;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;E-&gt;V1,&amp;E-&gt;V2,&amp;E-&gt;Weight);</span><br><span class="line">            InsertEdge(Graph,E);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读入数据</span></span><br><span class="line">        <span class="keyword">for</span>(V = <span class="number">0</span>;V &lt; Graph-&gt;Nv;V++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;(Graph-&gt;Data[V]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Graph;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个矩阵存的是顶点与顶点间的关系</strong></p><ul><li>邻接表<ul><li>用一个指针数组，对应矩阵每行一个元素，只存非零元素<ul><li>优缺点<ul><li>对于稀疏矩阵在时间和空间上的表现都比较好</li><li>方便找任意顶点的邻接点</li><li>方便计算任一顶点的度<ul><li>无向图：是</li><li>有向图：否，只能计算出度，需要构造逆邻接表</li></ul></li><li>难以检查任意一对顶点间是否存在边</li></ul></li></ul></li></ul></li><li>用一个长为N(N+1)/2的一维数组表示<ul><li>Gij在这个数组中对应的下标为(i*(i+1)/2+j) </li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> struct <span class="title">Vnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">PtrToAdjVNode FirstEdge;</span><br><span class="line">    DataType Data;</span><br><span class="line">&#125;AdjList[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GNode</span> *<span class="title">PtrToGNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> Nv;</span><br><span class="line">    <span class="keyword">int</span> Ne;</span><br><span class="line">    AdjList G;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToGNode LGraph;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><h5 id="深度优先搜索-Depth-First-Search-DFS"><a href="#深度优先搜索-Depth-First-Search-DFS" class="headerlink" title="深度优先搜索(Depth First Search,DFS)"></a>深度优先搜索(Depth First Search,DFS)</h5><p>思路:从起点出发，挑视线内一盏灯点亮，然后走到刚刚点亮的等上，继续重复，如果视线内所有灯都被点亮，就原路返回，退后一格，然后继续看，直到退到起点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Vertex V)</span></span>&#123;</span><br><span class="line">visited[V] = ture;</span><br><span class="line">    <span class="keyword">for</span>(V的每个邻接点W)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[W]) DFS(W);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="广度优先搜素-Breath-First-Search-BFS"><a href="#广度优先搜素-Breath-First-Search-BFS" class="headerlink" title="广度优先搜素(Breath First Search,BFS)"></a>广度优先搜素(Breath First Search,BFS)</h5><p>与树的层序遍历类似</p><p>思路：从起点开始，把所有邻接点压入队列，然后弹出一个，再把这的结点的所有邻接点压入队列，重复直至队列空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Vertex V)</span></span>&#123;</span><br><span class="line">    visited[V] = <span class="literal">true</span>;</span><br><span class="line">    Enqueue(V,Q);</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line">        V = Dequeue(Q);</span><br><span class="line">        <span class="keyword">for</span>(V的每个邻接点W)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[W])&#123;</span><br><span class="line">visited[W] = <span class="literal">true</span>;</span><br><span class="line">                Enqueue(W,Q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h4><p>分类：</p><ul><li>单源最短路径问题：从某固定点出发，求其到所有其他顶点的最短路径<ul><li>有向无权图</li><li>有向有权图</li></ul></li><li>多源最短路问题：求任意两顶点间的最短路径</li></ul><h5 id="单源有向无权图的最短路"><a href="#单源有向无权图的最短路" class="headerlink" title="单源有向无权图的最短路"></a>单源有向无权图的最短路</h5><p><strong>无权图的最短路可以认为是，从起点到终点经过的顶点数最少的路</strong></p><p>与BFS有点类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unweighted</span><span class="params">(Vertex S)</span></span>&#123;</span><br><span class="line">Enqueue(S,Q);<span class="comment">//先把这个结点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line"> V = Dequeue(Q);<span class="comment">//弹出一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(V 的每个邻接点 W)<span class="comment">//遍历V的每个邻接点</span></span><br><span class="line">        <span class="keyword">if</span>(dist[W] == <span class="number">-1</span>)&#123;<span class="comment">//如果W没有被访问过就执行以下操作</span></span><br><span class="line">dist[W] = dist[V]+<span class="number">1</span>;<span class="comment">//S到W的距离变成，S到他前一个结点V的距离+1</span></span><br><span class="line">            path[W] = V;<span class="comment">//要到达W就要经过V，把v存起来</span></span><br><span class="line">            Enqueue(W,Q);<span class="comment">//把这个结点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每次找的都是这个结点的邻接点，因此最后出来的结果是最短的</p><p>path存储来这个结点的结点，只要一直网下推，就能推出整条最短路</p><h5 id="单源有向有权图"><a href="#单源有向有权图" class="headerlink" title="单源有向有权图"></a>单源有向有权图</h5><p>**权重和最小 **</p><p><strong>Dijkatra算法</strong></p><ul><li>令s = {源点s + 已经确定了从s到的最短路径的顶点v}</li><li>对于任何一个没有收录的顶点v，定义dist[v]为s到v的最短路径长度，但该路径<strong>仅经过s中的顶点</strong>，即{s -&gt; (v属于s) -&gt; v}的最小长度(这个最小长度不是最终的最小长度)<ul><li>前提条件：路径是按照递增的顺序生成的</li><li>真正的最短路必须只经过s中的顶点，因为，假设一个顶点不在s中，但从源点到v经过他，这时就产生了矛盾，因为路径书按照递增顺序生成的</li><li>每次从未收录的顶点中选一个dist最小的收录</li><li>增加一个v进入s，可能会影响另外一个w的dist值 <ul><li>要产生这样的结果要满足</li><li>v在s到w的路径上</li><li>v到w一定有一条直接的边，因为路径按照递增顺序生成</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Vertex s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        V = 为收录顶点中dist最小者;</span><br><span class="line">        <span class="keyword">if</span>(这样的V不存在) <span class="keyword">break</span>;</span><br><span class="line">        collected[V] = <span class="literal">true</span>;<span class="comment">//用来标记结点是否被收录</span></span><br><span class="line">        <span class="keyword">for</span>(V 的每个邻接点 W)</span><br><span class="line">            <span class="keyword">if</span>(collected[W] == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">if</span>(dist[V] + E(v到w的距离) &lt; dist[W])&#123;<span class="comment">//如果原来s到w的距离大于，s到v加上v到w的距离那么就改变s到w的最短路径</span></span><br><span class="line">                    dist[W] = dist[V]+E(V到W的距离);</span><br><span class="line">                    path[W] = V;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/04/23/Regular-expression/"/>
      <url>2020/04/23/Regular-expression/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;a1b2c3&#x27;</span>;</span><br><span class="line">string = string.replace(<span class="regexp">/[abc]/g</span>, <span class="string">&#x27;X&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(string);</span><br></pre></td></tr></table></figure><a id="more"></a><p>在JavaScript中创建一个正则表达式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">RegExp</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="regexp">/表达式/</span>属性(g/i/m)</span><br></pre></td></tr></table></figure><p>正则表达式由两种基本字符类型组成</p><ul><li><p>原义文本字符</p><ul><li>代表要查找文本的原本意思的字符</li></ul></li><li><p>元字符</p><ul><li><p>在正则表达式中有特殊含义的非字母字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*+?$^.|\()[]&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><p>一般情况下正则表达式一个字符对应字符串一个字符</p></li><li><p>要匹配某类字符使用<code>[]</code>构建一个类</p><ul><li>类指符合某些特征的对象</li><li><code>[abc]</code>意思就是把abc归为一类，匹配这类字符</li><li><code>[^abc]</code>就是匹配出除abc以外的字符</li></ul></li></ul><h3 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h3><ul><li>可以使用<code>[a-z]</code>表示匹配a到z的任意字符</li><li><code>[a-zA-Z]</code>表示匹配a到z和A到Z的任意字符</li></ul><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><table><thead><tr><th>字符</th><th>等价类</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>[^\r\n]</td><td>除了回车、换行符之外的其他字符</td></tr><tr><td>\d</td><td>[0-9]</td><td>数字字符</td></tr><tr><td>\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\s</td><td>[\t\n\x0B\f\r]</td><td>空白符</td></tr><tr><td>\S</td><td>[^\t\n\x0B\f\r]</td><td>非空白符</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符(字母、数字、下划线)</td></tr><tr><td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td></tr></tbody></table><h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><ul><li><code>\b</code>单词边界,<code>\B</code>非单词边界</li><li><code>^</code>表示以…开始，<code>$</code>表示以…结束</li></ul><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>?</td><td>0或1 次</td></tr><tr><td>+</td><td>≥1 次</td></tr><tr><td>*</td><td>≥0 次（任意次）</td></tr><tr><td>{n}</td><td>n 次</td></tr><tr><td>{n,m}</td><td>n到m 次</td></tr><tr><td>{n,}</td><td>≥n 次</td></tr></tbody></table><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><p>尽可能多的匹配</p><p>例如有一个字符串12345678</p><p><code>\d&#123;3,6&#125;</code>这样进行匹配的话结果是123456，并非123或1234或….</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>尽量少的匹配，一旦匹配成功就不再继续尝试</p><p><code>\d&#123;3,6&#125;</code>结果是123，456</p><p><strong>JS默认使用贪婪模式，想使用非贪婪模式在量词后加上<code>?</code>即可</strong></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>使用<code>()</code>进行分组</p><p>假如你想匹配一个小写字母加数字连续出现3次就可以这样写<code>([a-z]\d)&#123;3&#125;</code>,而这样是不行的<code>[a-z]\d&#123;3&#125;</code>这样结果是匹配一个字母加三个数字</p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p><code>|</code>表示或</p><p>假如想匹配123345和124445就可以这样写<code>12(33|44)45</code></p><p>感觉功能上和<code>[]</code>有<strong>一点点</strong>重叠</p><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><p>假如你想把2020-4-24变为24/4/2020就可以这样写<code>(\d&#123;4&#125;)-(\d&#123;2&#125;|\d&#123;1&#125;)-(\d&#123;2&#125;|\d&#123;1&#125;)</code></p><p>然后使用<code>$1$2$3</code>捕获分组写成<code>$3/$2/$1</code></p><h4 id="忽略分组"><a href="#忽略分组" class="headerlink" title="忽略分组"></a>忽略分组</h4><p>假如你不想捕获某个分组就可以</p><p>这样<code>(\d&#123;4&#125;)-(\d&#123;2&#125;|\d&#123;1&#125;)-(?:\d&#123;2&#125;|\d&#123;1&#125;)</code>这样就匹配不到日期了,$3就是没内容的</p><h3 id="前瞻-amp-后顾"><a href="#前瞻-amp-后顾" class="headerlink" title="前瞻&amp;后顾"></a>前瞻&amp;后顾</h3><p>文本头叫前文本尾部叫后</p><p>前瞻就是在正则表达式匹配带规则时，向前检查是否符合断言，后顾与之相反</p><p><strong>JS不支持后顾</strong></p><p>既要符合exp正则，又要满足断言要求</p><p><strong>正向/肯定 匹配</strong>：符合特定断言<br><strong>负向/否定 匹配</strong>：不符合特定断言</p><table><thead><tr><th>名称</th><th>正则写法</th><th>含义</th></tr></thead><tbody><tr><td>正向前瞻</td><td>exp(?=assert)</td><td>符合exp正则，且符合设置的断言</td></tr><tr><td>负向前瞻</td><td>exp(?!assert)</td><td>符合exp正则，且不符合设置的断言</td></tr></tbody></table><p><strong>断言部分只作为约束条件而存在，并不会参与字符本身的匹配和替换，匹配字符的是exp正则部分</strong></p><p>假如你想匹配一个字母后加一个数字，但是只替换字母就可以</p><p>这样<code>a1aaa3</code>一个字符串<code>[a-z](?=\d)</code></p><h3 id="RegExp对象属性"><a href="#RegExp对象属性" class="headerlink" title="RegExp对象属性"></a>RegExp对象属性</h3><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>global</td><td><code>g</code>：全文搜索，默认false</td></tr><tr><td>ignoreCase</td><td><code>i</code>：大小写敏感，默认false</td></tr><tr><td>multiline</td><td><code>m</code>：多行搜索，默认false</td></tr><tr><td>lastIndex</td><td>下次匹配的起始位置 该属性只有设置标志<code>g</code>才能使用，实现遍历检索匹配</td></tr><tr><td>source</td><td>正则的文本字符串（正则主体）</td></tr></tbody></table><p>gim这三个对象都是只读的</p><h3 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h3><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg1.test(字符串)</span><br></pre></td></tr></table></figure><p>返回true或false，测试字符串参数中是否存在所匹配正则的字符串</p><p>非全局调用</p><p>默认从字符串第一个字符出发，找到第一个符合条件的子字符串就停止</p><p>全局调用</p><p>如果reg1标志g的话，lastIndex就会起作用，可以通过不断调用reg1.test()对字符串进行遍历，找出所有符合条件的子字符串</p><p>每调用一次reg1.test()就会使lastIndex移动到上一次找出的字符串的最后一个字符的下一个字符上，当找不到符合条件的子字符串时，会将lastIndex重置为0</p><p><img src="https://upload-images.jianshu.io/upload_images/4866277-b79894ead9358586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/553/format/webp"></p><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg1.exec(字符串);</span><br></pre></td></tr></table></figure><p>全局调用</p><p>返回一个数组，包含额外的属性 <code>index</code> 和 <code>input</code>，找不到返回null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/quick\s(brown).+?(jumps)/ig</span>;</span><br><span class="line"><span class="keyword">var</span> result = re.exec(<span class="string">&#x27;The Quick Brown Fox Jumps Over The Lazy Dog&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性/索引</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>[0]</code></td><td>匹配的全部字符串</td><td><code>Quick Brown Fox Jumps</code></td></tr><tr><td><code>[1], ...[*n* ]</code></td><td>括号中的分组捕获</td><td><code>[1] = Brown[2] = Jumps</code></td></tr><tr><td><code>index</code></td><td>匹配到的字符位于原始字符串的基于0的索引值</td><td><code>4</code></td></tr><tr><td><code>input</code></td><td>原始字符串</td><td><code>The Quick Brown Fox Jumps Over The Lazy Dog</code></td></tr></tbody></table><p>非全局调用</p><p>与test()方法类似</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="2020/03/30/JavaScript/"/>
      <url>2020/03/30/JavaScript/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="插入JS"><a href="#插入JS" class="headerlink" title="插入JS"></a>插入JS</h2><p>使用&lt;script&gt;&lt;/script&gt;标签</p><p><q>&lt;script type=”text/javascript”&gt;</q>固定写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    JS写在这里</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS也可以单独存在类似CSS</p><p>在JS文件中不需要&lt;script&gt;标签</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js文件的路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面这句来引用js文件</p><p>JS一般放在&lt;head&gt;或&lt;body&gt;里，浏览器读到时就会运行</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>js的每句代码结束都需要;</li><li>用//添加注释，/*注释内容*/实现多行注释</li><li>使用var声明变量<ul><li>JS中变量区分大小写</li></ul></li><li>if和else用法与C语言几乎一样</li><li>函数使用function定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义好后不会自己执行，需要调用</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h4><ol><li>直接使用引号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;哈哈&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>输出变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;hahah&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br></pre></td></tr></table></figure><ol start="3"><li>输出多项内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">documen.write(str+<span class="string">&quot;script&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>输出html标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">documen.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(字符串或变量)；</span><br></pre></td></tr></table></figure><p>弹出一个消息对话框，包含一个确定按钮</p><p><strong>点击确定前不能进行其他任何操作</strong></p><h3 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h3><h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confirm(str);</span><br></pre></td></tr></table></figure><p>str是在对话框中显示的内容</p><p>返回值是Boolean</p><p>用户点击确定时返回ture，取消返回false</p><h4 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt(str1,str2);</span><br></pre></td></tr></table></figure><p>str1是在对话框中显示的文本</p><p>str2是文本框中的内容</p><p>点确定返回文本框中的内容，取消返回null</p><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><h4 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h4><p><strong>注意使用单引号</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;URL&#x27;</span>,<span class="string">&#x27;窗口名称&#x27;</span>,<span class="string">&#x27;参数字符串,多个用逗号隔开&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>URL可选，在窗口中显示网页的网址或路径。如果省略，那么窗口就不显示任何文档</p></li><li><p>窗口名称可选，被打开窗口的名称</p></li></ul><blockquote><p> 1.该名称由字母、数字和下划线字符组成。<br>      2.”_top”、”_blank”、”_self”具有特殊意义的名称。<br>         _blank：在新窗口显示目标网页<br>         _self：在当前窗口显示目标网页<br>         _top：框架网页中在上部窗口中显示目标网页<br>      3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。<br>     4.name 不能包含有空格。</p></blockquote><ul><li>窗口字符串</li></ul><p><img src="http://img.mukewang.com/52e3677900013d6a05020261.jpg" alt="windowstr"></p><p>sample</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"> <span class="built_in">window</span>.open(<span class="string">&#x27;http://www.imooc.com&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;width=300,height=200,menubar=no,toolbar=no, status=no,scrollbars=yes&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<a href="http://www.imooc.com网站,大小为300px/">http://www.imooc.com网站，大小为300px</a> * 200px，无菜单，无工具栏，无状态栏，有滚动条窗口</p><h4 id="window-close"><a href="#window-close" class="headerlink" title="window.close()"></a>window.close()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.close();<span class="comment">//关闭本窗口</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> mywin=<span class="built_in">window</span>.open(<span class="string">&#x27;http://www.imooc.com&#x27;</span>); <span class="comment">//将新打的窗口对象，存储在变量mywin中</span></span></span><br><span class="line">   mywin.close();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><blockquote><p>1、新窗口打开时弹出确认框，是否打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示: 使用 if 判断确认框是否点击了确定，如点击弹出输入对话框，否则没有任何操作。</span><br></pre></td></tr></table></figure><p>2、通过输入对话框，确定打开的网址，默认为 http：//<a href="http://www.imooc.com/">www.imooc.com/</a></p><p>3、打开的窗口要求，宽400像素，高500像素，无菜单栏、无工具栏。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> new document <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=gbk&quot;</span>/&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sta = confirm(<span class="string">&quot;是否打开窗口&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(sta == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = prompt(<span class="string">&quot;请填写网址&quot;</span>,<span class="string">&quot; http：//www.imooc.com/&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.open(<span class="string">&#x27;url&#x27;</span>,<span class="string">&#x27;width=400,height=500,toolbar=no,menubar=no&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新窗口打开网站&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;openWindow()&quot;</span> /&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>Javascript使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br></pre></td></tr></table></figure><p>声明变量，可以存储数字、字符、字符串</p><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;goodbye&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;verge&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> c = a + b;</span><br><span class="line">alert(c);</span><br></pre></td></tr></table></figure><p>结果是goodbyeverge</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><p>在括号内指定数组长度，虽然数组长度已经确定，但仍可以将数据储存在规定长度之外</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line">myarr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">myarr[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>实现同样的效果还有两种方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>); </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = [<span class="number">1</span>,<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>可以使用未使用的下标，不断给数组添加成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarr[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>数组没有赋值直接输出的话会输出undefined</p><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarr.length;</span><br></pre></td></tr></table></figure><p>可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarr.length = 一个数字;<span class="comment">//改变数组长度</span></span><br></pre></td></tr></table></figure><p>在你改变数组长度后，即使里面什么都没存，长度还是你改变后的。</p><p>如果，一个数组是这样var arr = [1,2,3] 长度为3，如果这是你进行 arr.length = 2,那么长度就会变成2，会把原来arr[2]的位置变为undefined</p><p>数组元素增加长度也会改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">alert(myarr.length);</span><br><span class="line">myarr[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">alert(myarr.length);</span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myarr[][];</span><br></pre></td></tr></table></figure><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr=<span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">//先声明一维 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;   <span class="comment">//一维长度为2</span></span><br><span class="line">   myarr[i]=<span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">//再声明二维 </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;   <span class="comment">//二维长度为3</span></span><br><span class="line">   myarr[i][j]=i+j;   <span class="comment">// 赋值，每个数组元素的值为i+j</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]];<span class="comment">//两行三列</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funname</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">do</span> something;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><ol><li>在&lt;script&gt;标签内直接调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">funname();    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> 在HTML文件中调用，通过点击按钮调用定义好的函数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params"></span>)</span></span></span><br><span class="line">           &#123;</span><br><span class="line">                 sum = 5 + 6;</span><br><span class="line">                 alert(sum);</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click it&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;add2()&quot;</span>&gt;</span>  //按钮,onclick点击事件，直接写函数名</span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="含有参数的函数"><a href="#含有参数的函数" class="headerlink" title="含有参数的函数"></a>含有参数的函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(x+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(x+y);</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = add(x,y);</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是可以被Javascript侦测到的行为</p><p><img src="http://img.mukewang.com/53e198540001b66404860353.jpg"></p><h3 id="onclick-鼠标点击事件"><a href="#onclick-鼠标点击事件" class="headerlink" title="onclick 鼠标点击事件"></a>onclick 鼠标点击事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">value</span> = <span class="string">&quot;点我调用add()&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;add()&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="onload-加载事件"><a href="#onload-加载事件" class="headerlink" title="onload 加载事件"></a>onload 加载事件</h3><p>加载页面时会触发onload事件</p><p>可以理解为打开页面时会出发的事件</p><h3 id="onubload卸载事件"><a href="#onubload卸载事件" class="headerlink" title="onubload卸载事件"></a>onubload卸载事件</h3><p>当用户刷新，关闭页面时触发的事件</p><h3 id="其他事件使用方式大同小异"><a href="#其他事件使用方式大同小异" class="headerlink" title="其他事件使用方式大同小异"></a>其他事件使用方式大同小异</h3><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p>JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有<strong>属性</strong>和<strong>方法</strong>。</p><p><strong>对象的属性：</strong>反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等；</p><p><strong>对象的方法：</strong>能够在对象上执行的动作。例如，表单的“提交”(Submit)，时间的“获取”(getYear)等；<strong>就是在对象的基础上再进行操作</strong></p><p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等，使用对象前先定义，如下使用数组对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  var objectName &#x3D;new Array();&#x2F;&#x2F;使用new关键字定义对象</span><br><span class="line">或者</span><br><span class="line">  var objectName &#x3D;[];</span><br></pre></td></tr></table></figure><p><strong>访问对象属性的语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectName.propertyName</span><br></pre></td></tr></table></figure><p>如使用 Array 对象的 length 属性来获得数组的长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myarray&#x3D;new Array(6);&#x2F;&#x2F;定义数组对象</span><br><span class="line">var myl&#x3D;myarray.length;&#x2F;&#x2F;访问数组长度length属性</span><br></pre></td></tr></table></figure><p><strong>以上代码执行后，myl的值将是：6</strong></p><p><strong>访问对象的方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectName.methodName()</span><br></pre></td></tr></table></figure><p>如使用string 对象的 toUpperCase() 方法来将文本转换为大写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var mystr&#x3D;&quot;Hello world!&quot;;&#x2F;&#x2F;创建一个字符串</span><br><span class="line">var request&#x3D;mystr.toUpperCase(); &#x2F;&#x2F;使用字符串对象方法</span><br></pre></td></tr></table></figure><p>以上代码执行后，request的值是<strong>：HELLO WORLD!</strong></p><h3 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h3><p>可以存储任意一个日期，可以精确到毫秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>初始值为当前电脑系统世间</p><p>自定义初始值可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>,<span class="number">2</span>,<span class="number">23</span>);</span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;Apr 23,2020&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们最好使用下面介绍的“方法”来严格定义时间。</p><p><strong>访问方法语法：</strong>“&lt;日期对象&gt;.&lt;方法&gt;”</p><p>Date对象中处理时间和日期的常用方法：</p><p><img src="http://img.mukewang.com/555c650d0001ae7b04180297.jpg"></p><h4 id="返回-设置年份的方法"><a href="#返回-设置年份的方法" class="headerlink" title="返回/设置年份的方法"></a>返回/设置年份的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mydate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">mydate.setFullYear(<span class="number">20</span>);<span class="comment">//不同浏览器结果不同，有可能是20或0020</span></span><br><span class="line"><span class="keyword">var</span> myyear = mydate.getFullYear();</span><br></pre></td></tr></table></figure><h4 id="返回星期方法"><a href="#返回星期方法" class="headerlink" title="返回星期方法"></a>返回星期方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydate.getDay()<span class="comment">//返回的是0-6的一个数字，0是周日</span></span><br></pre></td></tr></table></figure><h4 id="返回-设置时间的方法"><a href="#返回-设置时间的方法" class="headerlink" title="返回/设置时间的方法"></a>返回/设置时间的方法</h4><p><strong>get/setTime()</strong> 返回/设置时间，单位毫秒数，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。</p><p>时间加一小时就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mydate.setTime(mydate.getTime()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="String-字符串对象"><a href="#String-字符串对象" class="headerlink" title="String 字符串对象"></a>String 字符串对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;jinxuyang&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> srtlen = str.length;<span class="comment">//返回字符串长度</span></span><br><span class="line"><span class="keyword">var</span> STR = str.toUpperCase();<span class="comment">//转换为大写,toLowerCase()转换为小写</span></span><br></pre></td></tr></table></figure><h4 id="charAT-返回指定位置的字符"><a href="#charAT-返回指定位置的字符" class="headerlink" title="charAT() 返回指定位置的字符"></a>charAT() 返回指定位置的字符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringOject.charAt(index)</span><br></pre></td></tr></table></figure><p>参数index即字符在字符串中的下标</p><p>返回一个字符长度为1的字符串</p><h4 id="indexOf-返回指定的字符串首次出现的位置"><a href="#indexOf-返回指定的字符串首次出现的位置" class="headerlink" title="indexOf() 返回指定的字符串首次出现的位置"></a>indexOf() 返回指定的字符串首次出现的位置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.indexOf(substring, startpos)</span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/53853d4200019feb04920149.jpg"></p><p>返回需要检索的字符串的第一个字符第一次出现的位置，如果没有则返回-1</p><h4 id="split-字符串分割"><a href="#split-字符串分割" class="headerlink" title="split() 字符串分割"></a>split() 字符串分割</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.split(separator,limit)</span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/532bee4800014c0404230108.jpg"></p><p>如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</p><p>若达到分割的次数之后，后面分割出来的字串就不会输出，或者说到达分割的次数之后就不再分割</p><h4 id="substring-提取字符串"><a href="#substring-提取字符串" class="headerlink" title="substring() 提取字符串"></a>substring() 提取字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.substring(startPos,stopPos)</span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/532bf1bb000151af04450082.jpg"></p><p>startPos和stopPos可以理解为字符串数组开始和结束的下标，两个参数相等的话就返回一个空串，如果stop比start大会先交换这两个参数</p><p>stopPos</p><p>假设一个字符串是abcdefg那么substring(0,4)提取出来的结果是abcd，到stopPos结束，并不包括stopPos</p><h4 id="substr-提取指定数目字符串"><a href="#substr-提取指定数目字符串" class="headerlink" title="substr() 提取指定数目字符串"></a>substr() 提取指定数目字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.substr(startPos,length)</span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/532bf2e00001105305100098.jpg"></p><p><strong>注意：</strong>如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</p><p>如果startPos为负数且绝对值大于字符串长度，startPos为0</p><h4 id="search-检索字符串中指定的子字符串（正则）"><a href="#search-检索字符串中指定的子字符串（正则）" class="headerlink" title="search() 检索字符串中指定的子字符串（正则）"></a>search() 检索字符串中指定的子字符串（正则）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.search(reg/str)</span><br></pre></td></tr></table></figure><p>返回第一个匹配结果的index，查找不到返回-1</p><p>search()不执行全局匹配，总是从字符串的开始进行检索</p><h4 id="match-检索字符串找到一个或多个与RegExp匹配的文本"><a href="#match-检索字符串找到一个或多个与RegExp匹配的文本" class="headerlink" title="match() 检索字符串找到一个或多个与RegExp匹配的文本"></a>match() 检索字符串找到一个或多个与RegExp匹配的文本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.match(regexp)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p><code>regexp</code></p><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>对象。如果传入一个非正则表达式对象，则会隐式地使用 <code>new RegExp(obj)</code> 将其转换为一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp"><code>RegExp</code></a> 。如果你没有给出任何参数并直接使用match() 方法 ，你将会得到一 个包含空字符串的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array"><code>Array</code></a> ：[“”] 。</p></li></ul><p>返回值</p><ul><li>如果使用g标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</li><li>如果未使用g标志，则仅返回第一个完整匹配及其相关的捕获组（<code>Array</code>）。 在这种情况下，返回的项目将具有如下所述的其他属性。</li></ul><p>附加属性</p><p>如上所述，匹配的结果包含如下所述的附加特性。</p><ul><li><code>groups</code>: 一个捕获组数组 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>（如果没有定义命名捕获组）。</li><li><code>index</code>: 匹配的结果的开始位置</li><li><code>input</code>: 搜索的字符串.</li></ul><p>描述</p><p>如果正则表达式不包含 <code>g </code>标志，<code>str.match()</code> 将返回与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"><code>RegExp.exec()</code></a>. 相同的结果。</p><h4 id="replace-替换字符串中指定子字符串或正则匹配的结果"><a href="#replace-替换字符串中指定子字符串或正则匹配的结果" class="headerlink" title="replace() 替换字符串中指定子字符串或正则匹配的结果"></a>replace() 替换字符串中指定子字符串或正则匹配的结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.replace(regexp,<span class="string">&quot;替换成的内容&quot;</span>)</span><br><span class="line">str.replace(<span class="string">&quot;要替换的内容&quot;</span>，<span class="string">&quot;替换成的内容&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h3><p><strong>注意：</strong>Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。</p><p>Math 对象属性</p><p><img src="http://img.mukewang.com/532fe7cf0001e7b505170269.jpg"></p><p>Math对象方法</p><p><img src="http://img.mukewang.com/532fe841000174db05160622.jpg"></p><h3 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array 数组对象"></a>Array 数组对象</h3><h4 id="concat-数组连接"><a href="#concat-数组连接" class="headerlink" title="concat() 数组连接"></a>concat() 数组连接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.concat(array1,array2,...,arrayN)</span><br></pre></td></tr></table></figure><p>返回一个连接后的数组，不会改变原来的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mya = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">  mya[<span class="number">0</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  mya[<span class="number">1</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">  mya[<span class="number">2</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.write(mya.concat(<span class="number">4</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>可以这样写直接给数组后面在加上4，5，<strong>注意并不改变mya数组</strong></p><h4 id="join-指定分隔符连接数组元素"><a href="#join-指定分隔符连接数组元素" class="headerlink" title="join() 指定分隔符连接数组元素"></a>join() 指定分隔符连接数组元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.join(分隔符)</span><br></pre></td></tr></table></figure><p>若参数留空则默认使用，分开</p><h4 id="reverse-颠倒数组元素顺序"><a href="#reverse-颠倒数组元素顺序" class="headerlink" title="reverse() 颠倒数组元素顺序"></a>reverse() 颠倒数组元素顺序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.reverse()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>该方法会改变原来的数组，而不会创建新的数组。</p><h4 id="slice-选定元素"><a href="#slice-选定元素" class="headerlink" title="slice() 选定元素"></a>slice() 选定元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.slice(start,end)</span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/533299680001637b05160145.jpg"></p><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素</p><h4 id="sort-数组排序"><a href="#sort-数组排序" class="headerlink" title="sort() 数组排序"></a>sort() 数组排序</h4><p>**sort()**方法使数组中的元素按照一定的顺序排列。</p><p><strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.sort(方法函数)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p><img src="http://img.mukewang.com/53329a2a000127f705170060.jpg" alt="img"></p><p>1.如果不指定&lt;方法函数&gt;，则按unicode码顺序排列。</p><p>2.如果指定&lt;方法函数&gt;，则按&lt;方法函数&gt;所指定的排序方法排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray.sort(compareFunction);</span><br></pre></td></tr></table></figure><p>如果没有指明 <code>compareFunction</code> ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 <code>compareFunction</code>），比较的数字会先被转换为字符串，所以在Unicode顺序上 “80” 要比 “9” 要靠前。</p><p>如果指明了 <code>compareFunction</code> ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p><ul><li><p>如果 <code>compareFunction(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前；</p></li><li><p>如果 <code>compareFunction(a, b)</code> 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</p></li><li><p>如果 <code>compareFunction(a, b)</code> 大于 0 ， b 会被排列到 a 之前。</p></li><li><p><code>compareFunction(a, b)</code> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p></li></ul><p>所以，比较函数格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b ) &#123;           <span class="comment">// 按某种排序标准进行比较, a 小于 b</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a must be equal to b</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sortNum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line"> <span class="comment">//升序，如降序，把“a - b”该成“b - a”</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;80&quot;</span>,<span class="string">&quot;16&quot;</span>,<span class="string">&quot;50&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(myarr + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(myarr.sort(sortNum));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">80,16,50,6,100,1</span><br><span class="line">1,6,16,50,80,100</span><br></pre></td></tr></table></figure><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p><img src="http://img.mukewang.com/535483720001a54506670563.jpg"></p><h3 id="JavaScript定时器"><a href="#JavaScript定时器" class="headerlink" title="JavaScript定时器"></a>JavaScript定时器</h3><p><img src="http://img.mukewang.com/56976e1700014fc504090143.jpg"></p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h4><p>载入页面后每隔指定时间执行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(代码，交互时间)</span><br></pre></td></tr></table></figure><p>代码：要执行的代码</p><p>交互时间：周期执行的时间间隔，单位毫秒</p><p>返回值：是一个值，可以把这个值传给clearInterval()从而取消setInterval()的执行</p><p><strong>调用函数格式(**假设有一个clock()函数</strong>):**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(&quot;clock()&quot;,1000)</span><br><span class="line">或</span><br><span class="line">setInterval(clock,1000)</span><br></pre></td></tr></table></figure><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(id_of_setInterval)</span><br></pre></td></tr></table></figure><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(代码，延迟时间);</span><br></pre></td></tr></table></figure><p>延迟时间到后执行代码</p><h4 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h4><p>与clearInterval()相似</p><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。</p><p><strong>注意:从\</strong>窗口**被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。**</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.[属性|方法]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>window可以省略。</p><p><strong>History 对象属性</strong></p><p><a href="http://img.mukewang.com/53548c030001759e05840068.jpg"><img src="http://img.mukewang.com/53548c030001759e05840068.jpg" alt="img"></a></p><p><strong>History 对象方法</strong></p><p><strong><a href="http://img.mukewang.com/53548c200001228206210123.jpg"><img src="http://img.mukewang.com/53548c200001228206210123.jpg" alt="img"></a></strong></p><p>使用length属性，当前窗口的浏览历史总长度，<strong>代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  var HL &#x3D; window.history.length;</span><br><span class="line">  document.write(HL);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.go(number);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><a href="http://img.mukewang.com/5354947e00011a9a06490153.jpg"><img src="http://img.mukewang.com/5354947e00011a9a06490153.jpg" alt="img"></a></p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location用于获取或设置窗体的URL，并且可以用于解析URL。</p><p><strong>语法:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.[属性|方法]</span><br></pre></td></tr></table></figure><p><strong>location对象属性图示:</strong></p><p><a href="http://img.mukewang.com/53605c5a0001b26909900216.jpg"><img src="http://img.mukewang.com/53605c5a0001b26909900216.jpg" alt="img"></a></p><p><strong>location 对象属性：</strong></p><p><strong><a href="http://img.mukewang.com/5354b1d00001c4ec06220271.jpg"><img src="http://img.mukewang.com/5354b1d00001c4ec06220271.jpg" alt="img"></a></strong></p><p><strong>location 对象方法:</strong></p><p><strong><a href="http://img.mukewang.com/5354b1eb00016a2405170126.jpg"><img src="http://img.mukewang.com/5354b1eb00016a2405170126.jpg" alt="img"></a></strong></p><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p><img src="http://img.mukewang.com/5354cff70001428b06880190.jpg"></p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>参考<a href="https://www.runoob.com/htmldom/htmldom-nodes.html">这个</a></p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><h4 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>获取的元素是一个对象，想要对这个元素操作还需要其他东西</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line">    documen.write(str);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样是<strong>错误</strong>的</p><h4 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h4><p>Element比上面那个多了个s</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName();</span><br></pre></td></tr></table></figure><p>由于name属性可能是不唯一的，因此返回值是元素数组，同样也有length属性</p><h4 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(Tagname)</span><br></pre></td></tr></table></figure><p> Tagname是标签的名称，如p、a、img等标签名</p><p>返回值也是数组也有length</p><h4 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h4><p>通过元素结点的属性名获取属性的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementNode.getAttribute(name)</span><br></pre></td></tr></table></figure><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><h4 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute()"></a>setAttribute()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementNode.setAttribute(name,value)</span><br></pre></td></tr></table></figure><p>1.name: 要设置的属性名。</p><p>2.value: 要设置的属性值</p><p><strong>注意：</strong></p><p>1.把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。</p><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.innerHTML</span><br></pre></td></tr></table></figure><p>object是获取的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line">    documen.write(str.innerHTML);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就对了</p><h4 id="改变HTML样式"><a href="#改变HTML样式" class="headerlink" title="改变HTML样式"></a>改变HTML样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.style.property=new style;</span><br></pre></td></tr></table></figure><p>object是获取的元素</p><p>property</p><p><img src="http://img.mukewang.com/52e4d4240001dd6c04850229.jpg" alt="111"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(str.innerHTML);</span></span><br><span class="line"><span class="javascript">    str.style.color=<span class="string">&quot;pink&quot;</span>;<span class="comment">//变粉</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.style.display = <span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure><p>value的值</p><p><img src="http://img.mukewang.com/52e4dba5000179da04110095.jpg" alt="display"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(str.innerHTML);</span></span><br><span class="line"><span class="javascript">    str.style.color=<span class="string">&quot;pink&quot;</span>;<span class="comment">//变粉</span></span></span><br><span class="line"><span class="javascript">    str.style.display=<span class="string">&quot;none&quot;</span>;<span class="comment">//隐藏</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="控制类名"><a href="#控制类名" class="headerlink" title="控制类名"></a>控制类名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.className = <span class="string">&quot;classname&quot;</span>;</span><br></pre></td></tr></table></figure><p>获取元素class属性</p><p>为元素指定一个css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(str.innerHTML);</span></span><br><span class="line"><span class="javascript">    str.style.color=<span class="string">&quot;pink&quot;</span>;<span class="comment">//变粉</span></span></span><br><span class="line"><span class="javascript">    str.style.display=<span class="string">&quot;none&quot;</span>;<span class="comment">//隐藏</span></span></span><br><span class="line"><span class="javascript">    str.classNme = <span class="string">&quot;hahaha&quot;</span><span class="comment">//改变元素类名</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ha</span>&#123;<span class="attribute">color</span>:pink;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.hahaha</span>&#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ha&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结点属性"><a href="#结点属性" class="headerlink" title="结点属性"></a>结点属性</h3><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：</p><ol><li><p>nodeName : 节点的名称</p></li><li><p>nodeValue ：节点的值</p></li><li><p>nodeType ：节点的类型</p></li></ol><p><strong>一、nodeName 属性:</strong> 节点的名称，是只读的。</p><ol><li>元素节点的 nodeName 与标签名相同</li><li>属性节点的 nodeName 是属性的名称</li><li>文本节点的 nodeName 永远是 #text</li><li>文档节点的 nodeName 永远是 #document</li></ol><p><strong>二、nodeValue 属性：</strong>节点的值</p><ol><li>元素节点的 nodeValue 是 undefined 或 null</li><li>文本节点的 nodeValue 是文本自身</li><li>属性节点的 nodeValue 是属性的值</li></ol><p><strong>三、nodeType 属性:</strong> 节点的类型，是只读的。以下常用的几种结点类型:</p><p><strong>元素类型   节点类型</strong><br> 元素      1<br> 属性      2<br> 文本      3<br> 注释      8<br> 文档      9</p><h3 id="访问结点"><a href="#访问结点" class="headerlink" title="访问结点"></a>访问结点</h3><h4 id="访问子节点childNodes"><a href="#访问子节点childNodes" class="headerlink" title="访问子节点childNodes"></a>访问子节点childNodes</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementNode.childNodes</span><br></pre></td></tr></table></figure><p>返回值是所有子节点的列表，可以看作数组，没有子节点则返回一个不包含结点的列表</p><h5 id="访问子节点的第一项和最后一项"><a href="#访问子节点的第一项和最后一项" class="headerlink" title="访问子节点的第一项和最后一项"></a>访问子节点的第一项和最后一项</h5><p>一、**<code>firstChild </code>**属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.firstChild</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>与elementNode.childNodes[0]是同样的效果。 </p><p>二、**<code> lastChild</code>** 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.lastChild</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。 </p><h4 id="访问父节点parentNode"><a href="#访问父节点parentNode" class="headerlink" title="访问父节点parentNode"></a>访问父节点parentNode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementNode.parentNode</span><br></pre></td></tr></table></figure><p>一个结点只能有一个父结点</p><h4 id="访问兄弟结点"><a href="#访问兄弟结点" class="headerlink" title="访问兄弟结点"></a>访问兄弟结点</h4><ol><li>nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。</li></ol><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeObject.nextSibling</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>如果无此节点，则该属性返回 null。</p><ol start="2"><li>previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。</li></ol><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeObject.previousSibling  </span><br></pre></td></tr></table></figure><p><strong>说明：</strong>如果无此节点，则该属性返回 null。</p><h3 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h3><h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.appendChild(newnode)</span><br></pre></td></tr></table></figure><p>在指定节点的<strong>最后一个子节点</strong>列表之后添加一个新的子节点。</p><p>这里的newnode需要使用<code>document.createElement(&quot;标签&quot;)</code>来创建</p><h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h4><p>方法在参考节点之前插入一个拥有指定父节点的子节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.insertBefore(newnode,node);</span><br></pre></td></tr></table></figure><p>newnode: 要插入的新节点。</p><p>node: 指定此节点前插入节点。</p><p>而所谓的“拥有指定父节点”，就是指被参照的节点的父节点就是调用insertBefore方法的节点。</p><p>如果给定的子节点是对文档中现有节点的引用，insertBefore()会将其从当前位置移动到新位置。</p><p>如果给定的子节点是DocumentFragment，那么DocumentFragment的全部内容将被移动到指定父节点的子节点列表中。</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><h4 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let oldChild &#x3D; node.removeChild(child);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;OR</span><br><span class="line"></span><br><span class="line">element.removeChild(child);</span><br></pre></td></tr></table></figure><ul><li><code>child</code> 是要移除的那个子节点.</li><li><code>node</code> 是<code>child</code>的父节点.</li><li>oldChild保存对删除的子节点的引用. <code>oldChild</code> === <code>child</code>.</li></ul><p>被移除的这个子节点仍然存在于内存中,只是没有添加到当前文档的DOM树中,因此,你还可以把这个节点重新添加回文档中,当然,实现要用另外一个变量比如<code>上例中的oldChild</code>来保存这个节点的引用. 如果使用上述语法中的第二种方法, 即没有使用 oldChild 来保存对这个节点的引用, 则认为被移除的节点已经是无用的, 在短时间内将会被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management">内存管理</a>回收.</p><h4 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild()"></a>replaceChild()</h4><p>replaceChild 实现子节点(对象)的替换。返回被替换对象的引用。 </p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.replaceChild (newnode,oldnew ) </span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p>newnode : 必需，用于替换 oldnew 的对象。<br>oldnew : 必需，被 newnode 替换的对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="2020/03/28/HTML/"/>
      <url>2020/03/28/HTML/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="html文件的基本结构"><a href="#html文件的基本结构" class="headerlink" title="html文件的基本结构"></a>html文件的基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注释是这样写的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>这里是head,title里的内容会显示在浏览器标题栏里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是body<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="这些都很简单"><a href="#这些都很简单" class="headerlink" title="这些都很简单"></a>这些都很简单</h3><h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><p>一般网页需要展示出来的内容就存放在body标签里</p><a id="more"></a><h4 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h4><p>段落标签</p><h4 id="hx标签"><a href="#hx标签" class="headerlink" title="hx标签"></a>hx标签</h4><p>共有h1到h6六个从大到小的标签</p><h4 id="em和strong标签"><a href="#em和strong标签" class="headerlink" title="em和strong标签"></a>em和strong标签</h4><p>em是<em>斜体</em>，strong是<strong>加粗</strong></p><h4 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h4><p>span本身没有什么作用，它就是用来设置单独的样式用的</p><h4 id="q标签"><a href="#q标签" class="headerlink" title="q标签"></a>q标签</h4><p>短文本引用，引用后会自动给引用的部分加上引号</p><h4 id="blockquote标签"><a href="#blockquote标签" class="headerlink" title="blockquote标签"></a>blockquote标签</h4><blockquote>长文本引用，这个不会加引号，但是会产生缩进</blockquote><p><img src="http://img.mukewang.com/528c50ea000146a205520264.jpg" alt="blockquote"></p><h4 id="br标签和-amp-nbsp"><a href="#br标签和-amp-nbsp" class="headerlink" title="br标签和&amp;nbsp;"></a>br标签和&amp;nbsp;</h4><p>html中回车空格是无效的，换行需要&lt;br /&gt;或&lt;br&gt;(常用&lt;br /&gt;)</p><p>br与其他标签不同的是，br不需要成对出现</p><p>&amp;nbsp;就代表空格</p><h4 id="hr标签"><a href="#hr标签" class="headerlink" title="hr标签"></a>hr标签</h4><p>效果</p><hr><p>写成&lt;hr&gt;或&lt;hr /&gt;</p><h4 id="address标签"><a href="#address标签" class="headerlink" title="address标签"></a>address标签</h4><p>效果</p><address>陕西西安</address><h4 id="code标签"><a href="#code标签" class="headerlink" title="code标签"></a>code标签</h4><p>效果</p><p><code>while(1)</code></p><h4 id="pre标签"><a href="#pre标签" class="headerlink" title="pre标签"></a>pre标签</h4><p>插入大段代码</p><pre>    #include<iostream>    using namespace std;    int main(){        cout << "Hello Word" << endl;    }</pre><h3 id="列表-表格"><a href="#列表-表格" class="headerlink" title="列表/表格"></a>列表/表格</h3><h4 id="ul-ol标签"><a href="#ul-ol标签" class="headerlink" title="ul ol标签"></a>ul ol标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>456<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>789<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li>123</li>    <li>456</li>    <li>789</li></ul><p>无序列表&lt;ul&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>456<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>789<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol>    <li>123</li>    <li>456</li>    <li>789</li></ol><p>有序列表&lt;ol&gt;</p><h4 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h4><p>可以用来划分区域</p><h4 id="table标签和caption标签"><a href="#table标签和caption标签" class="headerlink" title="table标签和caption标签"></a>table标签和caption标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">”这里的文字不会显示，增加表格可读性“</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果不加&lt;thead&gt;&lt;tbody&gt;&lt;tfooter&gt; , table表格加载完后才显示。加上这些表格结构， tbody包含行的内容下载完优先显示，不必等待表格结束后在显示，同时如果表格很长，用tbody分段，可以一部分一部分地显示。（通俗理解table 可以按结构一块块的显示，不在等整个表格加载完后显示。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caotion</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">caotion</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--表格的行--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="comment">&lt;!--th是表格的表头--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>平均成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>一班<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--一个单元格，有几个就说明表格有几列--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>89<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>二班<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>35<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table summary=”这里的文字不会显示，增加表格可读性“>    <tbody>         <caotion>这是标题</caotion>        <tr>          <th>班级</th>          <th>学生数</th>          <th>平均成绩</th>        </tr>        <tr>          <td>一班</td>          <td>30</td>          <td>89</td>        </tr>        <tr>          <td>二班</td>          <td>35</td>          <td>85</td>        </tr>    </tbody></table><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;目标网址&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;鼠标滑过显示的文本&quot;</span>&gt;</span>链接显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a  href="baidu.com"  title="鼠标滑过显示的文本">链接显示的文本</a></p><p>默认情况下链接的网页是在档期浏览器窗口打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;目标网址&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;鼠标滑过显示的文本&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>链接显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>z这样写就是在新窗口打开</p><h4 id="malito标签"><a href="#malito标签" class="headerlink" title="malito标签"></a>malito标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:981340404@qq.com?cc=jinxuyang3@gmail.com&amp;subject=我觉得你很帅&amp;body=真的&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="mailto:981340404@qq.com?cc=jinxuyang3@gmail.com&subject=我觉得你很帅&body=真的">发送</a></p><p>mailto后若有多个参数的话，第一个参数用?开头，后面跟的参数用&amp;开头</p><p>mailto后是**”:”<strong>,其他参数后是</strong>“=”**</p><p><img src="http://img.mukewang.com/52da4f2a000150b714280550.jpg" alt="mailto"></p><h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;下载失败时的替换文本&quot;</span> <span class="attr">title</span> = <span class="string">&quot;提示文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>图片使用<strong>src</strong>标识位置</p><p><strong>alt</strong>当图像不可见时，显示的文本</p><img src="" alt="就显示这个"><p><strong>title</strong>鼠标滑过时显示的文本</p><p>img也不需要成对出现</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><strong>可以把用户输入内容传到服务端</strong></p><p>&lt;form&gt;标签成对出现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>    <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>   <span class="attr">action</span>=<span class="string">&quot;save.php&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>method</strong>数据的传输方式（get/post）</p><p><strong>action</strong>数据被传送到的地方</p><p><strong>所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在  标签之间</strong></p><h4 id="文本-密码输入框"><a href="#文本-密码输入框" class="headerlink" title="文本/密码输入框"></a>文本/密码输入框</h4><p>&lt;input /&gt;单独出现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text/password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type=”text”时文本输入框</p><p>type=”password”时是密码输入框</p><p>name：文本框命名</p><p>value：文本框默认值，不输入时显示的内容</p><form>    <input type="text" name="account" value="value里显示的" /><br />    <input type="password" name="account" value="123123123" /></form><h4 id="多行文本输入"><a href="#多行文本输入" class="headerlink" title="多行文本输入"></a>多行文本输入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;行数&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;列数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><textarea rows="5" cols="5"></textarea></p><h4 id="单选框-复选框"><a href="#单选框-复选框" class="headerlink" title="单选框/复选框"></a>单选框/复选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio/checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>type</strong></li></ul><p>=radio为单选框</p><p>=checkbox为复选框</p><ul><li>value提交到服务器的值</li><li>name为控件命名</li><li>check=checked时该项默认勾选</li></ul><p><strong>同一组的单选按钮name一定要相同这样才能实现单选</strong></p><form>    <label>你是人</label>    <input type="radio" value="1" name="单选" />    <br \>    <label>你不是🐖</label>    <input type="radio" value="1" name="单选" /></form><hr \><form>    1<input type="checkbox" value="1" name="1" />    2<input type="checkbox" value="1" name="2" />    3<input type="checkbox" value="1" name="3" checked="checked"/></form><h4 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;2&#x27;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>value是向服务器提交的值</li><li>selected=”selected”表示该项默认选中,没有这个默认第一项</li></ul><select>    <option value='1'>1</option>    <option value='2' selected="selected">2</option></select><h5 id="使用下拉列表框进行多选"><a href="#使用下拉列表框进行多选" class="headerlink" title="使用下拉列表框进行多选"></a>使用下拉列表框进行多选</h5><p>再&lt;select&gt;中添加multiple=”mutiple”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><select multiple="multiple">    <option value='1'>1</option>    <option value='2'>2</option></select><h4 id="提交-重置按钮"><a href="#提交-重置按钮" class="headerlink" title="提交/重置按钮"></a>提交/重置按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit/reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>type=”submit”这样设置才是提交按钮</li><li>value按钮上显示的内容</li></ul><form>    <input type="submit" value="提交" />    <input type="reset" value="重置" /></form><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><p>本来要选中控件就需要点中控件本身，有了label就可以把某些文字与控件关联，实现点击文字就聚焦到控件上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你是🐖<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;r&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;2&quot;</span>&gt;</span>你是人<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;r&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;2&quot;</span>&gt;</span>你是🐖<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;r&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你是人<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;r&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    <label for="1">你是🐖</label>    <input type="radio" id="1" name="r"/>    <label for="2">你是人</label>    <input type="radio" id="2" name="r"/></form><form>    <label for="2">你是🐖</label>    <input type="radio" id="1" name="r"/>    <label for="1">你是人</label>    <input type="radio" id="2" name="r"/></form>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛入门经典笔记</title>
      <link href="2020/03/23/string/"/>
      <url>2020/03/23/string/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="程序3-1-逆序输出"><a href="#程序3-1-逆序输出" class="headerlink" title="程序3-1 逆序输出"></a>程序3-1 逆序输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) == <span class="number">1</span>)</span><br><span class="line">        a[n++] = x;<span class="comment">//读取，先赋值a[n]＝x，然后执行n＝n＋1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);<span class="comment">//逆序输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>]);<span class="comment">//最后一个输出后跟换行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>数组声明在main函数外可以开的更大</strong></p><p>数组不可以直接b=a，但可以使用memcpy(b,a,sizeof(int)*k),这个函数中的int需要根据数据类型不同，进行改变。这个函数包含在string.h中</p><h3 id="程序3-2-开灯问题"><a href="#程序3-2-开灯问题" class="headerlink" title="程序3-2 开灯问题"></a>程序3-2 开灯问题</h3><blockquote><p>开灯问题。有n盏灯，编号为1～n。第1个人把所有灯打开，第2个人按下所有编号为2的倍数的开关（这些灯将被关掉），第3个人按下所有编号为3的倍数的开关（其中关掉灯<br>将被打开，开着的灯将被关闭），依此类推。一共有k个人，问最后有哪些灯开着？输入n和k，输出开着的灯的编号。k≤n≤1000。</p><p>样例输入：<br>7 3<br>样例输出：<br>1 5 6 7</p></blockquote><p>模拟题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, first = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));<span class="comment">//初始化数组</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<span class="comment">//n盏灯，k个人</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    <span class="keyword">if</span>(j % i == <span class="number">0</span>) a[j] = !a[j];<span class="comment">//j%i==0可以计算出i的倍数，符合条件就改变灯的状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//循环输出</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]) &#123; <span class="comment">//灯开着就输出</span></span><br><span class="line">            <span class="keyword">if</span>(first) first = <span class="number">0</span>; <span class="comment">//第一个进行特殊化处理，放在第一个的原因是，最后一个不好找</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>); </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>蛇形填数。在n×n方阵里填入1，2，…，n×n，要求填成蛇形。例如，n＝4时方阵为：<br>10 11 12 1<br>9   16  13  2<br>8 15 14   3<br>7 6 5       4</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, y, tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//读方阵边长</span></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    tot = a[x=<span class="number">0</span>][y=n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    上面这句其实就是</span></span><br><span class="line"><span class="comment">    x = 0;</span></span><br><span class="line"><span class="comment">    y = n-1;</span></span><br><span class="line"><span class="comment">    a[x][y] = 1;  </span></span><br><span class="line"><span class="comment">    tot = 1;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span>(tot &lt; n*n)&#123; <span class="comment">//向四个方向移动，先判断是否到达边界，是否已经来过，再移动，再赋值，</span></span><br><span class="line">        <span class="keyword">while</span>(x+<span class="number">1</span>&lt;n &amp;&amp; !a[x+<span class="number">1</span>][y]) a[++x][y] = ++tot;</span><br><span class="line">        <span class="keyword">while</span>(y<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; !a[x][y<span class="number">-1</span>]) a[x][--y] = ++tot;</span><br><span class="line">        <span class="keyword">while</span>(x<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; !a[x<span class="number">-1</span>][y]) a[--x][y] = ++tot;</span><br><span class="line">        <span class="keyword">while</span>(y+<span class="number">1</span>&lt;n &amp;&amp; !a[x][y+<span class="number">1</span>]) a[x][++y] = ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; n; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; n; y++) <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, a[x][y]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在很多情况下，最好是在做一件事之前检查是不是可以做，而不要做完再后悔。因为“悔棋”往往比较麻烦。</strong></p><p><strong>细心的读者也许会发现这里的一个“潜在bug”：如果越界，x+1会等a[x+1][y]将访问非法内存！幸运的是，这样的担心是不必要的。“&amp;&amp;”是短路运算符（还记得我们在哪里提到过吗？）。如果x+1&lt;n为假，将不会计算“!a[x+1][y]”，也就不会越界了。</strong></p><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><h3 id="程序3-4-竖式问题"><a href="#程序3-4-竖式问题" class="headerlink" title="程序3-4　竖式问题"></a>程序3-4　竖式问题</h3><blockquote><p>竖式问题。找出所有形如abc*de（三位数乘以两位数）的算式，使得在完整的竖式中，所有数字都属于一个特定的数字集合。输入数字集合（相邻数字之间没有空格），输出所有竖式。每个竖式前应有编号，之后应有一个空行。最后输出解的总数。具体格式见样例输出(为了便于观察，竖式中的空格改用小数点显示，但所写程序中应该输出空格，而非小数点）。<br>样例输入：<br>2357<br>样例输出：<br>&lt;1&gt;<br>..775</p><p>X..33</p><p>.2325</p><p>2325.</p><p>25575<br>The number of solutions = 1</p></blockquote><p>伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> abc = <span class="number">111</span>; abc &lt;= <span class="number">999</span>; abc++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> de = <span class="number">11</span>; de &lt;= <span class="number">99</span>; de++)</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;abc*de&quot;</span>是个合法的竖式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;%d&gt;\n&quot;</span>, count);</span><br><span class="line">打印abc*de的竖式和其后的空行</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The number of solutions = %d\n&quot;</span>, count);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>], buf[<span class="number">99</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> abc = <span class="number">111</span>; abc &lt;= <span class="number">999</span>; abc++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> de = <span class="number">11</span>; de &lt;= <span class="number">99</span>; de++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = abc * (de % <span class="number">10</span>), y = abc * (de / <span class="number">10</span>), z = abc * de;<span class="comment">//模拟竖式计算过程</span></span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d%d%d%d%d&quot;</span>, abc, de, x, y, z);<span class="comment">//把这个竖式 的所有字符放入buf中</span></span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buf); i++)<span class="comment">//遍历buf的所有字符</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(s, buf[i]) == <span class="literal">NULL</span>) ok = <span class="number">0</span>;<span class="comment">//如果buf里有一个字符在s中找不到，就不符合要求，ok=0不输出</span></span><br><span class="line"><span class="keyword">if</span> (ok)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;%d&gt;\n&quot;</span>, ++count);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d\nX%4d\n-----\n%5d\n%4d\n-----\n%5d\n\n&quot;</span>, abc, de, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The number of solutions = %d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="strchr"><a href="#strchr" class="headerlink" title="strchr():"></a>strchr():</h4><p>​    原型：</p><p>​        char *strchr(const char *str, int c)</p><p>​    参数：</p><p>​        str–要被检索的C字符串</p><p>​        c–在str中要搜索的字符</p><p>​    返回值：</p><p>​        该函数返回在字符串 str 中第一次出现字符 c 的位置，如果未找到该字符则返回 NULL。</p><h4 id="sprintf-："><a href="#sprintf-：" class="headerlink" title="sprintf()："></a>sprintf()：</h4><p>​    将格式化的数据写入字符串    </p><p>​    原型：</p><p>​         int sprintf(char *str, char * format [, argument, …]);</p><p>​    参数：        </p><p>​        str为要写入的字符串；format为格式化字符串，与printf()函数相同；argument为变量</p><p>​    返回值：</p><p>​            成功则返回参数str 字符串长度，失败则返回-1</p><h4 id="strlen-："><a href="#strlen-：" class="headerlink" title="strlen()："></a>strlen()：</h4><p>​    返回字符串实际长度</p><h4 id="scanf-“-s”-s"><a href="#scanf-“-s”-s" class="headerlink" title="scanf(“%s”, s)"></a>scanf(“%s”, s)</h4><p>​    使用该函数读取字符串，当遇到空格或TAB时，不会将他们读入</p><h2 id="竞赛题目选讲"><a href="#竞赛题目选讲" class="headerlink" title="竞赛题目选讲"></a>竞赛题目选讲</h2><h3 id="例题3-2-WERTYU（WERTYU-UVa10082）"><a href="#例题3-2-WERTYU（WERTYU-UVa10082）" class="headerlink" title="例题3-2　WERTYU（WERTYU, UVa10082）"></a>例题3-2　WERTYU（WERTYU, UVa10082）</h3><blockquote><p>把手放在键盘上时，稍不注意就会往右错一位。这样，输入Q会变成输入W，输入J会变成输入K等。键盘如图3-2所示。<br>输入一个错位后敲出的字符串（所有字母均大写），输出打字员本来想打出的句子。输入保证合法，即一定是错位之后的字符串。例如输入中不会出现大写字A。<br>样例输入：<br>O S, GOMR YPFSU/<br>样例输出：<br>I AM FINE TODAY.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">&quot;`1234567890-=QWERTYUIOP[]\\ASDFGHJKL;&#x27;ZXCVBNM,./&quot;</span>;<span class="comment">//常量数组，真好！！！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, c;</span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != EOF) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; s[i] &amp;&amp; s[i] != c; i++); <span class="comment">//找错位之后的字符在常量表中的位置</span></span><br><span class="line"><span class="keyword">if</span> (s[i]) <span class="built_in">putchar</span>(s[i - <span class="number">1</span>]); <span class="comment">//如果找到，则输出它的前一个字符</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>主要是常量数组的使用</strong></p><blockquote><p>输入一个字符串，判断它是否为回文串以及镜像串。输入字符串保证不含数字0。所谓回文串，就是反转以后和原串相同，如abba和madam。所有镜像串，就是左右镜像之后和原串相同，如2S和3AIAE。注意，并不是每个字符在镜像之后都能得到一个合法字符。在本题中，每个字符的镜像如图3-3所示（空白项表示该字符镜像后不能得到一个合法字符）。<br><img src="https://s1.ax1x.com/2020/03/24/8qbomF.png" alt="8qbomF.png"><br>输入的每行包含一个字符串（保证只有上述字符。不含空白字符），判断它是否为回文<br>串和镜像串（共4种组合）。每组数据之后输出一个空行。<br>样例输入：<br>NOTAPALINDROME<br>ISAPALINILAPASI<br>2A3MEAS<br>ATOYOTA<br>样例输出：<br>NOTAPALINDROME – is not a palindrome.<br>ISAPALINILAPASI – is a regular palindrome.<br>2A3MEAS – is a mirrored string.<br>ATOYOTA – is a mirrored palindrome.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* rev = <span class="string">&quot;A   3  HIL JM O   2TUVWXY51SE Z  8 &quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* msg[] = &#123;<span class="string">&quot;not a palindrome&quot;</span>, <span class="string">&quot;a regular palindrome&quot;</span>, <span class="string">&quot;a mirrored string&quot;</span>,</span><br><span class="line"><span class="keyword">char</span> r(<span class="keyword">char</span> ch) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) <span class="keyword">return</span> rev[ch - <span class="string">&#x27;A&#x27;</span>];<span class="comment">//如果ch是个字母，就返回ch-&#x27;A&#x27;(这个的意思就是在rev中的序号)</span></span><br><span class="line"><span class="keyword">return</span> rev[ch - <span class="string">&#x27;0&#x27;</span> + <span class="number">25</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);<span class="comment">//读取字符串实际长度</span></span><br><span class="line"><span class="keyword">int</span> p = <span class="number">1</span>, m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (len + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;<span class="comment">//只要一半符合要求即可确定，因为回文串和镜像串从中间分开，两头都存在一定的关系，因此i &lt; (len + i) / 2</span></span><br><span class="line"><span class="keyword">if</span> (s[i] != s[len - <span class="number">1</span> - i]) p = <span class="number">0</span>; <span class="comment">//不是回文串,len-1-i实现倒序</span></span><br><span class="line"><span class="keyword">if</span> (r(s[i]) != s[len - <span class="number">1</span> - i]) m = <span class="number">0</span>; <span class="comment">//不是镜像串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s -- is %s.\n\n&quot;</span>, s, msg[m * <span class="number">2</span> + p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>头文件ctype.h中定义的isalpha，isdigit，isorint可以用来判断字符的属性，toupper，tolower可以用来转换大小写</strong></p><h3 id="例题3-4-猜数字游戏的提示（Master-Mind-Hints-UVa-340）"><a href="#例题3-4-猜数字游戏的提示（Master-Mind-Hints-UVa-340）" class="headerlink" title="例题3-4　猜数字游戏的提示（Master-Mind Hints, UVa 340）"></a>例题3-4　猜数字游戏的提示（Master-Mind Hints, UVa 340）</h3><blockquote><p>实现一个经典”猜数字”游戏。给定答案序列和用户猜的序列，统计有多少数字位置正确（A），有多少数字在两个序列都出现过但位置不对（B）。<br>输入包含多组数据。每组输入第一行为序列长度n，第二行是答案序列，接下来是若干猜测序列。猜测序列全0时该组数据结束。n=0时输入结束。</p><p>样例输入：<br>4<br>1 3 5 5<br>1 1 2 3<br>4 3 3 5<br>6 5 5 1<br>6 1 3 5<br>1 3 5 5<br>0 0 0 0<br>10<br>1 2 2 2 4 5 6 6 6 9<br>1 2 3 4 5 6 7 8 9 1<br>1 1 2 2 3 3 4 4 5 5<br>1 2 1 3 1 5 1 6 1 9<br>1 2 2 5 5 5 6 6 6 7<br>0 0 0 0 0 0 0 0 0 0</p><p>样例输出：<br>Game 1:<br>(1,1)<br>(2,0)<br>(1,2)<br>(1,2)<br>(4,0)<br>Game 2:<br>(2,4)<br>(3,2)<br>(5,0)<br>(7,0)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123; <span class="comment">//n=0时输入结束</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Game %d:\n&quot;</span>, ++kase);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);<span class="comment">//读入答案</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="keyword">int</span> A = <span class="number">0</span>, B = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);<span class="comment">//读入用户猜的序列</span></span><br><span class="line"><span class="keyword">if</span> (a[i] == b[i]) A++; <span class="comment">//相同位置，且相同的用A来记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//正常的猜测序列不会有0，所以只判断第一个数是否为0即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d++) &#123;</span><br><span class="line"><span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>; <span class="comment">//统计数字d在答案序列和猜测序列中各出现多少次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == d) c1++;</span><br><span class="line"><span class="keyword">if</span> (b[i] == d) c2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c1 &lt; c2) B += c1; <span class="keyword">else</span> B += c2;</span><br><span class="line">&#125;<span class="comment">//刘老师真是nb，这里把答案数组和用户数组的每一位拿出来和1-9分别比较，统计每一个数字出现的次数，然后输出两个计数器中值小的一个（一旦小的都大于等于1，就说明两个数列中都含有这个数）</span></span><br><span class="line">            <span class="number">1355</span></span><br><span class="line">            <span class="number">1123</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; (%d,%d)\n&quot;</span>, A, B - A);<span class="comment">//B-A总数-位置相同的，就是。。。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例题3-5-生成元（Digit-Generator-ACM-ICPC-Seoul-2005-UVa1583）"><a href="#例题3-5-生成元（Digit-Generator-ACM-ICPC-Seoul-2005-UVa1583）" class="headerlink" title="例题3-5　生成元（Digit Generator, ACM/ICPC Seoul 2005, UVa1583）"></a>例题3-5　生成元（Digit Generator, ACM/ICPC Seoul 2005, UVa1583）</h3><blockquote><p>如果x加上x的各个数字之和得到y，就说x是y的生成元。给出n（1≤n≤100000），求最小生成元。无解输出0。例如，n=216，121，2005时的解分别为198，0，1979。</p></blockquote><p><strong>为了节省空间，提升效率，可以一次性把100000内所有数字的生成元计算出来，然后输出时直接调用</strong></p><p><strong>一个数的生成元可能有多个</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"><span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; maxn; m++) &#123;<span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> x = m, y = m;</span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123; y += x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;<span class="comment">//把x拆分，各项相加</span></span><br><span class="line"><span class="keyword">if</span> (ans[y] == <span class="number">0</span> || m &lt; ans[y]) ans[y] = m;<span class="comment">//把这个数的生成元存到数组里，下标为数字，值为生成元</span></span><br><span class="line">        <span class="comment">//有点难理解，可以让m=198自行尝试一下，就会发现其实这个程序是倒着来的，是已知某个数的生成元，然后再计算出这个数</span></span><br><span class="line">        <span class="comment">//一个数的生成元是不唯一的，因此需要ans[y] == 0 || m &lt; ans[y]进行限制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例题3-6-环状序列（Circular-Sequence-ACM-ICPC-Seoul-2004-UVa1584）"><a href="#例题3-6-环状序列（Circular-Sequence-ACM-ICPC-Seoul-2004-UVa1584）" class="headerlink" title="例题3-6　环状序列（Circular Sequence, ACM/ICPC Seoul 2004, UVa1584）"></a>例题3-6　环状序列（Circular Sequence, ACM/ICPC Seoul 2004, UVa1584）</h3><blockquote><p>长度为n的环状串有n种表示法，分别为从某个位置开始顺时针得到。例如，图3-4的环状串有10种表示：</p><p><a href="https://imgchr.com/i/8juuRJ"><img src="https://s1.ax1x.com/2020/03/25/8juuRJ.png" alt="8juuRJ.png"></a></p><p>CGAGTCAGCT，GAGTCAGCTC，AGTCAGCTCG等。在这些表示法中，字典序最小的称为”最小表示”。<br>输入一个长度为n（n≤100）的环状DNA串（只包含A、C、G、T这4种字符）的一种表示法，你的任务是输出该环状串的最小表示。例如，CTCC的最小表示是CCCT，CGAGTCAGCT的最小表示为AGCTCGAGTC。</p></blockquote><p><strong>我理解能力不行，基本上每个题都要看原题才看得懂（可以上vj上看）</strong></p><p><strong>字典序（lexicographical order）：就是字符串在字典中的排序。abc比bcd小，hi比his小，1，2，4，7比1，2，5小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="comment">//环状串s的表示法p是否比表示法q的字典序小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">less</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">int</span> i, <span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (s[(i + j) % n] != s[(ans + j) % n])</span><br><span class="line">            <span class="number">1</span> <span class="number">0</span>/<span class="number">2</span> <span class="number">1</span>/<span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> s[(i + j) % n] &lt; s[(ans + j) % n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//相等</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (less(s, i, ans)) ans = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">putchar</span>(s[(i + ans) % n]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="习题3-1-得分（Score-ACM-ICPC-Seoul-2005-UVa1585）"><a href="#习题3-1-得分（Score-ACM-ICPC-Seoul-2005-UVa1585）" class="headerlink" title="习题3-1　得分（Score, ACM/ICPC Seoul 2005, UVa1585）"></a>习题3-1　得分（Score, ACM/ICPC Seoul 2005, UVa1585）</h3><p>题目地址：<a href="https://vjudge.net/problem/UVA-1585">https://vjudge.net/problem/UVA-1585</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, res = <span class="number">0</span>, temp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((x = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x = <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">res += temp;</span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="习题3-2-分子量（Molar-Mass-ACM-ICPC-Seoul-2007-UVa1586）"><a href="#习题3-2-分子量（Molar-Mass-ACM-ICPC-Seoul-2007-UVa1586）" class="headerlink" title="习题3-2　分子量（Molar Mass, ACM/ICPC Seoul 2007, UVa1586）"></a>习题3-2　分子量（Molar Mass, ACM/ICPC Seoul 2007, UVa1586）</h3><p><strong>又臭又长的烂代码，但是至少可以安慰自己这个代码好理解把，哈哈哈</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> ex[] = &#123;<span class="number">67</span>, <span class="number">12.01</span>, <span class="number">72</span>, <span class="number">1.008</span>, <span class="number">79</span>, <span class="number">16.00</span>, <span class="number">78</span>, <span class="number">14.01</span>&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[i])) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isalpha</span>(s[i + <span class="number">1</span>]) &amp;&amp; i + <span class="number">1</span> &lt; len) &#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isalpha</span>(s[i + n]) &amp;&amp; i + n &lt; len) &#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp1 = <span class="number">1</span>, temp2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + n - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">temp2 += (s[j] - <span class="number">48</span>) * temp1;</span><br><span class="line">temp1 *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == ex[j]) &#123;</span><br><span class="line">res += ex[j + <span class="number">1</span>] * temp2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == ex[j]) &#123;</span><br><span class="line">res += ex[j + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这题考察的应该是ctype.h里的函数的应用，isalpha，isdigit，当时没想到isdigit这个函数，所以写的比较复杂</strong></p><p><strong>在vj的评论区看到了29行的代码，牛皮</strong></p><h3 id="习题3-3-数数字（Digit-Counting-ACM-ICPC-Danang-2007-UVa1225）"><a href="#习题3-3-数数字（Digit-Counting-ACM-ICPC-Danang-2007-UVa1225）" class="headerlink" title="习题3-3　数数字（Digit Counting , ACM/ICPC Danang 2007, UVa1225）"></a>习题3-3　数数字（Digit Counting , ACM/ICPC Danang 2007, UVa1225）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> x[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10005</span>; i++) &#123;</span><br><span class="line">x[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line"><span class="keyword">int</span> q = <span class="number">0</span>, w = <span class="number">0</span>, e = <span class="number">0</span>, r = <span class="number">0</span>, t = <span class="number">0</span>, y = <span class="number">0</span>, u = <span class="number">0</span>, j = <span class="number">0</span>, o = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = i;</span><br><span class="line"><span class="keyword">while</span> (temp) &#123;</span><br><span class="line"><span class="keyword">switch</span> (temp % <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: q++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: w++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: e++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: r++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: t++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: y++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: u++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: j++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: o++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>: p++; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d %d %d %d %d\n&quot;</span>, q, w, e, r, t, y, u, j, o, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="习题3-4-周期串（Periodic-Strings-UVa455）"><a href="#习题3-4-周期串（Periodic-Strings-UVa455）" class="headerlink" title="习题3-4　周期串（Periodic Strings, UVa455）"></a>习题3-4　周期串（Periodic Strings, UVa455）</h3><p>搞我心态。。</p><p><img src="https://s1.ax1x.com/2020/03/27/GCYz7V.png" alt="GCYz7V.png"></p><p>..到网上随便找了个oj，贡献了一发WA，改了改代码，再到vj上就就提交上去了，哈哈哈vj这是为了我好！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s), count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= len) &#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] != s[j % count] || len % count != <span class="number">0</span>) &#123;</span><br><span class="line">ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个代码在vj上没过，在台湾那个oj上过了，不得不说vj真是严格</strong></p><p><strong>调整了一下格式总算AC了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s), count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= len) &#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] != s[j % count] || len % count != <span class="number">0</span>) &#123;</span><br><span class="line">ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="习题3-5-谜题（Puzzle-ACM-ICPC-World-Finals-1993-UVa227）"><a href="#习题3-5-谜题（Puzzle-ACM-ICPC-World-Finals-1993-UVa227）" class="headerlink" title="习题3-5　谜题（Puzzle, ACM/ICPC World Finals 1993, UVa227）"></a>习题3-5　谜题（Puzzle, ACM/ICPC World Finals 1993, UVa227）</h3><p><strong>这个代码没AC，格式有问题</strong></p><p><strong>写了一中午，在vj上获得两发persentation error之后脑子炸裂决定放弃</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> f[<span class="number">5</span>][<span class="number">5</span>],temp;</span><br><span class="line"><span class="keyword">int</span> x,y; </span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>((temp = getchar()) != <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">f[i][j] = temp;</span><br><span class="line"><span class="keyword">if</span> (f[i][j] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">x = i;</span><br><span class="line">y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j--; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> op = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((op = getchar()) != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (x<span class="number">-1</span> &gt;= <span class="number">0</span> ) &#123;f[x][y] = f[x<span class="number">-1</span>][y]; f[x<span class="number">-1</span>][y] = <span class="string">&#x27; &#x27;</span>; x = x - <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (x+<span class="number">1</span> &lt; <span class="number">5</span> ) &#123;f[x][y] = f[x+<span class="number">1</span>][y]; f[x+<span class="number">1</span>][y] = <span class="string">&#x27; &#x27;</span>; x = x + <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (y<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;f[x][y] = f[x][y<span class="number">-1</span>]; f[x][y<span class="number">-1</span>] = <span class="string">&#x27; &#x27;</span>; y = y - <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (y + <span class="number">1</span> &lt; <span class="number">5</span>) &#123;f[x][y] = f[x][y+<span class="number">1</span>]; f[x][y+<span class="number">1</span>] = <span class="string">&#x27; &#x27;</span>; y = y + <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> isfil = <span class="number">1</span>, isfic = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line"><span class="keyword">if</span>(tag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Puzzle #%d:\n&quot;</span>, count);</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\nPuzzle #%d:\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!isfil) isfic = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> isfil = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (isfic) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, f[i][j]);</span><br><span class="line">isfic = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>, f[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Puzzle #%d:\n&quot;</span>, count);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This puzzle has no final configuration.\n\n&quot;</span>);</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPuzzle #%d:\n&quot;</span>, count);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This puzzle has no final configuration.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数和递归"><a href="#函数和递归" class="headerlink" title="函数和递归"></a>函数和递归</h2><h3 id="例题4-3-救济金发放（The-Dole-Queue-UVa-133）"><a href="#例题4-3-救济金发放（The-Dole-Queue-UVa-133）" class="headerlink" title="例题4-3　救济金发放（The Dole Queue, UVa 133）"></a>例题4-3　救济金发放（The Dole Queue, UVa 133）</h3><blockquote><p>n(n&lt;20)个人站成一圈，逆时针编号为1～n。有两个官员，A从1开始逆时针数，B从n开始顺时针数。在每一轮中，官员A数k个就停下来，官员B数m个就停下来（注意有可能两个官员停在同一个人上）。接下来被官员选中的人（1个或者2个）离开队伍。<br>输入n，k，m输出每轮里被选中的人的编号（如果有两个人，先输出被A选中的）。例如，n=10，k=4，m=3，输出为4 8, 9 5, 3 1, 2 6, 10, 7。注意：输出的每个数应当恰好占3列。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> n, k, m, a[maxn];</span><br><span class="line"><span class="comment">//逆时针走t步，步长是d（-1表示顺时针走），返回新位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> d, <span class="keyword">int</span> t)</span> </span>&#123; </span><br><span class="line"><span class="keyword">while</span>(t--) &#123;<span class="comment">//走t布</span></span><br><span class="line"><span class="keyword">do</span> &#123; </span><br><span class="line">            p = (p+d+n<span class="number">-1</span>) % n + <span class="number">1</span>; <span class="comment">//循环数组</span></span><br><span class="line">        &#125; <span class="keyword">while</span>(a[p] == <span class="number">0</span>); <span class="comment">//走到下一个非0数字，是零的说明那个人都已经走了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m) == <span class="number">3</span> &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = i;<span class="comment">//循环，初始化数组</span></span><br><span class="line">        <span class="keyword">int</span> left = n; <span class="comment">//还剩下的人数</span></span><br><span class="line">        <span class="keyword">int</span> p1 = n, p2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left) &#123;</span><br><span class="line">            p1 = go(p1, <span class="number">1</span>, k);<span class="comment">//从p1开始，逆时针遍历数组</span></span><br><span class="line">            p2 = go(p2, <span class="number">-1</span>, m);<span class="comment">//顺时针</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, p1); <span class="comment">//输出函数的返回值</span></span><br><span class="line">            left--;<span class="comment">//剩余人数-1</span></span><br><span class="line">            <span class="keyword">if</span> (p2 != p1) &#123; <span class="comment">//如果不是同一人</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, p2); <span class="comment">//再打印第二个人</span></span><br><span class="line">                left--; <span class="comment">//人数-1</span></span><br><span class="line">            &#125;</span><br><span class="line">            a[p1] = a[p2] = <span class="number">0</span>;<span class="comment">//赋为0，表示两人已离开，不参与下次循环，遇到就直接跳过</span></span><br><span class="line">            <span class="keyword">if</span> (left) <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);<span class="comment">//最后一个不打印，</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例题4-4-信息解码（Message-Decoding-ACM-ICPC-World-Finals-1991-UVa-213）"><a href="#例题4-4-信息解码（Message-Decoding-ACM-ICPC-World-Finals-1991-UVa-213）" class="headerlink" title="例题4-4　信息解码（Message Decoding, ACM/ICPC World Finals 1991, UVa 213）"></a>例题4-4　信息解码（Message Decoding, ACM/ICPC World Finals 1991, UVa 213）</h3><h2 id="C-和STL"><a href="#C-和STL" class="headerlink" title="C++和STL"></a>C++和STL</h2><h3 id="引用-与指针类似比指针弱"><a href="#引用-与指针类似比指针弱" class="headerlink" title="引用(与指针类似比指针弱)"></a>引用(与指针类似比指针弱)</h3><p>直接再参数名之前加上一个&amp;，再函数内修改参数的值，也会修改函数的实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="comment">//直接在参数名之前加一个&quot;&amp;&quot;，即可</span></span><br><span class="line">    <span class="keyword">int</span> t = a; a = b; b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">    swap2(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>C++中提供了一个string类型使处理字符数组更加简便，cin/cout可以直接读写string，还可以像整数一样相加</p><blockquote><p>输入数据的每行包含若干个（至少一个）以空格隔开的整数，输出<br>每行中所有整数之和。如果只能使用字符与字符数组，一般有两种方案：一是使用getchar( )边读边算，代码较短，但容易写错，并且相对较难理解(5)；二是每次读取一行，然后再扫描该行的字符，同时计算结果。如果使用C＋＋，代码可以很简单。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> line;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line)) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, x;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(line)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (ss &gt;&gt; x) sum += x;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string类在string头文件中，而stringstream在sstream头文件中</p><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><h2 id="一个总结"><a href="#一个总结" class="headerlink" title="一个总结"></a>一个总结</h2><ol><li>对于需要输入多组数据的题目，当第一组数据处理完之后，一定要及时初始化各种变量，因此，定义变量时，尽量把变量定义在需要用的地方的附近。</li><li>对于一些需要特定格式的题目，例如需要使用空格隔开字母，但最后一个字母后不能有空格，如果直到一共可以输出多少个，既可以做一个判断，最后一个字母后不接空格，如果不知道要输出多少个，可以把空格放在每个字母之前，对第一个进行特殊化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树（Tree）学习笔记</title>
      <link href="2020/03/09/tree/"/>
      <url>2020/03/09/tree/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（Tree）</h3><p>n个节点构成的有限集合</p><p>n = 0时，称为空树</p><a id="more"></a><h4 id="非空树有以下性质："><a href="#非空树有以下性质：" class="headerlink" title="非空树有以下性质："></a>非空树有以下性质：</h4><ul><li><p>树中有一个称为”根（Root）”的节点，用r表示</p></li><li><p>其余节点互不相交且有限，其中每个集合本身又是一棵树，称为原树的子树(SubTree)</p><p><img src="https://s2.ax1x.com/2020/03/10/8i5Bf1.png" alt="8i5Bf1.png"></p></li><li><p>子树是不相交的</p></li><li><p>除根节点外，每个节点有且仅有一个父节点</p></li></ul><p><strong>这些都不是树</strong></p><p><img src="https://s2.ax1x.com/2020/03/10/8ioDsK.png" alt="8ioDsK.png"></p><ul><li>一棵N个节点的树有N-1条边</li></ul><h4 id="树的一些基本术语"><a href="#树的一些基本术语" class="headerlink" title="树的一些基本术语"></a>树的一些基本术语</h4><ol><li>节点的度(Degree)：节点的子树个数</li><li>树的度：树的所有节点中最大的度数（上面那个树的度为3）</li><li>叶结点（Leaf）：度为零的节点，即没有子树</li><li>父结点（Parent）：有子树的节点是其子树的根节点的父节点</li><li>子结点（Child）</li><li>兄弟结点（Sibling）：具有同一父节点的各节点彼此</li><li>路径和路径长度：</li><li>祖先节点（Ancestor）：沿树根到某一结点路径上的所有结点都是这个节点的祖先结点，比如从A到L，ABG都是L的祖先结点</li><li>子孙结点（Descendant）</li><li>结点的层次（Level）：规定根结点在1层，其他任一结点的层数是其父结点层数+1，</li><li>树的深度（Depth）：树中所有结点中的最大层次就是这棵树的深度</li></ol><h4 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h4><p>为了节省空间和方便这里使用<strong>兄弟-儿子表示法</strong></p><h5 id="兄弟-儿子表示法"><a href="#兄弟-儿子表示法" class="headerlink" title="兄弟-儿子表示法"></a>兄弟-儿子表示法</h5><table><thead><tr><th>Element</th><th></th></tr></thead><tbody><tr><td>FirstChild</td><td>NextSibling</td></tr></tbody></table><p>链表的每个结点如上图</p><p>链接起来后如下图</p><p><img src="https://s2.ax1x.com/2020/03/11/8k30kn.png" alt="8k30kn.png"></p><p>这样的树被称为<strong>二叉树</strong></p><h4 id="二叉树（Binary-Tree）"><a href="#二叉树（Binary-Tree）" class="headerlink" title="二叉树（Binary Tree）"></a>二叉树（Binary Tree）</h4><h5 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h5><p>二叉树是一个有穷的结点集合</p><p>这个集合可以为空</p><p>若不为空，则它是由根节点和称为其<strong>左子树</strong>和<strong>右子树</strong>的两个<strong>不相交</strong>的二叉树组成</p><h5 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h5><ul><li>空树</li><li>只有根</li><li>只有左子树</li><li>只有右子树</li><li>左右子树都有</li></ul><p>二叉树和其他度为2的树的不同在于二叉树的子树有左右顺序之分</p><h5 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h5><ul><li>斜二叉树（Skewed Binary Tree）</li></ul><p>只有左子树或只有右子树</p><ul><li>完美二叉树（Perfect Binary Tree）/满二叉树（Full Binary Tree）</li></ul><p><img src="https://s2.ax1x.com/2020/03/11/8kadJJ.png" alt="8kadJJ.png"></p><ul><li>完全二叉树（Complete Binary Tree）</li></ul><p>有n个结点的二叉树，对树中的结点按上图所示方式编号，编号为i的结点与满二叉树中编号为i的结点在二叉树中的位置相同</p><p>将完美二叉树的叶结点，从有往左依次删除任意个数，所形成的二叉树就是完全二叉树</p><p>下图就不是一个完全二叉树</p><p><img src="https://s2.ax1x.com/2020/03/11/8kasL6.png" alt="8kasL6.png"></p><h5 id="二叉树的几个性质"><a href="#二叉树的几个性质" class="headerlink" title="二叉树的几个性质"></a>二叉树的几个性质</h5><ul><li><p>一个二叉树第i层的最大结点数为：2^(i-1) , i &gt;= 1</p></li><li><p>深度为k的二叉树有最大结点总数为：2^k - 1 ,k &gt;= 1</p><p>完美二叉树可以达到2^k - 1个结点</p></li><li><p>对于任何非空二叉树T，若n0表示叶节点的个数、n2是度为2的非叶结点个数，那么n0 = n2 + 1</p></li></ul><h5 id="二叉树的抽象数据类型定义"><a href="#二叉树的抽象数据类型定义" class="headerlink" title="二叉树的抽象数据类型定义"></a>二叉树的抽象数据类型定义</h5><h6 id="类型名称：二叉树"><a href="#类型名称：二叉树" class="headerlink" title="类型名称：二叉树"></a>类型名称：二叉树</h6><h6 id="数据对象集："><a href="#数据对象集：" class="headerlink" title="数据对象集："></a>数据对象集：</h6><p>​        一个有穷结点集合。</p><p>​        若不为空，则有根节点和其左、右二叉树组成</p><h6 id="操作集："><a href="#操作集：" class="headerlink" title="操作集："></a>操作集：</h6><ol><li>Boolean IsEmpty(BinTree BT):判断二叉树是否为空</li><li>void Traversal(BinTree BT):遍历，按某种顺序访问每个结点<ul><li>void PreOrderTraversal(BinTree BT):先序-根、左子树、右子树</li><li>void InOrderTraversal(BinTree BT):中序—左子树、根、右子树</li><li>void PostOrderTraversal(BinTree BT):后序—左子树、右子树、根</li><li>void LevelOrderTraversal(BinTree BT):层次遍历，从上到下、从左到右</li></ul></li><li>BinTree CreatBinTree():创建二叉树</li></ol><h5 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h5><h6 id="1-顺序存储结构"><a href="#1-顺序存储结构" class="headerlink" title="1. 顺序存储结构"></a>1. 顺序存储结构</h6><p><strong>完全二叉树</strong>可以方便的使用数组实现</p><p>共n个结点</p><table><thead><tr><th>结点</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr></tbody></table><ul><li>非根结点（i &gt; 1）的父结点的序号是i/2</li><li>结点（i）的左孩子结点序号是2i（2i &lt;= n，否则没有左孩子）</li><li>结点（i）的右孩子结点的序号是2i+1（2i+1 &lt;= n,否则没有右孩子）</li></ul><p><strong>一般二叉树</strong>也可以使用数组实现，但是会造成空间浪费</p><h6 id="2-链表存储"><a href="#2-链表存储" class="headerlink" title="2. 链表存储"></a>2. 链表存储</h6><p>结点的结构：|Left|Data|Right|</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">BinTree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> BinTree Position;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5><ol><li>遍历（递归）</li></ol><p>简单但是浪费空间</p><ol><li><p>先序遍历</p><p>遍历过程</p><ol><li>访问根节点</li><li>先序遍历其左子树</li><li>先序遍历其右子树</li></ol><p>看了这个图可能能更好地理解递归的过程</p></li></ol><p><img src="https://s1.ax1x.com/2020/03/12/8Z98Ug.png" alt="8Z98Ug.png"></p><p>这个图更好，注意看箭头</p><p><img src="https://s1.ax1x.com/2020/03/12/8Z9cG9.png" alt="8Z9cG9.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;Data);<span class="comment">//打印这个结点的数据</span></span><br><span class="line">        PerOrderTraversal(BT-&gt;Left);<span class="comment">//递归地遍历左子树</span></span><br><span class="line">        PerOrderTraversal(BT-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>中序遍历</p><ol><li>中序遍历其左子树</li><li>访问其根节点</li><li>中序遍历其右节点</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">        </span><br><span class="line">        InOrderTraversal(BT-&gt;Left);<span class="comment">//递归地遍历左子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;Data);<span class="comment">//打印这个结点的数据</span></span><br><span class="line">        InOrderTraversal(BT-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>后序遍历</p><ol><li>后序遍历其左节点</li><li>后序遍历其右节点</li><li>访问根节点</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">        </span><br><span class="line">        PostOrderTraversal(BT-&gt;Left);<span class="comment">//递归地遍历左子树</span></span><br><span class="line">        PostOrderTraversal(BT-&gt;Right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;Data);<span class="comment">//打印这个结点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上三种遍历过程，经过结点的路线一样，只是访问各结点的时机不同</strong></p><ol start="2"><li><p>遍历（非递归）</p><ol><li>中序遍历（第二次碰到结点就printf）</li></ol><ul><li>遇到一个结点，就把它压栈，并去遍历它的左子树</li></ul></li></ol><ul><li><p>当左子树遍历结束后，就从栈顶弹出这个结点并访问它</p><ul><li><p>然后按其右指针再去中序遍历该节点的右子树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line">    BinTree T = BT;</span><br><span class="line">    Stack S = CreatStack(MaxSize); <span class="comment">//创建并初始化堆栈</span></span><br><span class="line">    <span class="keyword">while</span>(T || !IsEmpty(S))&#123;<span class="comment">//循环结束只要满足结点为空且堆栈为空</span></span><br><span class="line">        <span class="keyword">while</span>(T)&#123; <span class="comment">//一直循环直至结点为空</span></span><br><span class="line">            Push(S,T);<span class="comment">//把结点压入堆栈</span></span><br><span class="line">        T = T-&gt;Left; <span class="comment">//指针转到下一个左边的结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!IsEmpty(S))&#123; <span class="comment">//如果堆栈不空的话就开始Pop</span></span><br><span class="line">            T = Pop(S); <span class="comment">//把栈顶元素给T，并Pop</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,T-&gt;Data); <span class="comment">//打印结点数据</span></span><br><span class="line">            T = T-&gt;Right; <span class="comment">//准到根节点的右子树</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>先序遍历（第一次碰到结点就printf）</li></ol><p> <strong>由于走过的路径相同，只需要改变访问结点的时机就可以在中序遍历的基础上实现先序遍历</strong></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line">    BinTree T = BT;</span><br><span class="line">    Stack S = CreatStack(MAxSize);</span><br><span class="line">    <span class="keyword">while</span>(T || !Empty(S))&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            Push(S,T);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,T-&gt;Data);<span class="comment">//与中序遍历的区别就在printf的位置</span></span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!IsEmpty(S))&#123;</span><br><span class="line">            T = Pop(S);</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>后序遍历（第三次碰到结点再printf）    </p></li><li><p>层序遍历</p><p><strong>二叉树遍历的核心问题：二维结构的线性化</strong></p><p>问题在于当你访问完一个结点的左儿子或右儿子之后，剩下的一个儿子怎么办？如果没有存储右儿子或者自己，那么这些结点就丢失了，所以需要一种方法保存该节点或保存他的父结点</p></li></ol></li></ul><pre><code>  **总的来说就是我们需要一个存储结构保存暂时不访问的结点**  这里使用队列解决问题  - 先把根入队  - 根出队，并且让它的两个儿子入队，左儿子现右儿子后  - 依次让队列里的结点出队，并且让他的儿子入队  - 重复，直至队列空  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    BinTree T;</span><br><span class="line">    Q = CreatQueue(MaxSize); <span class="comment">//创建并初始化队列</span></span><br><span class="line">    Add(Q,BT); <span class="comment">//让根入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123; <span class="comment">//队列不空就一直循环</span></span><br><span class="line">        T = Delete(Q); <span class="comment">//队首的出队，并记录队首的地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,T-&gt;Data);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left) Add(Q,T-&gt;Left); <span class="comment">//左儿子入队</span></span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Right) Add(Q,T-&gt;Right); <span class="comment">//右儿子入队</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h6 id="二叉树遍历的应用"><a href="#二叉树遍历的应用" class="headerlink" title="二叉树遍历的应用"></a>二叉树遍历的应用</h6><h5 id="二叉树的同构"><a href="#二叉树的同构" class="headerlink" title="二叉树的同构"></a>二叉树的同构</h5><p>一个二叉树可以通过n次左右树交换就能变得和另一个一样，就称俩数同构 </p><h4 id="二叉搜索树（Binary-Search-Tree）"><a href="#二叉搜索树（Binary-Search-Tree）" class="headerlink" title="二叉搜索树（Binary Search Tree）"></a>二叉搜索树（Binary Search Tree）</h4><p>满足：</p><ol><li>非空左子树的所有键值小于其根节点的键值</li><li>右子树大于根节点</li><li>左右子树都是搜索二叉树</li></ol><p><img src="https://s1.ax1x.com/2020/04/08/GR6Tpt.png" alt="GR6Tpt.png"></p><h5 id="操作集"><a href="#操作集" class="headerlink" title="操作集"></a>操作集</h5><p>Position Find(ElementType X,BinTree BST):查找X，返回结点的地址</p><p>Position FindMin(BinTree BST)：返回最小元素结点并返回</p><p>Position FindMax(BinTree BST)：最大</p><p>BinTree Insert(ElementType X,BinTree BST)：插入X</p><p>BinTree Delete(ElementType X,BinTree BST)：删除X</p><p>Find()思路：</p><ol><li>从根节点开始，如果树为空返回NULL</li><li>非空就和X进行比较<ol><li>若小于根就在左子树继续查找</li><li>大于则就在右子树里查找</li><li>相等就返回指针</li></ol></li></ol><p>递归实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span> <span class="params">(ElementType X,BinTree BST)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//若数为空就返回NULL</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; BST-&gt;Data)</span><br><span class="line">        <span class="keyword">return</span> Find(X,BST-&gt;Right); <span class="comment">//递归地调用Find，进入右子树继续查找</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">        <span class="keyword">return</span> Find(X,BST-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> BST;<span class="comment">//相等时返回该节点的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">IterFind</span><span class="params">(ElementType X,BinTree BST)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(BST)&#123;</span><br><span class="line">        <span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">            BST = BST-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">            BST = BST-&gt;Left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> BST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FindMin()&amp;FindMax()</p><p>递归实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//空就返回NULL</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!BST-&gt;Left)<span class="comment">//如果左子树为空，说明到最小回</span></span><br><span class="line">        <span class="keyword">return</span> BST;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(BST-&gt;Left);<span class="comment">//不为空，就进入左子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BST)<span class="comment">//找到空为止</span></span><br><span class="line">        <span class="keyword">while</span>(BST-&gt;Right) BST = BST-&gt;Right;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Insert()</p><p><strong>关键是找到插入的位置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(ElementType X,BinTree BST)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BST)&#123;<span class="comment">//若原树为空，则生成并返回一个结点</span></span><br><span class="line">        BST = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">        BST-&gt;Data = x;</span><br><span class="line">        BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; BST-&gt;Data)</span><br><span class="line">            BST-&gt;Left = Insert(X,BST-&gt;Left);<span class="comment">//递归，找出正确位置，赋值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">            BST-&gt;Right = Insert(X,BST-&gt;Right);</span><br><span class="line">        <span class="comment">//else 若X已经存在，那什么都不用做</span></span><br><span class="line">        <span class="keyword">return</span> BST;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Delete()</p><p>有三种情况</p><ol><li>叶结点，直接让他的父结点指向NULL</li><li>只有一个孩子，直接用它的儿子替代它‘</li><li>有两个孩子，</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(ElementType X,BinTree BST)</span></span>&#123;</span><br><span class="line">    Position Tmp;</span><br><span class="line">    <span class="keyword">if</span>(!BST) <span class="built_in">printf</span>(<span class="string">&quot;要删除的元素未找到&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; BST-&gt;Data)</span><br><span class="line">        BST-&gt;Left = Delete(X,BST-&gt;Left);<span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data)</span><br><span class="line">        BST-&gt;Right = Delete(X,BST-&gt;Right);<span class="comment">//这两个else if都是查找的过程</span></span><br><span class="line">    <span class="keyword">else</span><span class="comment">//找到后</span></span><br><span class="line">        <span class="keyword">if</span>(BST-&gt;Left &amp;&amp; BST-&gt;Right)&#123;<span class="comment">//判断结点的类型</span></span><br><span class="line">            Tmp = FindMin(BST-&gt;Right);<span class="comment">//找到右子树中最小的结点</span></span><br><span class="line">            BST-&gt;Data = Tmp-&gt;Data;<span class="comment">//用找到的那个结点替换要删除的结点</span></span><br><span class="line">            BST-&gt;Right=Delete(BST-&gt;Data,BST-&gt;Right);<span class="comment">//删除那个用于替换原结点的结点,不理解为什么，有赋值这个操作 </span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">            Tmp = BST;</span><br><span class="line">            <span class="keyword">if</span>(!BST-&gt;Left)</span><br><span class="line">                BST = BST-&gt;Right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!BST-&gt;Right)</span><br><span class="line">                BST = BST-&gt;Left;</span><br><span class="line">            <span class="built_in">free</span>(Tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>查找效率高</p><p><strong>平衡因子（Blance Factor，BF）</strong>：BF(T) = hL-hR</p><p>hL,hR分别为T的左右子树的高度</p><p><strong>平衡二叉树(Blance Binary Tree)(AVL树)</strong></p><ol><li>空树</li><li>任意结点左右子树高度差的绝对值不超过1</li></ol><h5 id="平衡二叉树的调整"><a href="#平衡二叉树的调整" class="headerlink" title="平衡二叉树的调整"></a>平衡二叉树的调整</h5><p>给树插入结点时，有可能会破坏树的平衡，因此需要调整</p><p>平衡二叉树还是一个搜索二叉树，因此在调整过程中，依然要保持搜索二叉树的特性</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>优先队列(Priority Queue):特殊的队列，取出元素的顺序按照元素的优先权（关键字）大小</p><p><strong>两个特性：</strong></p><ol><li>结构性：用数组表示的完全二叉树</li><li>有序性：任意结点的关键字是其子树所有结点的最大值或最小值<ul><li>最大堆（MaxHeap）也称大顶堆</li><li>最小堆（MinHeap）也称小顶堆</li></ul></li></ol><h5 id="操作集-1"><a href="#操作集-1" class="headerlink" title="操作集"></a>操作集</h5><p>MaxHeap Create(int MaxSize)</p><p>Boolean IsFull(MaxHeap H)</p><p>Inser(MaxHeap H,ElementType item)</p><p>Boolean IsEmpty(MaxHeap H)</p><p>ElementType DeleteMax(MaxHeap H)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeapStruct</span> *<span class="title">MaxHeap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeapStruct</span>&#123;</span></span><br><span class="line">    ElementType *ElementType;<span class="comment">//储存堆元素的数组</span></span><br><span class="line">    <span class="keyword">int</span> Size;<span class="comment">//堆当前元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> Capacity;<span class="comment">//堆的最大容量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MaxHeap <span class="title">Create</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span>&#123;</span><br><span class="line">    MaxHeap H = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct HeapStruct));<span class="comment">//申请一块空间给H</span></span><br><span class="line">    H-&gt;Elements = <span class="built_in">malloc</span>((MaxSize+<span class="number">1</span>)*<span class="keyword">sizeof</span>(ElementType));<span class="comment">//申请一块数组空间</span></span><br><span class="line">    H-&gt;Size = <span class="number">0</span>;<span class="comment">//初始为零，当前元素个数</span></span><br><span class="line">    H-&gt;Capacity = MaxSize;<span class="comment">//初始为MaxSize，堆的最大容量</span></span><br><span class="line">    H-&gt;Element[<span class="number">0</span>] = MaxDate;<span class="comment">//哨兵，方便以后访问</span></span><br><span class="line">    <span class="keyword">return</span> H; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(MaxHeap H,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(H))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = ++H-&gt;Size;<span class="comment">//i指向插入后堆中的最后一个元素,插入后Size++</span></span><br><span class="line">    <span class="keyword">for</span>(;H&gt;Elements[i/<span class="number">2</span>] &lt; item;i/=<span class="number">2</span>)<span class="comment">//插入时结点放在最后，然后依次与他的父结点进行比较，直到父结点大于他为止</span></span><br><span class="line">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class="number">2</span>];<span class="comment">//大于就和父结点互换位置</span></span><br><span class="line">    H-&gt;Elements[i] = item;</span><br><span class="line">    <span class="comment">//完全二叉树中，一个结点的序号/2就是它父结点的序号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/G4l1bV"><img src="https://s1.ax1x.com/2020/04/09/G4l1bV.png" alt="G4l1bV.png"></a></p><p>哨兵的一个作用就是，哨兵的值是堆中最大的，无论多大的结点来比较，到哨兵这里就会停止，可以减少一个判断条件i&gt;1，提高效率</p><p><strong>基本思路：删除根之后，把树的最后一个节点（保证完全二叉树的特性）挪到根的位置，然后进行调整排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">DeleteMax</span><span class="params">(MaxHeap H)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Parent,Child;</span><br><span class="line">    ElementType MaxItem,temp;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(H))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MaxItem = H-&gt;Elements[<span class="number">1</span>];<span class="comment">//把要删除的结点存起来，一会儿返回出去</span></span><br><span class="line">    temp = H-&gt;Element[H-&gt;Size--];<span class="comment">//把最后一个结点存起来，然后Size--</span></span><br><span class="line">    <span class="keyword">for</span>(Parent = <span class="number">1</span>;Parent*<span class="number">2</span>&lt;=H-&gt;Size;Parent=Child)&#123;<span class="comment">//从根节点开始循环，每次循环完后进入下一层的左节点，如果Parent*2&lt;=H-&gt;Size说明，下一层没有节点了</span></span><br><span class="line">        Child = Parent*<span class="number">2</span>;<span class="comment">//进入下一层的左节点</span></span><br><span class="line">        <span class="keyword">if</span>((Child!=H-&gt;Size)&amp;&amp;(H-&gt;Element[Child]&lt;H-&gt;Elements[Chile+<span class="number">1</span>]))<span class="comment">//Child!=H-&gt;Size保证进入这个判断的结点都有两个儿子，(H-&gt;Element[Child]&lt;H-&gt;Elements[Chile+1])默认左节点大于右节点，如果小于就Child++</span></span><br><span class="line">            Child++;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt;= H-&gt;Element[Child]) <span class="keyword">break</span>;<span class="comment">//如果temp大于这个节点的最大子节点那么说明位置正确</span></span><br><span class="line">        <span class="keyword">else</span> H-&gt;ElementS[Parent] = H-&gt;Elements[Child];<span class="comment">//交换两节点位置</span></span><br><span class="line">    &#125; </span><br><span class="line">    H-&gt;Element[Parent] = temp;</span><br><span class="line">    <span class="keyword">return</span> MaxItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建立最大堆</strong></p><p>方法：</p><ol><li><p>通过Insert操作，将元素一个一个插进去（O(NlogN)）</p></li><li><p>在线性时间复杂度下建立最大堆</p><ol><li>将N个元素按顺序存入，先满足完全二叉树的特性</li><li>调整各节点位置，以满足有序特性</li></ol><p><strong>如何调整</strong></p></li></ol><h4 id="哈夫曼树（最优二叉树）（Huffman-Tree）"><a href="#哈夫曼树（最优二叉树）（Huffman-Tree）" class="headerlink" title="哈夫曼树（最优二叉树）（Huffman Tree）"></a>哈夫曼树（最优二叉树）（Huffman Tree）</h4><p><strong>带权路径长度（WPL）：</strong>设二叉树有n个叶结点，每个叶结点带有权值Wk，从根节点到每个叶结点的长度为Lk，WPL=每条路径长度乘权值的和</p><p>哈夫曼树：WPL最小</p><h5 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h5><p>思路:把所有元素按权值排列，然后拿出两个权值最小的合并成一个二叉树，然后再找两个最小的合并，直到合并完</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">HuffmanTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Weight;</span><br><span class="line">    HuffmanTree Left,Right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">HuffmanTree <span class="title">Huffman</span><span class="params">(MinHeap H)</span></span>&#123;<span class="comment">//假设H-&gt;Size的权值已经存在H-&gt;Element[]-&gt;Weight里</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    HuffmanTree T;</span><br><span class="line">    BulidMinHeap(H); <span class="comment">//将H-》ElementS[]按权值调整为最小堆</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;H-&gt;Size;i++)&#123;</span><br><span class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));<span class="comment">//建一个新结点，存放新组成的树</span></span><br><span class="line">        T-&gt;Left = DeleteMin(H);</span><br><span class="line">        T-&gt;Right = DeleteMin(H);<span class="comment">//从堆里拿出俩元素，进行组合</span></span><br><span class="line">        T-&gt;Weight = T-&gt;Left-&gt;Weight+T-&gt;Right-&gt;Weight;</span><br><span class="line">        Insert(H,T);<span class="comment">//把组合后的树插入最小堆</span></span><br><span class="line">    &#125;</span><br><span class="line">    T = DeleteMin(H);</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>没有度为1的结点</li><li>n个叶结点的哈夫曼树共有2n-1个结点</li><li>任意非叶结点的左右子树交换后仍是哈夫曼树</li><li>同一组权值存在不同构的两颗哈夫曼树</li></ul><h5 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h5><p>为了将字符的存储空间降到最小还要避免二义性，就可以使用哈夫曼编码（编码不等长）</p><p>方法：</p><ol><li>将每个字符出现的次数作为权值</li><li>创建一个哈夫曼树，保证每个字符都在叶结点上就不会出现二义性</li></ol><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>并查集：集合并，查某元素属于那个集合</p><p>存储实现：用树结构（并非二叉树），树的每个结点代表一个元素</p><ol><li><p>用是链表实现</p></li><li><p>数组：</p><ul><li>数组的每个分量都是一共结构，包含结点的值和父结点的下标，没有父结点则记为-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    <span class="keyword">int</span> Parent;</span><br><span class="line">&#125;SetType;</span><br></pre></td></tr></table></figure><ul><li>查</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(SetType s[],ElementType X)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; MaxSize &amp;&amp; S[i].Data != X;i++);<span class="comment">//循环查找X，找到后退出时i的值就是该节点的下标或没找到</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt;= MaxSize) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//判断属于以上那种情况</span></span><br><span class="line">    <span class="keyword">for</span>(;s[i].Parent &gt;= <span class="number">0</span>;i = s[i].Parent);<span class="comment">//查找这个结点的根结点，退出时就是i是根节点的下标</span></span><br><span class="line">    <span class="keyword">return</span> i ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>并<ul><li>分别找到两个集合的根节点</li><li>若不同根就设置一个集合的根节点的父结点为另一个集合的根节点</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(SetType s[],ElementType X1,ElementType X2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Root1,Root2;</span><br><span class="line">    Root1 = Find(S,X1);</span><br><span class="line">    Root2 = FInd(S,X2);</span><br><span class="line">    <span class="keyword">if</span>(Root1 != Root2) s[Root2].Parent = Root1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果总是这样插的话可能会导致树越来越高，所以考虑将结点少的插到结点多的树底下</p><p>这使就需要考虑如何存储一个树的结点个数，如果在结构中再创建一个变量的话，由于只有根节点需要存储数据，会造成空间浪费，所以考虑继续使用本来的数组存储，可以使用原来标记结点为根节点的空间来存储，有x个结点就在数组中存为-x，到时候只需要判断正负就可以。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列（Queue）学习笔记</title>
      <link href="2020/03/09/queue/"/>
      <url>2020/03/09/queue/</url>
      
        <content type="html"><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>只能在一段插入另一端删除</p><p>数据对象集：一个有0个或者多个元素的有穷线性表</p><a id="more"></a><p>操作集：</p><p>Queue Create(int MaxSize)</p><p>int IsFull(Queue Q,int Maxsize)</p><p>void Add(Queue Q,ElementType item)</p><p>int IsEmpty(Queue Q)</p><p>ElementType Delete(Queue Q)</p><h4 id="队列的顺序存储实现"><a href="#队列的顺序存储实现" class="headerlink" title="队列的顺序存储实现"></a>队列的顺序存储实现</h4><p>为了使空间得到充分的使用<strong>循环队列（当数组满了之后，又从头开始）</strong></p><ul><li>如何实现？</li></ul><p>由一个一维数组和一个记录队列头元素位置的变量<strong>front</strong>和一个记录队列尾元素位置的变量<strong>rear</strong></p><p>插入元素时rear前移一位，删除元素时front前移一位</p><ul><li>如何判断队列是空还是满？</li></ul><p>用front和rear之间的距离来判断，当front和rear相差1时，队列满</p><p>为什么不是front和rear相等时未满？</p><p>相等时由两种状态，有可能为空也有可能满。</p><p>当然这个问题可以引入一个标记来解决：</p><ol><li>引入Size</li></ol><p>每次Add时+1，Delete时-1，当Size为0是队列为空</p><ol start="2"><li>引入Tag</li></ol><p>Add时Tag = 1，Delete时Tag = 0，当front和rear相等时判断Tag的值即可</p><br><p><strong>这里当rear与front相差1时就判断队列满</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 元素最大数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    ElementType Data[NaxSize];</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br></pre></td></tr></table></figure><p>1.Add</p><p><strong>难点在于如何当rear到MaxSize时再+1就又返回起点</strong></p><p><strong>这里使用取余，当rear到达最大值时取MaxSize的余，就得到0</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(Queue Q,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(Q))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列满&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Q-&gt;rear = (Q-&gt;rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">        Q-&gt;Data[Q-&gt;rear] = item; <span class="comment">//把item放到数组里</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Delete</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Delete</span><span class="params">(Queue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>)；</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        <span class="keyword">return</span> Q-&gt;Data[Q-&gt;front];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列的链式存储实现"><a href="#队列的链式存储实现" class="headerlink" title="队列的链式存储实现"></a>队列的链式存储实现</h4><p>使用一个<strong>单链表</strong>实现，插入和删除分别在两头进行，**问题在于front和rear应该分别指向链表的哪一头 **</p><p>rear需要插入数据需要放在链表的尾部，插入时只需要前一个节点的地址，front要在链表的头部的的下一个节点，方法与堆栈类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Next</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">rear</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">front</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line">Queue PtrQ;</span><br></pre></td></tr></table></figure><ol><li>Delete</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Delete</span><span class="params">(Queue PtrQ)</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">FrontCell</span>;</span></span><br><span class="line">    ElementType FrontElem;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(PtrQ-&gt;front == <span class="literal">NULL</span>)&#123;<span class="comment">//若头节点之后没有节点则队列时空的</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    FrontCell = PtrQ-&gt;front;<span class="comment">//储存第二个节点</span></span><br><span class="line">    <span class="keyword">if</span>(PtrQ-&gt;front == PtrQ-&gt;rear) <span class="comment">//若队列只有一个元素</span></span><br><span class="line">        PtrQ-&gt;front = PtrQ-&gt;rear = <span class="literal">NULL</span>; <span class="comment">//则删除完后队列置空</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        PrtQ-&gt;front = ptrQ-&gt;rear-&gt;Next;<span class="comment">//</span></span><br><span class="line">    FrontElem = Front-&gt;Data;</span><br><span class="line">    <span class="built_in">free</span>(FrontCell);</span><br><span class="line">    <span class="keyword">return</span> FrontElem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Add</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(Queue PtrQ,ElementType item)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">TempCell</span>;</span><span class="comment">//创建新节点</span></span><br><span class="line">    TempCell = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));<span class="comment">//申请空间</span></span><br><span class="line">    TempCell-&gt;Data = item;</span><br><span class="line">    PtrQ-&gt;rear-&gt;Next = TempCell;<span class="comment">//将链表与新节点链接起来</span></span><br><span class="line">PtrQ-&gt;rear = TempCell;<span class="comment">//移动rear </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-堆栈（Stack）学习笔记</title>
      <link href="2020/03/06/stack/"/>
      <url>2020/03/06/stack/</url>
      
        <content type="html"><![CDATA[<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>数据对象集：一个有0个或多个元素的有穷线性表</p><p>操作集：</p><ol><li>Stack CreateStack(int MaxSize)</li><li>bool IsFull(Stacak S,int MaxSize)</li><li>void Push(Stack S,ElementType item)</li><li>bool IsEmpty(Stack S)</li><li>ElementType Pop(Stack S)</li></ol><br><a id="more"></a><h4 id="堆栈的顺序存储实现"><a href="#堆栈的顺序存储实现" class="headerlink" title="堆栈的顺序存储实现"></a>堆栈的顺序存储实现</h4><p>通常由一个<strong>一维数组</strong>和一个<strong>记录栈顶元素位置的变量</strong>组组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 元素最大个数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">    ElementType *Data;</span><br><span class="line">    <span class="keyword">int</span> Top;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>创建</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span>&#123;</span><br><span class="line">Stack S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));<span class="comment">//申请一块空间，存放Stack这个结构</span></span><br><span class="line">    S-&gt;Data = (ElementType *)<span class="built_in">malloc</span>(MaxSize * <span class="keyword">sizeof</span>(ElementType))<span class="comment">//申请一块空间存放MaxSize个ElementType</span></span><br><span class="line">    S-&gt;Top = <span class="number">-1</span>;<span class="comment">//初始状态栈顶为-1</span></span><br><span class="line">    S-&gt;MaxSize = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>栈是否满了</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Stack S,<span class="keyword">int</span> MaxSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Top == S-&gt;MaxSize - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.栈是否为空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Push</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack S,ElemenType item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S) == <span class="literal">true</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈满&quot;</span>)；</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        S-&gt;Data[++(S-&gt;Top)] = item; <span class="comment">//Top先加一，在进行运算</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>++a是先自加再进行运算，a++是先运算再自加</strong></p><ol start="5"><li>Pop</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">( Stack S )</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( IsEmpty(S) )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s-&gt;Data[(S-&gt;Top)--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="用一个数组实现两个堆栈"><a href="#用一个数组实现两个堆栈" class="headerlink" title="用一个数组实现两个堆栈"></a>用一个数组实现两个堆栈</h4><p>思路：两个堆栈分别从数组头和尾开始，向中间，当两个顶指针相遇时，表示两个堆栈都满了</p><p>​            —–&gt;    &lt;——-</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 元素最大个数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DStack</span> *<span class="title">PtrS</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DStack</span>&#123;</span></span><br><span class="line">    ElementType *Data;</span><br><span class="line">    <span class="keyword">int</span> Top1;</span><br><span class="line">    <span class="keyword">int</span> Top2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    S.Top1 = -1    说明栈1空</p><p>​    S.Top2 = MaxSize    说明栈2空</p><ol><li>Push</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(PtrS S,ElementType item,<span class="keyword">int</span> Tag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Top2 - S-&gt;Top1 == <span class="number">1</span>)&#123;<span class="comment">//两栈相遇时Top相差1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;堆栈满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Tag == <span class="number">1</span>)</span><br><span class="line">        S-&gt;Data[++(S-&gt;Top1)] = item;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;Data[--(S-&gt;Top2)] = item;<span class="comment">//注意因为堆栈2是倒着来的，所以是--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Pop</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(PtrS S,<span class="keyword">int</span> Tag)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tag == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;Top1 == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;堆栈1空&quot;</span>)；</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> S-&gt;Data[(S-&gt;Top1)--];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;Top2 == MaxSize)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;堆栈1空&quot;</span>)；</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> S-&gt;Data[(S-&gt;Top2)++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆栈的链式存储实现"><a href="#堆栈的链式存储实现" class="headerlink" title="堆栈的链式存储实现"></a>堆栈的链式存储实现</h4><p>实际上是单向链表，叫链栈。插入和删除操作只能再链栈的栈顶进行，<strong>栈顶指针应该在链表的表头后其他节点之前</strong>，否则无法进行删除操作，因为前一个节点无法保存上一个节点的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Next</span>;</span> <span class="comment">//记录下一个节点的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>Create</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span>&#123;<span class="comment">//构建指针头节点</span></span><br><span class="line">    Stack S;</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">    S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.IsEmpty</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Next == <span class="literal">NULL</span>); <span class="comment">//若头节点的Next为NULL则堆栈为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Push</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(ElementType item,Stack S)</span></span>&#123;</span><br><span class="line">    Stack TempCell;</span><br><span class="line">    TempCell = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Struct SNode));</span><br><span class="line">    TempCell-&gt;Data = item;</span><br><span class="line">    TempCell-&gt;Next = S-&gt;Next;</span><br><span class="line">    S-&gt;Next = TempCell; <span class="comment">//插到头节点之后其他节点之前</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Pop </p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;堆栈空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Stack TopCell;<span class="comment">//为了找到第三个节点和释放空间而声明的</span></span><br><span class="line">        ElemtType TopElem;</span><br><span class="line">    TopCell = S-&gt;Next;<span class="comment">//把第二个节点的地址给TopCell</span></span><br><span class="line">    S-&gt;Next = TopCell-&gt;Next;<span class="comment">//把第三个节点给S的Next，就跳过了第二个节点即删除了第二个节点</span></span><br><span class="line">TopElem = TopCell-&gt;Element;        </span><br><span class="line">        <span class="built_in">free</span>(TopCell);</span><br><span class="line">        <span class="keyword">return</span> TopElem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆栈的应用"><a href="#堆栈的应用" class="headerlink" title="堆栈的应用"></a>堆栈的应用</h4><ul><li>中缀表达式转后缀表达式</li><li>函数调用及递归实现</li><li>深度优先搜索</li><li>回溯算法</li><li>…….</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="2020/03/03/linerlist/"/>
      <url>2020/03/03/linerlist/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表"></a>什么是线性表</h3><p>线性表（Linear List）由<strong>同类型</strong>数据元素构成<strong>有序序列</strong>的线性结构</p><ul><li><p>表中元素个数称为线性表的<strong>长度</strong></p></li><li><p>线性表没有元素时，称为<strong>空表</strong></p></li><li><p>表起始位置称为<strong>表头</strong>，结束位置称为<strong>表尾</strong></p><a id="more"></a></li></ul><p>数据对象集：n个元素构成的有序序列  </p><h3 id="操作集"><a href="#操作集" class="headerlink" title="操作集"></a>操作集</h3><p><strong>L表示一个线性表，整数i表示位置，元素X属于ElementType</strong></p><p><strong>ElementType表示一种数据类型，可以是整形也可以是实型，也可以是结构</strong></p><br><p>List MakeEmpty():初始化一个空线性表</p><p>ElementType Findkth(int k,LIst L):返回位序K的元素</p><p>int Find(ElementType X,List L):查找X在L内第一次出现的位置</p><p>void insert(ElementType X,int i,List L):给L在位序i前插入一个元素X</p><p>void Delete(int i,List L):删除L内位序为i的元素</p><p>int Lenth(List L):返回L的长度</p><h4 id="线性表的顺序存储实现"><a href="#线性表的顺序存储实现" class="headerlink" title="线性表的顺序存储实现"></a>线性表的顺序存储实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>//<span class="title">List</span>存放该结构的地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义一个名为LNode的结构</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> Last;<span class="comment">//线性表最后一位的位序</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">L</span>;</span> <span class="comment">//声明一个结构体</span></span><br><span class="line">List PtrL; <span class="comment">//声明该结构体的指针</span></span><br></pre></td></tr></table></figure><p>访问 下标为i的元素：L.Data[i]或PtrL-&gt;Data[i]</p><p>线性表的长度：L.Last+1或PtrL-&gt;Last+1    因为Last从0开始，所以长度为Last+1</p><p><strong>“-&gt;”表示取出PtrL指向的结构体中的某个数据，与”.”类似，当声明一个指针变量时想要取出该结构体中的数据就需要”-&gt;”,而声明一个普通的变量是使用”.”即可</strong></p><h4 id="主要操作实现"><a href="#主要操作实现" class="headerlink" title="主要操作实现"></a>主要操作实现</h4><ol><li><p>初始化（建立空顺序表）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List Ptrl; <span class="comment">//声明该结构体的指针</span></span><br><span class="line">    PtrL = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (struct LNode));</span><br><span class="line">    Ptrl-&gt;Last = <span class="number">-1</span>;<span class="comment">//当表内没有数据时Last为-1</span></span><br><span class="line">    <span class="keyword">return</span> Ptrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找  O(n)</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(ElementType X,List PtrL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= PtrL-&gt;Last &amp;&amp; PtrL-&gt;Data[i]!= x)&#123;<span class="comment">//循环结束有两个原因一个是i&gt;last说明，找完了还没有，另一个是Data[i] = X说明找到了</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; PtrL-&gt;Last)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>插入（第i（1&lt;=i&lt;=n+1）个位置上插入一个值位X的新元素）</li></ol><p>在第i个位置插入实际上就是插在下标位i-1的位置，首先把原来的数据从i-1开始依次向后移（从后往前），然后把数据插到i-1，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List PtrL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(PtrL-&gt;Last == MAXSIZE<span class="number">-1</span>)&#123; <span class="comment">//判断表的最后一位是否已经到达MAXSIZE，-1是因为表的下标从0开始</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;表满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; PtrL-&gt;Last+<span class="number">2</span>)&#123; <span class="comment">//或者可以写成（i-1 &lt; 0 || i-1 &gt; PtrL-&gt;Last+1）+1确保还有剩余位置</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = PtrL-&gt;Last;j &gt;= i<span class="number">-1</span>;j++)&#123; <span class="comment">//从最后一位开始，循环到i-1这个位置（O(n)）</span></span><br><span class="line">        Ptrl-&gt;Data[j+<span class="number">1</span>] = Ptrl-&gt;Data[j];<span class="comment">//每个数据往后移动一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    PtrL-&gt;Data[i<span class="number">-1</span>] = X;<span class="comment">//令原本下标为i-1的位置为X</span></span><br><span class="line">    PtrL-&gt;Last++;<span class="comment">//表长+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除（第i个位置）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List PtrL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || PtrL-&gt;Last+<span class="number">1</span>)&#123; <span class="comment">//此处为删除因此不需要保存余量，只需小于Last+1即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = i;j &lt;= PtrL-&gt;Last;j++)&#123;<span class="comment">//从i+1开始到结束的值都向前移动一位</span></span><br><span class="line">        PtrL-&gt;Data[j<span class="number">-1</span>] = PtrL-&gt;Data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    PtrL-&gt;Last--;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性表链式存储实现"><a href="#线性表链式存储实现" class="headerlink" title="线性表链式存储实现"></a>线性表链式存储实现</h4><p>在链表内插入只需要修改链，但是查找第i个元素和查看链表长度就比较复杂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElementType Data;<span class="comment">//存储数据</span></span><br><span class="line">    List Next;<span class="comment">//下一个链表的头。</span></span><br><span class="line">&#125;;</span><br><span class="line">Struct LNode L;</span><br><span class="line">List PrtL;</span><br></pre></td></tr></table></figure><ol><li>求表长</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(List PtrL)</span></span>&#123;</span><br><span class="line">    List p = PtrL; <span class="comment">//p指向表的第一个节点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;<span class="comment">//若返回NULL即到最后一位，则循停止</span></span><br><span class="line">        p = p-&gt;Next; <span class="comment">//指向下一个节点</span></span><br><span class="line">        j++;<span class="comment">//计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>查找</p><ol><li><p>按序号查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">FindKth</span><span class="params">(<span class="keyword">int</span> K,List PtrL)</span></span>&#123;</span><br><span class="line">    List p = PtrL;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//表头为一</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; i &lt; K)&#123;<span class="comment">//第一个条件是表不能到结尾，第二个是刚好遍历到K就停止</span></span><br><span class="line">        p = p-&gt;Next;<span class="comment">//转到下一节点</span></span><br><span class="line">        i++;<span class="comment">//计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == K) <span class="comment">//等于说明找到了</span></span><br><span class="line">        <span class="keyword">return</span> p;<span class="comment">//返回该节点的指针</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按值查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Find</span><span class="params">(ElementType X,List PtrL)</span></span>&#123;</span><br><span class="line">    List p = Prtl;</span><br><span class="line">    <span class="keyword">while</span>(X != P-&gt;Data &amp;&amp; p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;Data == X)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>插入（在i-1（1&lt;=i&lt;=n+1）个节点后插入一个值为X的新节点）<strong>之所以插入到i-1之后是因为，想给链表插入节点，需要知道前面一个节点的信息</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">insert</span><span class="params">(ElementType X,<span class="keyword">int</span> i,List PtrL)</span></span>&#123;<span class="comment">//List PtrL 传入的是表头的指针</span></span><br><span class="line">    List p,s;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//1在表头位置需要特殊处理</span></span><br><span class="line">        s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));<span class="comment">//申请一块空间</span></span><br><span class="line">        s-&gt;Data = X;</span><br><span class="line">        s-&gt;Next = PtrL;<span class="comment">//将这下个节点的Next赋给此节点的Next</span></span><br><span class="line">        <span class="keyword">return</span> s;<span class="comment">//返回表头</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = FindKth(i<span class="number">-1</span>,PtrL);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">        s-&gt;Data = X;</span><br><span class="line">        s-&gt;Next = p-&gt;Next;<span class="comment">//把i-1的链接给要插入的节点</span></span><br><span class="line">        p-&gt;Next = s;<span class="comment">//把要插入的节点的链接给i-1</span></span><br><span class="line">        <span class="keyword">return</span> PtrL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,List PtrL)</span></span>&#123;</span><br><span class="line">List p,s;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//1特殊化</span></span><br><span class="line">        s = PtrL;</span><br><span class="line">        <span class="keyword">if</span>(PtrL!=<span class="literal">NULL</span>) <span class="comment">//查看这个表是否无节点</span></span><br><span class="line">            PtrL = PtrL-&gt;Next; <span class="comment">//是表头变为下一个节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(s); <span class="comment">//释放被删除的节点</span></span><br><span class="line">        <span class="keyword">return</span> PtrL;</span><br><span class="line">    &#125;</span><br><span class="line">    p = FindKth(i<span class="number">-1</span>,List PtrL); <span class="comment">//查找第i-1个节点</span></span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123; <span class="comment">//判断输入的i是否在范围内</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个节点不存在&quot;</span>，i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;Next == <span class="literal">NULL</span>)&#123;  <span class="comment">//判断输入的节点是否是表的结尾</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个节点不存在&quot;</span>，i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s = p-&gt;Next;</span><br><span class="line">        p-&gt;Next = s-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">        <span class="keyword">return</span> PtrL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>malloc()函数的用法/动态内存分配</title>
      <link href="2020/03/03/malloc/"/>
      <url>2020/03/03/malloc/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机内存"><a href="#计算机内存" class="headerlink" title="计算机内存"></a>计算机内存</h3><p>计算机的内存从高位到低位分别是<strong>系统内核-栈-可自由分配的空间-堆-数据段-代码段</strong></p><p>源代码编译后的二进制文件会加载到内存中的<strong>代码段</strong></p><p>数据段包含了在程序中明确被<strong>初始化的全局变量、静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）</strong>。</p><a id="more"></a><blockquote><ul><li>栈存储区：</li></ul><p><strong>通常存放程序临时创建的局部变量（但不包括static声明的变量，static意味着在数据段中存放变量）</strong>，即函数括大括号 “{ }” 中定义的变量，其中还包括函数调用时其形参，调用后的返回值等。</p><p>最后栈还具有“小内存、自动化、可能会溢出”的特点。栈顶的地址和栈的最大容量一般是系统预先规定好的，通常不会太大。由于栈中主要存放的是局部变量，而局部变量的占用的内存空间是其所在的代码段或函数段结束时由系统回收重新利用，所以栈的空间是循环利用自动管理的，一般不需要人为操作。如果某次局部变量申请的空间超过栈的剩余空间时就有可能出现 “栈的溢出”，进而导致意想不到的后果。<strong>所以一般不宜在栈中申请过大的空间，比如长度很大的数组、递归调用重复次数很多的函数等等</strong>。</p><ul><li>堆存储区：</li></ul><p><strong>通常存放程序运行中动态分配的存储空间。</strong>它的大小，并不固定，可动态扩张或缩放。当进程调用malloc/free等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）/释放的内存从堆中被提出（堆被缩减）。</p><p>(堆是低地址向高地址扩展的数据结构，是一块不连续的内存区域。<strong>在标准C语言上，使用malloc等内存分配函数是从堆中分配内存的</strong></p><p>堆具有“大内存、手工分配管理、申请大小随意、可能会泄露”的特点，堆内存是操作系统划分给堆管理器来管理的，管理器向使用者（用户进程）提供API（malloc和free等）来使用堆内存。需要程序员手动分配释放，如果程序员在使用完申请后的堆内存却没有及时把它释放掉，那么这块内存就丢失了（进程自身认为该内存没被使用，但是在堆内存记录中该内存仍然属于这个进程，所以当需要分配空间时又会重新去申请新的内存而不是重复利用这块内存），就是我们常说的内存泄漏，所以内存泄漏指的是堆内存被泄露了。</p></blockquote><br><h3 id="malloc-用法"><a href="#malloc-用法" class="headerlink" title="malloc()用法"></a>malloc()用法</h3><h4 id="malloc-函数的原型"><a href="#malloc-函数的原型" class="headerlink" title="malloc()函数的原型"></a>malloc()函数的原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> size)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>size应该为整型</p><p>分配一个size这么大的内存，返回一个指向这片内存空间的起始位置的一个指针，类型为void*、</p><p>若空间不足则或者其他原因没有成功申请到内存则返回NULL</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>它的意思是：请求系统分配 <strong>4 字节</strong>的内存空间，并<strong>返回第一字节的地址</strong>，然后赋给指针变量 p。</p><blockquote><p>位（bit）：是计算机 内部数据 储存的最小单位，11001100是一个八位二进制数。<br>字节（byte）：是计算机中 数据处理 的基本单位，习惯上用大写 B 来表示,1B（byte,字节）= 8bit（位）</p></blockquote><p>C 语言中，void* 型可以不经转换（系统自动转换）地直接赋给任何类型的指针变量（函数指针变量除外）。或者自己进行强制类型转换也可以</p><p>void*与void不同，void* 是定义一个无类型的指针变量，它可以指向任何类型的数据。任何类型的指针变量都可以直接赋给 void* 型的指针变量，无需进行强制类型转换。</p><p><strong>注意，不能对 void* 型的指针变量进行运算操作，如指针的运算、指针的移动等。原因很简单，前面讲int<em>型的指针变量加 1 就是移动 4 个单元，因为 int\</em> 型的指针变量指向的是 int 型数据；但是 void* 型可以指向任何类型的数据，所以无法知道“1”所表示的是几个内存单元。</strong></p><h3 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h3><p>用于释放使用malloc动态分配的内存</p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="http://c.biancheng.net/view/223.html">http://c.biancheng.net/view/223.html</a></p><p>​            <a href="https://blog.csdn.net/weixin_39371711/article/details/81783780">https://blog.csdn.net/weixin_39371711/article/details/81783780</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的*和&amp;</title>
      <link href="2020/03/02/and-in-C/"/>
      <url>2020/03/02/and-in-C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *b = &amp;a；</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, a);</span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, b);</span><br><span class="line"><span class="built_in">printf</span>(“%d\n”, *b);</span><br></pre></td></tr></table></figure><p>结果：<br>10<br>6487620<br>6487620<br>10</p><p>*<em>为什么&amp;a和</em>b的值不是一样？**</p><a id="more"></a><p>变量a 本质上代表一个存储单元。CPU通过该存储单元的地址访问该存储单元中的数据。所以a本来代表两个值：存储单元的地址和储单元中的数据。于是就有了二异性。</p><p><strong>为了消除这种二义性，C语言规定a表示存储单元中的数据，&amp;a表示存储单元的地址。</strong><br>a存储单元中的数据可以是一个普通数值，也可以是另一个存储单元的地址，比如：a = &b; 语句就是将b的存储单元的地址存入a存储单元中。C语言规定 *a 代表a中存储的地址对应的存储单元中的数据，也就是访问*a就等于访问b，于是*a提供了通过a访问b中的数据的手段。</p><p>a表示a对应的存储单元中的数据。<br>&amp;a表示a对应的存储单元的地址。</p><p>*a表示：首先，要求a对应的存储单元中的数据一定是另一个存储单元的地址。<br>于是，*a表示另一个存储单元中的数据。<br>当a声明的类型是int时，a中存储的是一个整数数值，通过a可以访问（读取或修改）这个数值。<br><strong>当a声明的类型是int*时，a中存储的是一个存储单元的地址，而该存储单元中存储的数据是一个整数数值；通过*a可以访问（读取或修改）这个数值。a == &amp;*a 都是该存储单元的地址。</strong><br>当a声明的类型是int**时，a中存储的是一个存储单元的地址，而该存储单元中存储的数据是另外一个存储单元的地址，另外这个存储单元中存储的是一个整数数值；通过**a可以访问（读取或修改）这个数值。<br>最后，在C语言里地址叫指针。还有，在C语言中的数组本质上其实也是指针，即：*a 等同于 a[]。<br>————————————————<br>版权声明：本文为CSDN博主「kiraliam」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_27445903/article/details/82563059">https://blog.csdn.net/qq_27445903/article/details/82563059</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言中struct用法</title>
      <link href="2020/02/13/struct/"/>
      <url>2020/02/13/struct/</url>
      
        <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="声明结构类型"><a href="#声明结构类型" class="headerlink" title="声明结构类型"></a>声明结构类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">&#125;;<span class="comment">//声明一种结构，结构内包含year，month，day三个成员</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">today</span>;</span><span class="comment">//定义一个变量today，这个变量的类型是date</span></span><br></pre></td></tr></table></figure><p><strong>在函数内声明的结构只可以在函数内使用</strong></p><a id="more"></a><h3 id="声明结构的三种形式"><a href="#声明结构的三种形式" class="headerlink" title="声明结构的三种形式"></a>声明结构的三种形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p1</span>,<span class="title">p2</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;p1,p2;<span class="comment">//只定义了两个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;p1,p2;</span><br></pre></td></tr></table></figure><h3 id="结构的初始化"><a href="#结构的初始化" class="headerlink" title="结构的初始化"></a>结构的初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">today</span> =</span> &#123;<span class="number">2020</span>,<span class="number">02</span>,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">yesterday</span> =</span> &#123;.month = <span class="number">2</span>, .year = <span class="number">2020</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构成员"><a href="#结构成员" class="headerlink" title="结构成员"></a>结构成员</h3><p>结构使用”.”来访问成员</p><p>today.year = xxxx;</p><h3 id="结构运算"><a href="#结构运算" class="headerlink" title="结构运算"></a>结构运算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1 = (struct point)&#123;<span class="number">5</span>,<span class="number">10</span>&#125;;<span class="comment">//相当于怕p1.x = 5;p2.y = 10; </span></span><br><span class="line">p1 = p2; <span class="comment">//相当于p1.x = p2.x;p1.y = p2.y;</span></span><br></pre></td></tr></table></figure><h3 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h3><ul><li>与数组不同，结构的变量名并不是结构变量的地址，必须使用&amp;</li><li>struct date *pDate = &today;</li></ul><h2 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h2><h3 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h3><ul><li>整个结构可以作为参数的值传入函数</li><li>实际上进行的操作是在函数内新疆一个结构变量，并复制调用者的结构的值</li><li>也可返回一个结构</li></ul><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;point;</span><br></pre></td></tr></table></figure><p>h表示声明一个结构，结构名为point</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假C语言作业参考答案</title>
      <link href="2020/02/05/Answer-and-analysis-of-winter-vacation-C/"/>
      <url>2020/02/05/Answer-and-analysis-of-winter-vacation-C/</url>
      
        <content type="html"><![CDATA[<p><strong>按作业发布时间排序（顺序）</strong></p><p><strong>0218</strong></p><blockquote><p>1 阅读程序，写出程序所完成的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( )</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i, s=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">7</span>;i++) <span class="comment">//1到7循环7次  </span></span><br><span class="line">  s=s*i; <span class="comment">//i从1开始变化直到7 </span></span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot; %d &quot;</span>, s);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>计算1x1x2x3x4x5x6x7</p></blockquote><p>即计算7！</p><a id="more"></a><blockquote><p>2 阅读程序，写出程序所完成的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( )</span></span>&#123;   </span><br><span class="line">   <span class="keyword">int</span> digit, i, letter, other; </span><br><span class="line"><span class="keyword">char</span> ch; </span><br><span class="line">   digit = letter = other = <span class="number">0</span>; </span><br><span class="line">   <span class="built_in">printf</span> (<span class="string">&quot;Enter 20 characters: &quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) <span class="comment">//循环20次&#123;   </span></span><br><span class="line">       ch = getchar(); <span class="comment">//依次读取每个字符</span></span><br><span class="line">   <span class="keyword">if</span> ((ch&gt;= <span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;= <span class="string">&#x27;z&#x27;</span>)||(ch&gt;= <span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;= <span class="string">&#x27;Z&#x27;</span>)) <span class="comment">//判断是否属于大写或小写字母</span></span><br><span class="line">       letter ++; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) <span class="comment">//是否为数字</span></span><br><span class="line">       digit ++;</span><br><span class="line">   <span class="keyword">else</span>  </span><br><span class="line">           other ++; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;%d, %d, %d\n&quot;</span>, letter, digit, other);   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>统计20个字符中字母和数字以及其他的个数</p></blockquote><blockquote><p>3 阅读程序，写出程序所完成的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> count, num;  </span><br><span class="line"><span class="keyword">double</span> grade, total;   </span><br><span class="line">num = <span class="number">0</span>;  total = <span class="number">0</span>;  count = <span class="number">0</span>;  <span class="built_in">printf</span>(<span class="string">&quot;Enter grades: &quot;</span>);   </span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%lf&quot;</span>, &amp;grade);   </span><br><span class="line"><span class="keyword">while</span>(grade &gt;= <span class="number">0</span>)&#123; <span class="comment">//输入一个负数就停止输入 </span></span><br><span class="line">total = total + grade;<span class="comment">//计算总成绩</span></span><br><span class="line">    num++;<span class="comment">//计算人数  </span></span><br><span class="line">   <span class="keyword">if</span> (grade &lt; <span class="number">60</span>)</span><br><span class="line">           count++;   <span class="comment">//计算小于60分的人数 </span></span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%lf&quot;</span>, &amp;grade);   </span><br><span class="line">   &#125;  </span><br><span class="line"><span class="keyword">if</span>(num != <span class="number">0</span>)&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %.2f\n&quot;</span>, total / num);   </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>, count);  </span><br><span class="line">   &#125;   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>计算平均成绩和低于60分的人数</p></blockquote><blockquote><p>4 阅读程序，写出程序所完成的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( )</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i, n;  </span><br><span class="line"><span class="keyword">double</span> power;  </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">15</span> ; i++)&#123; <span class="comment">//从0到15</span></span><br><span class="line">       power = <span class="built_in">pow</span>(<span class="number">2</span>,i); <span class="comment">//计算2的i次方    </span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;pow(2,%d)= %.0f\n&quot;</span>, i,power);  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>计算2的0到15次方并打印</p><h5 id="作业20200212"><a href="#作业20200212" class="headerlink" title="作业20200212"></a>作业20200212</h5><blockquote><p>1.从键盘输入一个正整数，判断是几位数？并输出其最高位的数字。</p><p> 例如输入： 362 输出 3位数，最高位是3</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,c = <span class="number">0</span>,high;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;<span class="comment">//对0进行特殊化</span></span><br><span class="line">    c = <span class="number">1</span>;</span><br><span class="line">    high = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;<span class="comment">//循环直至x为0时停止</span></span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">10</span> )&#123;<span class="comment">//当x只剩下一位时，这一位即为最高位</span></span><br><span class="line">            high = x;</span><br><span class="line">        &#125;</span><br><span class="line">        x /= <span class="number">10</span>; <span class="comment">//去掉数字的末尾位</span></span><br><span class="line">        c++; <span class="comment">//数字位数+1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d位数，最高位是%d&quot;</span>,c,high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.猜棋子游戏。桌子上有25颗棋子。游戏双方分别是计算机和参与人。</p><p>轮流取子，每方每次最少取走一颗棋子，最多可取走3颗棋子。</p><p>双方一直轮流直到棋子取完。最终哪方所取得棋子数是偶数则胜出。</p><p>计算机取子数量由程序控制随机选取，参与人取子则键盘输入。</p><p>若由参与人先取，请编写程序完成游戏过程，显示计算机每次的取值。</p><p>计算机是否可以是“常胜将军”？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p,r;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">25</span>,pt = <span class="number">0</span>,rt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入1-3中的一个数\n&quot;</span>);</span><br><span class="line">start:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p);</span><br><span class="line"><span class="keyword">if</span>(p &gt;= <span class="number">1</span> &amp;&amp; p &lt;= <span class="number">3</span> &amp;&amp; p &lt;= x)&#123; <span class="comment">//确保p在1-3之间且避免出现有两个棋子拿3个的情况</span></span><br><span class="line">x -= p; <span class="comment">//棋子数-p</span></span><br><span class="line">pt += p; <span class="comment">//你拥有的棋子火速+p</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;现在还剩%d个棋子,你共有%d个棋子\n&quot;</span>,x,pt);</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据超出范围,请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> start; <span class="comment">//我觉得用goto不太好，但是没想到更好的办法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) <span class="comment">//防止出现棋子都取完了，计算机还再取一次的情况</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));<span class="comment">// 播种</span></span><br><span class="line">r = rand() % <span class="number">3</span> + <span class="number">1</span>; <span class="comment">//取一个1-3之间的随机数</span></span><br><span class="line">&#125;<span class="keyword">while</span>(r &gt; x); <span class="comment">//若这个数大于总数则重新取</span></span><br><span class="line">rt += r;</span><br><span class="line">x -= r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;计算机取走%d个棋子,现在还剩%d个棋子,计算机共有%d个棋子\n&quot;</span>,r,x,rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n你共取走%d个棋子，计算机共取走%d个棋子\n&quot;</span>,pt,rt);</span><br><span class="line"><span class="keyword">if</span>(pt % <span class="number">2</span> == <span class="number">0</span>)&#123;<span class="comment">//判断你手上的棋子是否位偶数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n你获胜了&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n计算机获胜&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算机是否为常胜将军涉及到了博弈论，不会</strong></p><hr><h5 id="作业20200201"><a href="#作业20200201" class="headerlink" title="作业20200201"></a>作业20200201</h5><p>题目</p><blockquote><p>1.编写程序，对于给定的一个百分制整数成绩，输出相应的五等级成绩。</p><p>设：90–100为‘A’；80–89分为 ‘B’；70–79分为‘C’；60–69分为‘D’;60分以下为 ‘E’。</p><p>例如：输入 75 则输出 C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一题可以使用if判断成绩的范围输出相应结果，也可使用switch，这里使用swiitch</span></span><br><span class="line"><span class="comment">//原谅我乱七八糟的变量名</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,temp;</span><br><span class="line"><span class="keyword">char</span> g; <span class="comment">//定义变量g，用于储存成绩的等级</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x); <span class="comment">//输入成绩</span></span><br><span class="line">temp = x / <span class="number">10</span>; <span class="comment">//取成绩的十位数字</span></span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">100</span> || x &lt;<span class="number">0</span>)&#123; <span class="comment">//判断输入成绩是否越界</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">switch</span>(temp)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            g = <span class="string">&#x27;A&#x27;</span>;  <span class="comment">//判断成绩，并将等级赋给g</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        g = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        g = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        g = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        g = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,g); <span class="comment">//输出等级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2.编写程序，用户输入星期的数字1—7，输出相应的英文表示.</p><p>例如：输入 1 则输出 Monday</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与第一题思路相同，可以使用switch也可以使用if</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tusday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">7</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>3.编写程序，输入x op y，x和y是运算数据，op是运算符，然后输出该运算的结果。设定只能识别 + - * /四种运算。</p><p> 例如：输入3+5 则输出 8</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路大概就是将输入拆分，分别对应x，op，y，xy储存两个数字，op储存运算符号，用if进行判断做出相应运算</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> op,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//此函数用于判断和计算</span></span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    res = x + y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    res = x - y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    res = x * y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    res = x / y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,op;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d&quot;</span>,&amp;x,&amp;op,&amp;y);<span class="comment">//读取数字和运算符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum(x,op,y)); <span class="comment">//输出答案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这题还有跟简单的做法，只不过我不会</span></span><br></pre></td></tr></table></figure><blockquote><p>4.编写程序，输出分数序列：2/1，3/2，5/3，8/5，…… 的前20项.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以看出这是一道找规律的题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,x = <span class="number">2</span>,y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++)&#123; <span class="comment">//for循环输出前20项</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d/%d &quot;</span>,x,y);</span><br><span class="line">        x += y; <span class="comment">//这两句就是规律</span></span><br><span class="line">        y++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.如果密码组成只能用a,b,c,d,e,f,g,h共8个字符，可以组成哪些4位的密码，共有多少个？编写程序进行解答。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用四重for循环，应该是对的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">9</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>&#125;; <span class="comment">//用一个数组把这几个数存起来</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,d,num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(a = <span class="number">0</span>;a &lt; <span class="number">8</span>;a++)&#123; <span class="comment">//遍历数组下标</span></span><br><span class="line">    <span class="keyword">for</span>(b = <span class="number">0</span>;b &lt; <span class="number">8</span>;b++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(c = <span class="number">0</span>;c &lt; <span class="number">8</span>;c++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(d = <span class="number">0</span>;d &lt; <span class="number">8</span>;d++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c &quot;</span>,x[a],x[b],x[c],x[d]);</span><br><span class="line">    num++; <span class="comment">//计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n共计%d种组合&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应该也有更简单的方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="2020/02/05/markdown-Grammatical-summary/"/>
      <url>2020/02/05/markdown-Grammatical-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>斜体可用两个*表示，将内容放入星号间即可</p><p>效果：<em>123</em></p><p>加粗使用两个**</p><p>效果：<strong>123</strong></p><a id="more"></a><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 2</span><br><span class="line">## 2</span><br><span class="line">### 2</span><br><span class="line">#### 2</span><br><span class="line">##### 2 </span><br><span class="line">###### 2</span><br></pre></td></tr></table></figure><p>效果：</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h2><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><h4 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h4><h5 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h5><h6 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h6><p><strong>注意最后一个#与文字之间需要一个空格</strong></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引用使用 &gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 123</span><br><span class="line">&gt; 456</span><br><span class="line">&gt;&gt; 789</span><br><span class="line">&gt;  &#x2F;&#x2F;表示嵌套结束</span><br><span class="line">&gt; 0</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>123<br>456</p><blockquote><p>789</p></blockquote><p>0</p></blockquote><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 1</span><br><span class="line">2. 1</span><br><span class="line">4. 1 &#x2F;&#x2F;实际显示与编号不一致</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>1</li><li>1</li><li>1</li></ol><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line"></span><br><span class="line">+ 1</span><br><span class="line">+ 2</span><br><span class="line"></span><br><span class="line">* 1</span><br><span class="line">* 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>1</li><li>2</li></ul><ul><li>1</li><li>2</li></ul><ul><li>1</li><li>2</li></ul><p>*<em>注意+-<em>不可混用</em></em></p><h5 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br><span class="line">- 1 &#x2F;&#x2F;使用一个制表符表示提高一级</span><br></pre></td></tr></table></figure><ul><li>1</li><li>1<ul><li>2</li><li>2<ul><li>3</li></ul></li></ul></li><li>1</li></ul><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个或更多-_*</p><p>效果：</p><p>1</p><hr><p>2</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
