<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Verge&#39;s Blog</title>
  
  
  <link href="http://blog.verge.ink/atom.xml" rel="self"/>
  
  <link href="http://blog.verge.ink/"/>
  <updated>2021-01-24T09:44:34.660Z</updated>
  <id>http://blog.verge.ink/</id>
  
  <author>
    <name>Verge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存的使用以及分布式锁</title>
    <link href="http://blog.verge.ink/2021/01/22/%E7%BC%93%E5%AD%98/"/>
    <id>http://blog.verge.ink/2021/01/22/%E7%BC%93%E5%AD%98/</id>
    <published>2021-01-22T09:29:07.000Z</published>
    <updated>2021-01-24T09:44:34.660Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>为了提升系统性能，将部分数据放入缓存，加速访问，减少数据的压力</p><h2 id="什么数据适合写入缓存？"><a href="#什么数据适合写入缓存？" class="headerlink" title="什么数据适合写入缓存？"></a>什么数据适合写入缓存？</h2><p>对于一些对<strong>即时性和数据一致性</strong>要求不高的，<strong>访问量大更新频率不高</strong>的数据适合写入缓存</p><p><strong>流程图</strong></p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210122174846.png" alt="image-20210122174839540"></p><p>最简单的可以把数据放入一个map（本地缓存），单体应用时没有什么问题，但是当系统为分布式系统时就会出现很多问题，每一个服务都有一个自己的缓存，就会出现数据不一致等等问题，为了解决这些问题，我们使用统一的一个缓存</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210122205633.png" alt="image-20210122205633062"></p><h2 id="使用redis进行缓存"><a href="#使用redis进行缓存" class="headerlink" title="使用redis进行缓存"></a>使用redis进行缓存</h2><h3 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合redis</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="comment">#</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="缓存击穿、穿透、雪崩"><a href="#缓存击穿、穿透、雪崩" class="headerlink" title="缓存击穿、穿透、雪崩"></a>缓存击穿、穿透、雪崩</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210122211902.png" alt="image-20210122211902414"></p><p>查询一个一定不存在的数据，由于缓存必定不命中，而去查询数据库，查数据什么也查不到而且我们也没有把这个空结果写入缓存，导致每次差这个数据都会访问一遍数据库，使缓存失去效果，容易被人利用导致数据库压力大，最终导致系统崩溃</p><p><strong>解决</strong>：将空结果也写入缓存</p><p>问题：若以后这个数据又存在了怎么办</p><p>解决：加上一个短暂的过期时间</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>当我们为很多缓存设置了相同的过期时间，在某一时刻，所有缓存同时失效，导致大量请求直接进入数据库导致系统崩溃</p><p><strong>解决</strong>: 设置过期时间时在原有的失效时间上加一个随机值</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>举例：今天晚上20点某新品发售，但是在19点时缓存失效，等到20点时大量请求直接涌入数据库，系统崩溃</p><p>对于一些设置了过期时间的key，这些key可能在某一时间内被大量请求访问，如果在大量请求进来之前，缓存失效就会导致大量请求直接打到数据库，导致系统崩溃</p><p><strong>解决</strong>：加锁，当大量请求访问时，只允许一个请求查询数据，等查完后将数据写入缓存并释放锁</p><h2 id="加锁解决缓存击穿问题"><a href="#加锁解决缓存击穿问题" class="headerlink" title="加锁解决缓存击穿问题"></a>加锁解决缓存击穿问题</h2><p>在单体应用下</p><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地锁进行加锁</p><p>这样就可已解决问题</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210123144454.png" alt="image-20210123144447441"></p><p>但对于分布式系统这样就出现问题了</p><p>要是有10个服务就要访问十遍数据库，还是没有做到只把一个进程放进来</p><p>在分布式系统下想要做到只允许一个进程操作数据库就要用到<strong>分布式锁</strong></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>所有线程去一个地方抢占锁，抢到了就执行操作</p><p>可以使用redis，所有人都进来set一个key-value，每个线程进来之前先看有没有人set这个k-v，没有的话就进行set，也就抢到了锁，执行下来的操作，完了之后删除这个k-v；别人进来如果看到了这个k-v说明锁已经被抢去</p><p>redis有一个<code> set k v NX</code> 就表示当这个k不存在时才能set成功</p><p>**问题: **等程序拿到锁之后执行其他操作时发生异常直接退出，没有释放锁造成死锁，怎么办？</p><p>解决：把释放锁放到final里？</p><p>问题：如果还没执行到final机器直接断电，怎么办</p><p>解决：给锁设置一个自动过期时间</p><p>问题：要是还没来得及设置过期时间机器就崩溃怎么办</p><p>归根结底就是加锁和设置过期时间不是一个原子操作</p><p>解决：set k v EX 300 NX加锁设置过期时间放到一句里</p><p>问题：当业务时间超过锁的过期时间，锁已经过期，等待业务结束再去删锁删的就是别人的锁</p><p>解决：我们设置锁时，不再随便设置value，而是设置一个UUID，只删除value和自己设置的value相同的锁，防止删除别人的锁</p><p>问题：我们查询这个value和自己设置的value是否相同的这个过程是需要耗费时间的，万一恰好你拿到了你设置的锁的value正在返回时，锁过期了，别的进程又抢占了锁，设置了自己的value，而等到你刚查的value到达时确实和你自己设置的锁的value相同，然后删除锁，结果就把别人的锁删了</p><p>归根结底又是<strong>查值进行对比</strong>和<strong>对比成功删除锁</strong>这两步不是一个原子操作</p><p>解决：删锁使用Lua脚本辅助</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="使用Redisson实现分布式锁"><a href="#使用Redisson实现分布式锁" class="headerlink" title="使用Redisson实现分布式锁"></a>使用Redisson实现分布式锁</h2><p>Redisson将我们上述的问题统统解决，让我们优雅的加锁释放锁</p><p>官方文档<a href="https://github.com/redisson/redisson/wiki/Table-of-Content">https://github.com/redisson/redisson/wiki/Table-of-Content</a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring boot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95">https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95</a></p><h2 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h2><h3 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h3><p>数据更新-&gt;更新数据库-&gt;更新缓存</p><p>问题：</p><p>两个线程：先后修改数据</p><p>线程1-&gt;写数据库———————–&gt;写缓存</p><p>线程2————&gt;写数据库-&gt;写缓存</p><p>此时 就会产生暂时的脏数据</p><p>解决：加锁</p><h3 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h3><p>数据更新-&gt;更新数据库-&gt;删除缓存</p><p>问题：</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210123203023.png" alt="image-20210123203023138"></p><p>解决：加锁</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20210123203553.png" alt="image-20210123203553228"></p><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>将读区数据，写入缓存等等重复的操作整合起来，只需引入一些注解就可实现这些功能</p><p>官方文档<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache">https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;p&gt;为了提升系统性能，将部分数据放入缓存，加速访问，减少数据的压力&lt;/p&gt;
&lt;h2 id=&quot;什么数据适合写入缓存？&quot;&gt;</summary>
      
    
    
    
    
    <category term="redis" scheme="http://blog.verge.ink/tags/redis/"/>
    
    <category term="缓存" scheme="http://blog.verge.ink/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>2020Review</title>
    <link href="http://blog.verge.ink/2020/12/30/2020Review/"/>
    <id>http://blog.verge.ink/2020/12/30/2020Review/</id>
    <published>2020-12-30T07:27:39.000Z</published>
    <updated>2021-01-18T15:39:40.195Z</updated>
    
    <content type="html"><![CDATA[<p>2020过的很快啊，忙忙碌碌倒也还算充实，写个博客记录记录这对我来说很有意义的一年</p><a id="more"></a><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>这一年学了很多东西，从只会一点C，到现在转投java拥抱spring全家桶，能自己写一点东西出来，很有成就感。但其他就比较拉跨了，几乎把所有时间所有精力放在了这方面，高数大物什么的都是速成的，绩点一般。</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>这一年完成了222次commit</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231190003.png" alt="image-20201231185955963"></p><p>前半年年时间都在学习，到了后半年，才开始慢慢自己写一些东西传到GitHub上，建了25个仓库其中自己写的感觉还有点用的就俩</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231191413.png" alt="image-20201231191413121"></p><p>yiban-auto-checkin </p><p><a href="https://github.com/Jinxuyang/yiban-auto-checkin">https://github.com/Jinxuyang/yiban-auto-checkin</a></p><p>不是什么正经东西但是有用，收获了11个star，最顶峰的时候有1100+人使用，怂了关了</p><p>api-call-counter </p><p><a href="https://github.com/Jinxuyang/api-call-counter">https://github.com/Jinxuyang/api-call-counter</a></p><p>这个现在就有基本的功能，用redis存储数据，只需要引入jar包配置redis，默认统计controller包下方法的调用次数，也可以通过给方法上打注解来统计指定方法，想把这个好好写写做的完善一点。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>写了40篇博客，95%都是笔记没有什么深度，也就自己复习的时候可以看看</p><p>本来计划再写一篇关于Spring Security，一篇关于api-call-counter的，一拖再拖，看来得拖到明年了，属实拉跨</p><p>明年希望能写出一些有深度，有水平的博客，一周一篇，希望能坚持下去，</p><p>还有很多篇没有往博客上传，重装了一次电脑东西都搞没了hhh，也没再搞好</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194935.png" alt="image-20201231194935707"></p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194946.png" alt="image-20201231194946039"></p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231194954.png" alt="image-20201231194954771"></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>唉…也就那样，和往年一样，没去什么地方玩，也没干什么有趣的事情，也还没有<strong>女朋友</strong></p><p>比较幸运，比较正确的事就是来铁头，东西也学了，饭也干了，认识了许多小伙伴，very good</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>今年最让我记忆深刻的游戏非<strong>巫师3：狂猎</strong>莫属</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231202640.png" alt="image-20201231202640482"></p><p>没有可以完成成就，没有专门收集装备，开了最低难度，就看了剧情，游戏初期感觉很拖沓，感觉很无聊，许许多多奇怪的名字</p><p>搞得人….差点错过了这部游戏，47块本体加DLC绝对物超所值</p><p>游戏的配乐也极其好听，导致</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231211651.jpg" alt="Screenshot_20201228_120305"></p><p>总之，绝对不要错过</p><p>还有两个我特别喜欢的游戏</p><p>一个是 Factorio 很好玩，很费肝</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231212126.png" alt="image-20201231212125985"></p><p>另一个是Oxygen Not Include</p><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201231202542.png" alt="image-20201231202542614"></p><p>同样值得尝试</p><h2 id="憧憬"><a href="#憧憬" class="headerlink" title="憧憬"></a>憧憬</h2><ol><li><p>代码能力更上一层楼</p><ol><li>写个 50+star 的项目？</li></ol></li><li><p>能出去走走</p><ol><li>没有什么特别想去的地方，总之不想一直待在学校了</li></ol></li><li><p>身体健康</p></li><li><p style="color:#f8f9fa">找个女朋友</p></li></ol><p>   很惨，2020快结束的时候感冒了….浑身难受</p><p>   最后，大家新年快乐！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020过的很快啊，忙忙碌碌倒也还算充实，写个博客记录记录这对我来说很有意义的一年&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://blog.verge.ink/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="年终总结" scheme="http://blog.verge.ink/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ES学习笔记</title>
    <link href="http://blog.verge.ink/2020/12/22/ElasticSearch/"/>
    <id>http://blog.verge.ink/2020/12/22/ElasticSearch/</id>
    <published>2020-12-22T01:40:33.000Z</published>
    <updated>2021-01-18T15:55:00.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="下载（docker）"><a href="#下载（docker）" class="headerlink" title="下载（docker）"></a>下载（docker）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;config</span><br><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;data</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;&#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type&#x3D;single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \</span><br><span class="line">-v  &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">-d elasticsearch:7.6.2 </span><br></pre></td></tr></table></figure><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update elasticsearch --restart&#x3D;always</span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/vergeee/static-repo/raw/master//img/20201222203731.png" alt="A{V60~K}ZEBX}6QLXDJB9FO"></p><ul><li><p>索引相当于数据库</p></li><li><p>类型相当于数据表(慢慢会被弃用)</p></li><li><p>文档相当于数据库的数据行</p><ul><li>字段：文档中的kv对</li><li>词：表示文本中的一个单词</li><li>标记：表示在字段中出现的词</li></ul></li></ul><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p>github地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>分词器版本和es版本对应</p><p>解压后放入ex的plugins目录下</p><h4 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h4><p>最少切分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;好好生活&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好好&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;生活&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h4><p>穷尽可能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;好好生活&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好好&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;好生&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;生活&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增加词库"><a href="#增加词库" class="headerlink" title="增加词库"></a>增加词库</h3><h2 id="Rest风格api"><a href="#Rest风格api" class="headerlink" title="Rest风格api"></a>Rest风格api</h2><ul><li>GET: 获取</li><li>POST: 更新</li><li>PUT:创建</li><li>DELETE:删除</li></ul><h3 id="创建索引（PUT）"><a href="#创建索引（PUT）" class="headerlink" title="创建索引（PUT）"></a>创建索引（PUT）</h3><p>发送PUT请求到</p><p><code>http://localhost:9200/&lt;index&gt;/&lt;type&gt;/&lt;id&gt;</code></p><p>例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT http://192.168.56.10:9200/movies/movie/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><p>使用完全相同的索引类型id，再次发送PUT请求,带上新的JSON对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT http://192.168.56.10:9200/movies/movie/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span>,</span><br><span class="line">    <span class="attr">&quot;genres&quot;</span>: [<span class="string">&quot;Crime&quot;</span>, <span class="string">&quot;Drama&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_version加一</p><p>reslult为update</p><h3 id="通过ID获取文档-索引"><a href="#通过ID获取文档-索引" class="headerlink" title="通过ID获取文档/索引"></a>通过ID获取文档/索引</h3><p>发送GET到<code>http://localhost:9200/movies/movie/1</code></p><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;The Godfather&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;director&quot;</span>: <span class="string">&quot;Francis Ford Coppola&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;year&quot;</span>: <span class="number">1972</span>,</span><br><span class="line">        <span class="attr">&quot;genres&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Crime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Drama&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>发送DELETE到<code>http://localhost:9200/movies/movie/1</code></p><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;movies&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;movie&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心功能：搜索"><a href="#核心功能：搜索" class="headerlink" title="核心功能：搜索"></a>核心功能：搜索</h3><p><a href="http://localhost:9200/_search">http://localhost:9200/_search</a> </p><p><a href="http://localhost:9200/movies/_search">http://localhost:9200/movies/_search</a> - 在电影索引中搜索所有类型</p><p><a href="http://localhost:9200/movies/movie/_search">http://localhost:9200/movies/movie/_search</a> - 在电影索引中显式搜索电影类型的文档。</p><h4 id="搜索请求正文和DSL"><a href="#搜索请求正文和DSL" class="headerlink" title="搜索请求正文和DSL"></a>搜索请求正文和DSL</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//Query DSL here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; 1</span><br><span class="line">    &quot;bool&quot;: &#123; 2</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;title&quot;:   &quot;Search&quot;        &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;Elasticsearch&quot;</span> &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [ 3</span><br><span class="line">        &#123; &quot;term&quot;:  &#123; &quot;status&quot;: &quot;published&quot; &#125;&#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;range&quot;</span>: &#123; <span class="attr">&quot;publish_date&quot;</span>: &#123; <span class="attr">&quot;gte&quot;</span>: <span class="string">&quot;2015-01-01&quot;</span> &#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>query包含查询上下文</li><li>两个match被用来给每个匹配到的文档评分</li><li>filter会过滤掉不符合条件的</li></ol><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><p>符合查询包括</p><ol><li>bool query：默认</li><li>boosting query：返回文档匹配到positive，同时减少匹配到negative的文档的分数</li><li>constant_score query: 所有匹配的文档将被给予相同分数</li><li>dis_max query</li><li>function_score query</li></ol><h5 id="Boolean-query"><a href="#Boolean-query" class="headerlink" title="Boolean query"></a>Boolean query</h5><table><thead><tr><th><strong>Occur</strong></th><th>表头</th></tr></thead><tbody><tr><td>must</td><td>文档中必须包含，匹配到会有加分</td></tr><tr><td>filter</td><td>文档中必须包含，但不会加分</td></tr><tr><td>should</td><td>文档中应该出现</td></tr><tr><td>must_not</td><td>文档中不能出现，分数将被忽略</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;user.id&quot;</span> : <span class="string">&quot;kimchy&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;production&quot;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : &#123; <span class="attr">&quot;gte&quot;</span> : <span class="number">10</span>, <span class="attr">&quot;lte&quot;</span> : <span class="number">20</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;should&quot;</span> : [</span><br><span class="line">        &#123; <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;env1&quot;</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;term&quot;</span> : &#123; <span class="attr">&quot;tags&quot;</span> : <span class="string">&quot;deployed&quot;</span> &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;minimum_should_match&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;boost&quot;</span> : <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合Spring-Boot"><a href="#整合Spring-Boot" class="headerlink" title="整合Spring Boot"></a>整合Spring Boot</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;h3 id=&quot;下载（docker）&quot;&gt;&lt;a href=&quot;#下载（docker）&quot; class=&quot;headerlink&quot; title=&quot;下载（docker）&quot;&gt;&lt;/a&gt;下载（docker）&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull elasticsearch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p &amp;#x2F;mydata&amp;#x2F;elasticsearch&amp;#x2F;config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p &amp;#x2F;mydata&amp;#x2F;elasticsearch&amp;#x2F;data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;http.host: 0.0.0.0&amp;quot; &amp;gt;&amp;#x2F;mydata&amp;#x2F;elasticsearch&amp;#x2F;config&amp;#x2F;elasticsearch.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod -R 777 &amp;#x2F;mydata&amp;#x2F;elasticsearch&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="http://blog.verge.ink/2020/12/18/Docker/"/>
    <id>http://blog.verge.ink/2020/12/18/Docker/</id>
    <published>2020-12-18T01:40:33.000Z</published>
    <updated>2021-01-18T15:55:25.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-安装mysql"><a href="#docker-安装mysql" class="headerlink" title="docker 安装mysql"></a>docker 安装mysql</h2><ol><li><p><code>docker pull mysql:5.7</code> 冒号后加版本，在<a href="https://hub.docker.com/_/mysql%E6%9F%A5%E7%9C%8B">https://hub.docker.com/_/mysql查看</a></p></li><li><p>启动</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   docker run -p 6000:3306 --name mysql-6000 \</span><br><span class="line">   -v /mydata/mysql-6000/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">   -v /mydata/mysql6000/data:/var/lib/mysql \</span><br><span class="line">   -v /mydata/mysql6000/conf:/etc/mysql \</span><br><span class="line">   -e MYSQL_ROOT_PASSWORD=JINXUyang123 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>-p设置端口及映射端口  linux端口:docker容器端口</li><li>–name 设置容器名称</li><li>-v设置挂载</li><li>-e MYSQL_ROOT_PASSWORD=root 设置MySQL密码</li></ul></li></ol><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><ol><li><code>docker pull redis</code></li><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;docker-安装mysql&quot;&gt;&lt;a href=&quot;#docker-安装mysql&quot; class=&quot;headerlink&quot; title=&quot;docker 安装mysql&quot;&gt;&lt;/a&gt;docker 安装mysql&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker pull mysql:5.7&lt;/code&gt; 冒号后加版本，在&lt;a href=&quot;https://hub.docker.com/_/mysql%E6%9F%A5%E7%9C%8B&quot;&gt;https://hub.docker.com/_/mysql查看&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://blog.verge.ink/2020/11/11/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.verge.ink/2020/11/11/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-11T07:27:39.000Z</published>
    <updated>2021-01-18T15:52:47.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis学习笔记"><a href="#Redis学习笔记" class="headerlink" title="Redis学习笔记"></a>Redis学习笔记</h2><p>NoSQL（Not only SQL）</p><p>泛指非关系型数据库</p><a id="more"></a><h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>一个 key 对应一个 value，二进制安全，可以存放jpg图片或者序列化的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">get key</span><br><span class="line">keys * &#x2F;&#x2F; 获取所有key</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incr key 自增1</span><br><span class="line">decr key 自减1</span><br><span class="line">INCRBY key 10 增10</span><br><span class="line">DECRBY key 10 减10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GETRANGE key 0 3 获取字符串的0-3</span><br><span class="line">GETRANGE key 0 -1 获取整个字符串</span><br><span class="line">SETRANGE key 1 xxxxx 替换指定开始位置字符串</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setex(set with expire)设置过期时间</span><br><span class="line">setnx(set if not exist)不存在在设置</span><br><span class="line"></span><br><span class="line">setex key 30 &quot;xxx&quot;设置字符串过期时间30s</span><br><span class="line">setnx key &quot;xxx&quot;当可以不存在时设置，否则创建失败</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mset k1 v1 k2 v2 k3 v3 一次设置多个值</span><br><span class="line">msetnx k1 v1 k2 v2 设置k1 k2时同时成功同时失败</span><br><span class="line"></span><br><span class="line">mget k1 k2 k3 一次获取多个值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set user:1 &#123;name:zhangsan,age:18&#125; 设置一个user:1 对象，值为json字符串</span><br><span class="line">mset user:1:name zhangsan user:1:age 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getset 先get再set</span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>所有List命令都是l开头</p><p>List中的值可以重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LPUSH list xxx 向列表头部插或多个</span><br><span class="line">RPUSH list xxx 向尾部插</span><br><span class="line">LANGE</span><br><span class="line">LPOP list移除头</span><br><span class="line">RPOP list移除尾</span><br><span class="line"></span><br><span class="line">Lindex list 1 获取第一个（通过下标获取值）</span><br><span class="line">Llen list 返回列表长度</span><br><span class="line"></span><br><span class="line">Lrem list 1 one 移除列表中的一个one</span><br><span class="line">Lrem list 2 three 移除列表中的两个three</span><br><span class="line"></span><br><span class="line">trim list 1 2修剪，只要1到2的值</span><br><span class="line"></span><br><span class="line">rpoplpush list newlist 从list pop,push到newlist</span><br><span class="line"></span><br><span class="line">lset list 0 xxx 往0处插xxx</span><br><span class="line"></span><br><span class="line">LINSERT list before &quot;xxx&quot; &quot;yyy&quot; </span><br><span class="line">LINSERT list after &quot;xxx&quot; &quot;yyy&quot;</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>set中的值不可重复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="built_in">set</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">smembers <span class="built_in">set</span> 查看所有value</span><br><span class="line">smember <span class="built_in">set</span> xxx 判断xxx是否在<span class="built_in">set</span>中</span><br><span class="line">scard <span class="built_in">set</span> 获取<span class="built_in">set</span>中元素个数</span><br><span class="line">srem <span class="built_in">set</span> xxx 移除xxx</span><br><span class="line"></span><br><span class="line">srandmember <span class="built_in">set</span> 随机抽出元素</span><br><span class="line">srandmember <span class="built_in">set</span> 2 随机抽出2个元素</span><br><span class="line"></span><br><span class="line">smove <span class="built_in">set</span> newset xxx 将xxx从<span class="built_in">set</span>移动到newset</span><br><span class="line"></span><br><span class="line">spop随机删除一个元素</span><br><span class="line"></span><br><span class="line">sdiff set1 set2 看两个<span class="built_in">set</span>的不同元素</span><br><span class="line">sinter set1 set2 看交集 </span><br><span class="line">sunion set1 set2 看并集</span><br></pre></td></tr></table></figure><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>key-map </p><p>key-&lt;key,map&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hset</span><br><span class="line">hmset</span><br><span class="line">hget</span><br><span class="line">hmget</span><br><span class="line">hdel</span><br><span class="line">hgetall</span><br><span class="line">hlen</span><br></pre></td></tr></table></figure><p>Zset</p><p>在set的基础上增加了一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zset</span><br><span class="line">zadd zset 1000 xxx</span><br><span class="line">zrangescore zset -inf +inf 排序</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>Redis单条命令保存原子性，事务不保证原子性</p><p>Redis没有隔离级别的概念</p><p>Redis事务本质一组命令的集合 ；一个事务中所有命令都会被序列化，在事务执行过程中，会按顺序执行；一次性顺序性排他性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multi 开启事务，下面输入的命令都会暂时放在队列里</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>执行队列中的命令</span><br><span class="line">discard取消事务</span><br></pre></td></tr></table></figure><ul><li><p>有错误的命令（例如getset）其他所有的命令都不会执行</p></li><li><p>命令不存在语法性错误，命令执行时其他命令是我可以执行的</p></li></ul><h3 id="Redis实现乐观锁"><a href="#Redis实现乐观锁" class="headerlink" title="Redis实现乐观锁"></a>Redis实现乐观锁</h3><ul><li><p>乐观锁</p><p>认为什么时候都不会出现问题，不会上锁，更新数据时判断，在此期间是否有人修改过这个数据，数据被更改事务执行失败</p></li><li><p>悲观锁</p><p>认为什么时候都会出现问题，无论做什么都加锁</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watch xxx 监视xxx</span><br><span class="line">multi </span><br><span class="line">命令</span><br><span class="line"><span class="built_in">exec</span> 若xxx在事务期间改变会执行失败</span><br></pre></td></tr></table></figure><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis &#x3D; new Jedis(&quot;host&quot;,6379);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Redis学习笔记&quot;&gt;&lt;a href=&quot;#Redis学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Redis学习笔记&quot;&gt;&lt;/a&gt;Redis学习笔记&lt;/h2&gt;&lt;p&gt;NoSQL（Not only SQL）&lt;/p&gt;
&lt;p&gt;泛指非关系型数据库&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="http://blog.verge.ink/categories/redis/"/>
    
    
    <category term="redis" scheme="http://blog.verge.ink/tags/redis/"/>
    
    <category term="数据库" scheme="http://blog.verge.ink/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud学习笔记</title>
    <link href="http://blog.verge.ink/2020/11/09/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.verge.ink/2020/11/09/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-08T16:04:09.000Z</published>
    <updated>2021-01-18T15:47:03.163Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-Cloud-学习笔记"><a href="#Spring-Cloud-学习笔记" class="headerlink" title="Spring Cloud 学习笔记"></a>Spring Cloud 学习笔记</h1><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>通过访问<code>https://start.spring.io/actuator/info</code></p><a id="more"></a><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;git&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;branch&quot;</span>: <span class="string">&quot;82af3869647d62a1e520a076908c14eee4715d8d&quot;</span>,</span><br><span class="line"><span class="attr">&quot;commit&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;82af386&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2020-11-02T15:56:02Z&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;build&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;artifact&quot;</span>: <span class="string">&quot;start-site&quot;</span>,</span><br><span class="line"><span class="attr">&quot;versions&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;spring-boot&quot;</span>: <span class="string">&quot;2.3.5.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;initializr&quot;</span>: <span class="string">&quot;0.10.0-SNAPSHOT&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;start.spring.io website&quot;</span>,</span><br><span class="line"><span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2020-11-02T16:15:14.702Z&quot;</span>,</span><br><span class="line"><span class="attr">&quot;group&quot;</span>: <span class="string">&quot;io.spring.start&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;bom-ranges&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;azure&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.10&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.10&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;codecentric-spring-boot-admin&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;solace-spring-boot&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.0.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.1.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;solace-spring-cloud&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.0.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.1.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Finchley.M2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M7&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.M9&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.RC1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.RC2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.SR4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Finchley.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.M1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.SR6&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.999.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Greenwich.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.999.BUILD-SNAPSHOT and &lt;2.2.0.M4&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Hoxton.SR8&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M4 and &lt;2.3.6.BUILD-SNAPSHOT&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Hoxton.BUILD-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.6.BUILD-SNAPSHOT and &lt;2.4.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-M3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0.M1 and &lt;=2.4.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0.M2 and &lt;=2.4.0-M3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2020.0.0-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M4&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud-alibaba&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.2.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-cloud-services&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.3.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.8.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.2.6.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.3.0.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.RELEASE and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;spring-statemachine&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.0.M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.0.0.M5&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.0.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;vaadin&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;10.0.17&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;14.4.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;wavefront&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.4.0-M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.0-SNAPSHOT&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;dependency-ranges&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;okta&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.2.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.2.RELEASE and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.4.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;mybatis&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.0.1&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.1.3&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;geode&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;1.2.10.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M5 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.3.4.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;1.4.0-M4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;camel&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.22.4&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;2.25.2&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.3.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.5.0&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;open-service-broker&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;2.1.3.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.0.4.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;3.1.1.RELEASE&quot;</span>: <span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择Spring boot版本和Spring cloud版本</p><h2 id="引入spring-cloud-alibaba"><a href="#引入spring-cloud-alibaba" class="headerlink" title="引入spring cloud alibaba"></a>引入spring cloud alibaba</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p><h3 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h3><p>项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。</p><p>由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此我们采取跟 SpringBoot 版本号一致的版本:</p><ul><li>1.5.x 版本适用于 Spring Boot 1.5.x</li><li>2.0.x 版本适用于 Spring Boot 2.0.x</li><li>2.1.x 版本适用于 Spring Boot 2.1.x</li><li>2.2.x 版本适用于 Spring Boot 2.2.x</li></ul><h2 id="使用nacos"><a href="#使用nacos" class="headerlink" title="使用nacos"></a>使用nacos</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载地址<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>windows上运行下载.zip文件，运行startup.cmd</p><p>默认端口为8848</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">application</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><h2 id="使用OpenFeign"><a href="#使用OpenFeign" class="headerlink" title="使用OpenFeign"></a>使用OpenFeign</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写接口"><a href="#写接口" class="headerlink" title="写接口"></a>写接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;要调用的服务名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;路径&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span></span>;<span class="comment">// 与被调用的方法相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开启远程调用功能"><a href="#开启远程调用功能" class="headerlink" title="开启远程调用功能"></a>开启远程调用功能</h3><p>在spring启动类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;接口所在包&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h2><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>新建bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br></pre></td></tr></table></figure><h3 id="配置中心添加"><a href="#配置中心添加" class="headerlink" title="配置中心添加"></a>配置中心添加</h3><p>应用名.后缀</p><h3 id="动态获取配置"><a href="#动态获取配置" class="headerlink" title="动态获取配置"></a>动态获取配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure><p>配置中心和本地配置冲突时，优先使用配置中心</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="命名空间：配置隔离"><a href="#命名空间：配置隔离" class="headerlink" title="命名空间：配置隔离"></a>命名空间：配置隔离</h4><p>例如：</p><ol><li>开发环境，测试环境，生产环境</li><li>微服务</li></ol><p>修改默认命名空间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">5c990c25-30e9-4490-8e52-aaa45d8bbeb9</span> <span class="string">命名空间id</span></span><br></pre></td></tr></table></figure><p><img src="D:\Personal\Blog\source_posts\img\84@_NEV9[]LIK_WB9~WV{VI.png" alt="img"></p><h4 id="配置集"><a href="#配置集" class="headerlink" title="配置集"></a>配置集</h4><h4 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h4><h2 id="网关Spring-Cloud-Gateway"><a href="#网关Spring-Cloud-Gateway" class="headerlink" title="网关Spring Cloud Gateway"></a>网关Spring Cloud Gateway</h2><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="出现the-‘Access-Control-Allow-Origin’-header-contains-multiple-values"><a href="#出现the-‘Access-Control-Allow-Origin’-header-contains-multiple-values" class="headerlink" title="出现the ‘Access-Control-Allow-Origin’ header contains multiple values"></a>出现the ‘Access-Control-Allow-Origin’ header contains multiple values</h3><p><img src="D:\Personal\Blog\source_posts\img\1.png" alt="1"></p><p>这是spring的一个问题</p><p>可以通过修改配置文件解决</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Origin</span> <span class="string">Access-Control-Allow-Credentials,</span> <span class="string">RETAIN_UNIQUE</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Spring-Cloud-学习笔记&quot;&gt;&lt;a href=&quot;#Spring-Cloud-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud 学习笔记&quot;&gt;&lt;/a&gt;Spring Cloud 学习笔记&lt;/h1&gt;&lt;h2 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h2&gt;&lt;p&gt;通过访问&lt;code&gt;https://start.spring.io/actuator/info&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="spring" scheme="http://blog.verge.ink/categories/spring/"/>
    
    
    <category term="spring" scheme="http://blog.verge.ink/tags/spring/"/>
    
    <category term="学习笔记" scheme="http://blog.verge.ink/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="spring cloud" scheme="http://blog.verge.ink/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot解决跨域问题</title>
    <link href="http://blog.verge.ink/2020/09/15/CORS/"/>
    <id>http://blog.verge.ink/2020/09/15/CORS/</id>
    <published>2020-09-15T09:02:19.000Z</published>
    <updated>2021-01-18T15:37:28.025Z</updated>
    
    <content type="html"><![CDATA[<p>spring boot 解决跨域问题代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fehead.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任何头</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任何方法（post、get等）</span></span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5)配置有效时长</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600</span>*<span class="number">24L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;spring boot 解决跨域问题代码&lt;/p&gt;</summary>
    
    
    
    <category term="spring" scheme="http://blog.verge.ink/categories/spring/"/>
    
    
    <category term="spring" scheme="http://blog.verge.ink/tags/spring/"/>
    
    <category term="cors" scheme="http://blog.verge.ink/tags/cors/"/>
    
    <category term="跨域" scheme="http://blog.verge.ink/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linxu命令</title>
    <link href="http://blog.verge.ink/2020/09/14/linxu-command/"/>
    <id>http://blog.verge.ink/2020/09/14/linxu-command/</id>
    <published>2020-09-14T04:28:37.000Z</published>
    <updated>2021-01-18T15:53:44.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><a id="more"></a><h3 id="开发80端口"><a href="#开发80端口" class="headerlink" title="开发80端口"></a>开发80端口</h3><p><code> firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p><h3 id="查询端口号80-是否开启"><a href="#查询端口号80-是否开启" class="headerlink" title="查询端口号80 是否开启"></a>查询端口号80 是否开启</h3><p><code>firewall-cmd --query-port=80/tcp</code></p><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><p><code> firewall-cmd --reload</code></p><h3 id="查询有哪些端口是开启的"><a href="#查询有哪些端口是开启的" class="headerlink" title="查询有哪些端口是开启的"></a>查询有哪些端口是开启的</h3><p><code>firewall-cmd --list-port</code></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>--zone #作用域 --add-port=80/tcp #添加端口，格式为：端口/通讯协议 --permanent #永久生效，没有此参数重启后失效</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;防火墙&quot;&gt;&lt;a href=&quot;#防火墙&quot; class=&quot;headerlink&quot; title=&quot;防火墙&quot;&gt;&lt;/a&gt;防火墙&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>我是如何实现易班自动打卡的？</title>
    <link href="http://blog.verge.ink/2020/07/28/yiban-auto-checkin/"/>
    <id>http://blog.verge.ink/2020/07/28/yiban-auto-checkin/</id>
    <published>2020-07-28T06:01:36.000Z</published>
    <updated>2021-01-18T15:56:58.276Z</updated>
    
    <content type="html"><![CDATA[<p>需要用到的工具</p><p>HttpCanary</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ol><li><p>先进入易班，然后退出登录，方便我们一会记录整个登录和打卡的过程</p></li><li><p>打开HttpCanary将易班添加为目标程</p></li><li><p>开始抓包</p></li><li><p>完成从登录易班到打卡完成的整个过程的抓包</p><a id="more"></a></li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们倒着来分析</p><ol><li><p>抓到了很多数据包，但是音频和图片js…文件是我们不需要的，因此进行过滤保留这三种数据包即可</p></li><li><p>开始一个一个分析，发现一个数据包很可疑，打开一看这不就是我们提交的表单吗</p></li><li><p>验证猜想，重发这个请求，返回消息如下，可以确定这就是我们要找的数据包</p></li><li><p>猜想是否可以依靠每天自动重发这个请求实现签到，答案是否定的，是什么原因呢</p><ol><li><p>分析该请求的请求头，发现这里有一个Cookie，有两个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client&#x3D;android</span><br><span class="line">PHPSESSID&#x3D;96098a2d53fdfef072b13f7113da5e17</span><br></pre></td></tr></table></figure></li><li><p>第一个不用说，第二个就是罪魁祸首，一看这名字就知道肯定和SESSION有关，百度一下</p></li></ol></li><li><p>好了这下目标明确，寻找是谁第一次Set了这个Cookie，筛选，好了就是他，理论上我们只要，发送一下这个请求就可以拿到Cookie</p></li><li><p>问题又来了，这些又是啥？？？继续往下看</p></li><li><p>首先猜测一下这个act=iappxxxxx应该是易班小程序的ID，那么OK，他是不会变的，记住就行了，那么这个v是什么？看了看他的前一个请求发现就是access_token</p></li><li><p>好了继续寻找access_token</p></li><li><p>拉到最下面，第一个请求应该就是登录的请求，查看他的响应信息果然access_token就在里面</p></li><li><p>至此，抓包数据分析完成</p></li></ol><p><strong>总结：</strong></p><ol><li>登录拿到access_token</li><li>拿着access_token去获得Cookie</li><li>拿着Cookie提交表单</li><li>完成</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>以下使用java，使用Hutool进行Http请求、json解析等等等</strong></p><p>获取Access_token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">getAccess_token</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置请求参数</span></span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;account&quot;</span>,username);</span><br><span class="line">        map.put(<span class="string">&quot;passwd&quot;</span>,password);</span><br><span class="line">        map.put(<span class="string">&quot;ct&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;identify&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;v&quot;</span>,<span class="string">&quot;4.7.4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取返回的字符串</span></span><br><span class="line">        String jsonStr = HttpUtil.get(<span class="string">&quot;https://mobile.yiban.cn/api/v2/passport/login&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把获取到的字符串转换为JSONObject对象</span></span><br><span class="line">        JSONObject jsonObject = JSONUtil.parseObj(jsonStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//try catch一下，以防获取到一些奇奇怪怪的东西</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//比较状态码，是否登陆成功</span></span><br><span class="line">            <span class="keyword">if</span> (jsonObject.get(<span class="string">&quot;response&quot;</span>).equals(<span class="string">&quot;100&quot;</span>))&#123;</span><br><span class="line">                String res = ((JSONObject) jsonObject.get(<span class="string">&quot;data&quot;</span>)).getStr(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> CommonResult.success(res,<span class="string">&quot;拿到数据了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;易班返回的Json数据可能有变化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">getPHPSESSID</span><span class="params">(String access_token)</span></span>&#123;</span><br><span class="line">        <span class="comment">//请求数据</span></span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;act&quot;</span>,<span class="string">&quot;iapp610661&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;access_token&quot;</span>,access_token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送请求，从cookie中获取PHPSESSIONID</span></span><br><span class="line">        HttpResponse response = HttpRequest</span><br><span class="line">                .get(<span class="string">&quot;http://f.yiban.cn/iapp/index&quot;</span>)</span><br><span class="line">                .form(map)</span><br><span class="line">                .setFollowRedirects(<span class="keyword">true</span>)</span><br><span class="line">                .execute();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String res = response.header(<span class="string">&quot;Set-Cookie&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CommonResult.success(res,<span class="string">&quot;成功获取SESSID&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(<span class="string">&quot;没获取到SESSID&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>提交表单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">submit</span><span class="params">(String cookie, String content)</span></span>&#123;</span><br><span class="line">        HttpResponse response = HttpRequest.post(<span class="string">&quot;http://yiban.sust.edu.cn/v4/public/index.php/Index/form/add.html?id=9&quot;</span>)</span><br><span class="line">                .contentType(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">                .body(content)</span><br><span class="line">                .cookie(cookie)</span><br><span class="line">                .execute();</span><br><span class="line">        JSONObject jsonObject = JSONUtil.parseObj(response.body());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jsonObject.get(<span class="string">&quot;code&quot;</span>).equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.success(jsonObject.getStr(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> CommonResult.failed(jsonObject.getStr(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.failed(e.getMessage()+  <span class="string">&quot;没找到返回的code，奇了怪了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发送邮件(不得不说Hutool就是好用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MailUtil.send(<span class="string">&quot;你的邮箱&quot;</span>,标题,内容,是否为html(<span class="keyword">boolean</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;需要用到的工具&lt;/p&gt;
&lt;p&gt;HttpCanary&lt;/p&gt;
&lt;h2 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先进入易班，然后退出登录，方便我们一会记录整个登录和打卡的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开HttpCanary将易班添加为目标程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开始抓包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完成从登录易班到打卡完成的整个过程的抓包&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="http://blog.verge.ink/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="spring" scheme="http://blog.verge.ink/tags/spring/"/>
    
    <category term="java" scheme="http://blog.verge.ink/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记</title>
    <link href="http://blog.verge.ink/2020/07/21/algorithm/"/>
    <id>http://blog.verge.ink/2020/07/21/algorithm/</id>
    <published>2020-07-21T08:00:47.000Z</published>
    <updated>2021-01-18T15:56:13.892Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li><p>一一列举</p></li><li><p>不重复，不遗漏</p><a id="more"></a></li></ul><h3 id="优化枚举的基本思路"><a href="#优化枚举的基本思路" class="headerlink" title="优化枚举的基本思路"></a>优化枚举的基本思路</h3><p>减少枚举次数</p><ul><li>选择合适的枚举对象</li><li>选择合适的枚举方向 ——方便排除非法和不是最优的情况</li><li>选择合适的数据维护方法 ——转化问题</li></ul><h4 id="例1-最大正方形"><a href="#例1-最大正方形" class="headerlink" title="例1.最大正方形"></a>例1.最大正方形</h4><p>题目</p><p>在一个N*N（N&lt;100）的矩阵中求一个最大的正方形使得该正方形的四个顶点是由“#”构成</p><p>##**#</p><p>*****</p><p>**##*</p><p>#*#*#*</p><p>*#*#*</p><p>思路</p><ol><li>几个点可以确定一个正方形？<ul><li>对角线上的两个点确定一个正方形</li></ul></li><li>明确思路使用枚举法，枚举所有两个点的组合，判断剩下两个点是否是#，是的话记录面积不是就继续枚举下一个组合，直至枚举完所有集合</li></ol><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>对于一个数列，再开一个数组，第n个数就存前n个数字的和</p><h4 id="例2-数列求和问题"><a href="#例2-数列求和问题" class="headerlink" title="例2 数列求和问题"></a>例2 数列求和问题</h4><p>给定一个数列{an}（1&lt;= n &lt;= 100000）,有q（1&lt;= n &lt;= 100000）次询问，每次询问从i到j的元素之和</p><p><strong>思路</strong></p><ol><li>暴力，直接算（范围大的话必超时）</li><li>先便利数据，求前缀和，存到数组中</li><li>使用时直接求aj-ai即可</li></ol><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><h4 id="例3-数列修改问题"><a href="#例3-数列修改问题" class="headerlink" title="例3 数列修改问题"></a>例3 数列修改问题</h4><p>给定一个数列{an}（1&lt;= n &lt;= 100000）,有q（1&lt;= n &lt;= 100000）次修改，每次修改把从i到j的每个元素加上k，求所有修改之后的每个数值</p><p><strong>思路</strong></p><ol><li>暴力，每次修改都遍历区间（时间复杂度太大）</li><li>思考问题，进行修改时区间什么没有变，什么变了<ol><li>区间内各个元素之间的差值未变</li><li>端点处的差值改变</li></ol></li><li>把修改的地方从整个区间变到区间的端点，就可以大大减少时间复杂度<ol><li>当我们对第i到j个数加上k的话，i与i-1的差值增加了k，j与j加一的差值减少了k，区间内部相邻两数差值不变</li><li>因此可以使用一个数组来维护第i个数和第i-1个数的差值（默认第一个数的前一个数是0），将[i,j]这个区间的每个数+1时，只需要修改i和j+1（i+k，j+1-k）</li><li>对这个数组求前缀和，即可得到数列的值</li><li>这种方法叫<strong>差分</strong></li></ol></li></ol><h3 id="差分与前缀和的关系"><a href="#差分与前缀和的关系" class="headerlink" title="差分与前缀和的关系"></a>差分与前缀和的关系</h3><p>差分和前缀和是一对对称的操作</p><p>差分数组求前缀和就是原数组，对前缀和求差分也能得到原数组</p><h3 id="尺取法"><a href="#尺取法" class="headerlink" title="尺取法"></a>尺取法</h3><p>给定长度为n的正整数数列以及整数S，求出总和不小于S的连续子串的长度的最小值，如果接不存在，输出0</p><ol><li>暴力，枚举两个点的所有组合，选择和大于等于S的最短子串（时间复杂度爆炸）（O（n3））</li><li>优化，使用前缀和省去计算和的那一步复杂度变为（O（n2）），依然不低</li><li>使用尺取法（O（n））<ol><li>确定两个端点，从数组0开始</li><li>首先向右移动右边的端点，判断和是否大于S，若大于S就移动左边的端点，一直移动直至再移动一次就不大于S时，记录长度</li><li>继续移动右端点，重复2，直至数组结束</li><li>得出最小距离</li></ol></li></ol><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><ol><li>对问题求解时，总是做出在当前看来最好的选择，不从整体上考虑，做出的选择是局部是上最优解</li><li>使用贪心算法解决的问题都是能够证贪心出的局部最优解是所求的全局最优解</li></ol><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h3 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h3><ul><li><p>**sort(beg,end,comp)**给数组排序，返回排号的数组,cmp可以不写，comp用来定义比较方法</p><ul><li><pre><code class="c++">int a[10]= &#123;1, 5, 8, 9, 6, 7, 3, 4, 2, 0&#125;;sort(a, a+10);//两个参数，第一个是你要排的的开始位置的指针，第二个是结束处的指针的下一位//可以理解为从a开始，要排几位//STL遵循[a,b)原则，因此是a到a+10</code></pre></li></ul></li><li><p><strong>search</strong></p><ul><li>**binary_search(起始地址，结束地址，要查找的值)**，返回布尔值，匹配返回true</li><li>**lower_bound(beg,end,val)**返回可插入的最小位置的迭代器（可以理解为指针）<ul><li>例插入3</li><li>1 2 2 2 (可以被插到这) <strong>3</strong> 3 3 4 5</li><li>返回加粗3处的指针</li><li>第一个<strong>大于等于</strong>你查询的数的位置</li></ul></li><li>**upper_bound(beg,end,val)**返回可插入的最大位置的迭代器（可以理解为指针）<ul><li>1 2 2 2  3 3 3 (可以被插到这) <strong>4</strong> 5</li><li>返回加粗4处的指针</li><li>第一个<strong>大于</strong>你查询的数的位置</li></ul></li><li><strong>使用前数组一定要排序</strong></li></ul></li><li><p>**find(beg,end,val)**返回val第一次出现的地址</p></li><li><p><strong>count(beg,end,val)**返回val的出现次数 返回一个</strong>ptrdiff_t**(typedef long long ptrdiff_t)我也不知道这是个啥</p></li><li><p>**swap(a,b)**交换两个数</p></li><li></li></ul><h2 id="二分、三分"><a href="#二分、三分" class="headerlink" title="二分、三分"></a>二分、三分</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一一列举&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不重复，不遗漏&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="http://blog.verge.ink/2020/06/22/MyBatis/"/>
    <id>http://blog.verge.ink/2020/06/22/MyBatis/</id>
    <published>2020-06-22T02:21:37.000Z</published>
    <updated>2021-01-18T15:53:16.622Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>创建实体类和实体类的接口</p><ol><li>User</li><li>IUserDao</li></ol><a id="more"></a></li><li><p>配置主配置文件</p><p>SqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 mybatis 的环境 default属性没有固定的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置 mysql 的环境 这里的ID需要和environments标签中的default属性相同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://121.36.19.47:3306/mybatis_learn&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 每个Dao独立的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建映射配置文件</p><ol><li><p>IUserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace写类的全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作 ID填写方法名 resultType填写要封装成的JavaBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>注意</strong>：</p><ol><li>MyBatis的映射配置文件位置必须和Dao接口的包结构相同</li><li>映射配置文件的mapper标签的namespace属性取值必须是Dao接口的全限定类名</li><li>映射配置文件的操作配置，id属性的取值必须是dao接口的方法名</li></ol><p>​    遵从这三点，在开发中就无需实现IUserDao的类，MyBatis代替我们完成</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>读取配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建SqlSessionFactory工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(in);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建SqlSession对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = factory.openSession();</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>创建Dao接口的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IUserDao userDao = session.getMapper(IUserDao.class); </span><br></pre></td></tr></table></figure></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.close();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><ol><li><p>省略映射配置文件</p></li><li><p>在要实现的接口上写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;Sql语句&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>主配置文件&lt;mapper&gt;标签下使用class属性指定被注解的Dao全限定类名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;dao.IUserDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><h4 id="配置文件写法"><a href="#配置文件写法" class="headerlink" title="配置文件写法"></a>配置文件写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注解写法"><a href="#注解写法" class="headerlink" title="注解写法"></a>注解写法</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Insert</span>(&quot;INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span><br></pre></td></tr></table></figure><p>需要向接口中传入一个User对象</p><p>最后需要commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.commit();</span><br></pre></td></tr></table></figure><h4 id="获取插入数据的ID"><a href="#获取插入数据的ID" class="headerlink" title="获取插入数据的ID"></a>获取插入数据的ID</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">”id“</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        SELECT last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO user(username,sex,address) VALUS(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>keyProperty表示返回值的名称 </p><p>order表示执行该命令的时间，AFTER表示插入之后再执行</p><h3 id="改、删"><a href="#改、删" class="headerlink" title="改、删"></a>改、删</h3><p>与增加操作类似只需要改变标签名称或注解的@Xxx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;xx.xx&quot;</span>&gt;</span></span><br><span class="line">Sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;xx.xx&quot;</span>&gt;</span></span><br><span class="line">Sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;....&quot;)</span></span><br><span class="line"><span class="meta">@Delete(&quot;....&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h3 id="获取用户总记录的条数"><a href="#获取用户总记录的条数" class="headerlink" title="获取用户总记录的条数"></a>获取用户总记录的条数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">SELECT count(id) FROM user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p>Object Graphic Navigation Language</p><h2 id="连接池与事务控制"><a href="#连接池与事务控制" class="headerlink" title="连接池与事务控制"></a>连接池与事务控制</h2><h3 id="MyBatis中的连接池"><a href="#MyBatis中的连接池" class="headerlink" title="MyBatis中的连接池"></a>MyBatis中的连接池</h3><p>mybatis中提供了3种方式配置</p><p>在SqlMapConfig.xml中的dataSource标签中，type属性就是配置采用何种连接池的方式</p><ul><li>POOLED        采用传统javax.sql.DataSource规范中的连接池</li><li>UNPOOLED  虽然实现了javax.sql.DataSource，但没有使用池的思想</li><li>JNDI</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>可以在创造SqlSession对象时，给OpenSession中传一个true，就可以实现自动提交</p><h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><h3 id="lt-if-gt-标签"><a href="#lt-if-gt-标签" class="headerlink" title="&lt;if&gt;标签"></a>&lt;if&gt;标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != NULL&quot;</span>&gt;</span></span><br><span class="line">    AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    AND ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-where-gt"><a href="#lt-where-gt" class="headerlink" title="&lt;where&gt;"></a>&lt;where&gt;</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != NULL&quot;</span>&gt;</span></span><br><span class="line">    AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    AND ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>I don’t have a favorite singer, but a film soundtrack composer whose name is hans zimmer is my favorite composer. I know him from a film called Interstellar. At the same time, Interstellar is also my favorite film. It is because of this excellent OST that there are such excellent film。</p><p>Let’s enjoy it together</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建实体类和实体类的接口&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;IUserDao&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="框架" scheme="http://blog.verge.ink/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="java" scheme="http://blog.verge.ink/tags/java/"/>
    
    <category term="学习笔记" scheme="http://blog.verge.ink/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="mybatis" scheme="http://blog.verge.ink/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="http://blog.verge.ink/2020/06/01/DataSource/"/>
    <id>http://blog.verge.ink/2020/06/01/DataSource/</id>
    <published>2020-06-01T11:46:07.000Z</published>
    <updated>2021-01-18T15:55:37.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据库连接池"><a href="#什么是数据库连接池" class="headerlink" title="什么是数据库连接池"></a>什么是数据库连接池</h2><p>数据库连接池就是一个存放数据库连接的容器</p><p>当系统初始化完成后，容器就被创建，容器中会申请一些连接对象，当用户来访问数据时，从容器中获取连接对象，用户访问完后，将连接对象归还给容器</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>接口：DataSource<ol><li>方法<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()<ul><li>如果连接是从数据库连接池中获得的就归还给连接池，而不是关闭连接</li></ul></li></ul></li><li>由数据库厂商实现\<ol><li>数据库连接池技术<ol><li>C3P0</li><li>Druid</li></ol></li></ol></li></ol></li></ol><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>定义配置文件：<ol><li>c3p0.properties/c3p0-config.xml</li><li>放在src文件夹下</li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource( )</li></ol></li></ol><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>配置文件<ol><li>xxx.properties</li><li>可以叫任意名称，放在任意目录下</li></ol></li><li>加载配置文件<ol><li>Properties</li></ol></li><li>数据库连接池对象 DruidDataSourceFactory <ol><li>参数：字节流对象</li><li>方法：createDataSource获取一个DataSource对象</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是数据库连接池&quot;&gt;&lt;a href=&quot;#什么是数据库连接池&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库连接池&quot;&gt;&lt;/a&gt;什么是数据库连接池&lt;/h2&gt;&lt;p&gt;数据库连接池就是一个存放数据库连接的容器&lt;/p&gt;
&lt;p&gt;当系统初始化完成后，容器就被创建，容器中会申请一些连接对象，当用户来访问数据时，从容器中获取连接对象，用户访问完后，将连接对象归还给容器&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>cookie&amp;session</title>
    <link href="http://blog.verge.ink/2020/06/01/cookie-session/"/>
    <id>http://blog.verge.ink/2020/06/01/cookie-session/</id>
    <published>2020-05-31T16:48:08.000Z</published>
    <updated>2021-01-18T15:55:53.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话"></a>什么是会话</h3><p>一次会话中包含多次请求和响应</p><p>一次会话：浏览器第一次给服务器发送请求，会话建立，指导一方断开为止</p><a id="more"></a><h3 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h3><p>在一次会话范围内的多次请求共享数据</p><h3 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h3><ol><li>客户端会话技术（数据存放在客户端）：Cookie</li><li>服务端会话技术（数据存放在服务端）：Session</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>创建Cookie对象】<ol><li>new Cookie(String name,String value)</li></ol></li><li>发送Ciookie对象<ol><li>response.addCookie(Cookie cookie)</li></ol></li><li>获取Cookie<ol><li>Cookie[] request.getCookies()</li></ol></li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>基于请求头Cookie和响应头Set-Cookie实现</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>一次可以发送多个Cookie（创建多个Cookie对象，多次调用AddCookie）</p></li><li><p>Cookie可以保存多长时间</p><ol><li>默认情况下，浏览器关闭后Cookie销毁</li><li>持久化存储<ol><li>setMaxAge(int seconds)<ol><li>正数，将Cookie数据写道硬盘中，设置Cookie存货时间，单位s</li><li>负数，默认值，结束会话删除</li><li>0，删除Cookie信息</li></ol></li></ol></li></ol></li><li><p>Cookie的获取范围</p><ol><li></li></ol></li></ol><h3 id="特点和作用"><a href="#特点和作用" class="headerlink" title="特点和作用"></a>特点和作用</h3><ol><li>cookie储存在客户端</li><li>浏览器对于单个Cookie大小有限制4kb，对一个域名下总cookie数量有限制20个</li></ol><ol><li><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>获取HttpSession对象(域对象)</p><ol><li>request.getSession()</li></ol></li><li><p>方法</p><ol><li>Object getAttribute(String name)</li><li>void setAttribute(String name,Object value)</li><li>void removeAttribute(String name)</li></ol></li></ol><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>Session的实现依赖于Cookie</p><p>首次使用时服务器向浏览器发送一个Cookie包含一个JSESSIONID，再次访问时，浏览器向服务器发送JSESSIONID，服务器通过这个ID，确保两次访问使用的是同一个HttpSeesion对象</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>客户端关闭服务器不关闭，两次访问不是同一个Session<ol><li>若需要相同可以设置Cookie的存活时间</li></ol></li><li>服务器关闭客户端不关闭，两次访问不是同一个Session<ol><li>session钝化：</li><li>session活化</li></ol></li><li>Session失效时间<ol><li>服务器关闭</li><li>调用一个自杀方法</li><li>默认失效时间30min</li></ol></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>存储一次会话的数据，存在服务端</li><li>可以存储任意类型数据，任意大小</li><li>比Cookie安全</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot; class=&quot;headerlink&quot; title=&quot;会话&quot;&gt;&lt;/a&gt;会话&lt;/h2&gt;&lt;h3 id=&quot;什么是会话&quot;&gt;&lt;a href=&quot;#什么是会话&quot; class=&quot;headerlink&quot; title=&quot;什么是会话&quot;&gt;&lt;/a&gt;什么是会话&lt;/h3&gt;&lt;p&gt;一次会话中包含多次请求和响应&lt;/p&gt;
&lt;p&gt;一次会话：浏览器第一次给服务器发送请求，会话建立，指导一方断开为止&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>XML学习笔记</title>
    <link href="http://blog.verge.ink/2020/05/31/XML/"/>
    <id>http://blog.verge.ink/2020/05/31/XML/</id>
    <published>2020-05-31T13:50:17.000Z</published>
    <updated>2021-01-18T15:40:41.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>XML(Extensible Markup Language)<strong>可扩展</strong>标记语言</p><p>可扩展：标签都是可以自定义的</p><p>语法严格</p><a id="more"></a><h2 id="啥用"><a href="#啥用" class="headerlink" title="啥用"></a>啥用</h2><ol><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;? version = &#x27;1.0&#x27; ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>第一行必须为版本声明（必须是第一行，第一行是空行都不行）</li><li>有且只能有一个根标签(&lt;users&gt;&lt;/users&gt;)</li><li>属性值必须用 引号引起来（单双都行）</li><li>标签都是成对出现（除首行）</li><li>标签名称区分大小写</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是XML&quot;&gt;&lt;a href=&quot;#什么是XML&quot; class=&quot;headerlink&quot; title=&quot;什么是XML&quot;&gt;&lt;/a&gt;什么是XML&lt;/h2&gt;&lt;p&gt;XML(Extensible Markup Language)&lt;strong&gt;可扩展&lt;/strong&gt;标记语言&lt;/p&gt;
&lt;p&gt;可扩展：标签都是可以自定义的&lt;/p&gt;
&lt;p&gt;语法严格&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://blog.verge.ink/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="xml" scheme="http://blog.verge.ink/tags/xml/"/>
    
    <category term="学习笔记" scheme="http://blog.verge.ink/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://blog.verge.ink/2020/05/30/Spring/"/>
    <id>http://blog.verge.ink/2020/05/30/Spring/</id>
    <published>2020-05-30T15:38:55.000Z</published>
    <updated>2021-01-18T15:46:52.077Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h2><p>将对象的创建交给框架</p><p>目的：降低程序间的耦合</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>Maven项目引入一下依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在项目的src文件下创建bean.xml(可以是任何名称文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置bean标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean标签：用于配置让spring创建对象，并且存入ioc容器之中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：对象的唯一标识。 class属性：指定要创建对象的全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.xxx.xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//1.使用ApplicationContext接口获取spring容器 </span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>); </span><br><span class="line">    <span class="comment">//2.根据bean的id获取对象 </span></span><br><span class="line">    Object ObjectName = (Object) ac.getBean(<span class="string">&quot;bean.xml里的id&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BeanFactory与ApplicationContext"><a href="#BeanFactory与ApplicationContext" class="headerlink" title="BeanFactory与ApplicationContext"></a>BeanFactory与ApplicationContext</h4></li></ol><p>BeanFactory是顶层接口</p><p>ApplicationContext是BeanFactory的子接口</p><p>不同：对象的创建时间不同</p><ul><li>BeanFactory 什么时候用什么时候创建</li><li>ApplicationContext默认情况下读取完配置文件之后就创建 （<strong>一般用它</strong>）</li></ul><h4 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h4><ul><li>ClassPathXmlApplicationContext：<br>它是从类的根路径下加载配置文件 推荐</li><li>FileSystemXmlApplicationContext：<br>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</li><li>AnnotationConfigApplicationContext:<br>当我们使用注解配置容器对象时，需要使用此类来创建spring 容器。它用来读取注解。</li></ul><h4 id="Bean标签"><a href="#Bean标签" class="headerlink" title="Bean标签"></a>Bean标签</h4><p><strong>属性：</strong></p><ol><li>作用<ol><li>用于配置对象让Spring创建</li><li>默认调用对象的无参构造器构造</li></ol></li><li>属性<ol><li>id:给对象指定唯一标识符</li><li>class：指定对象的全限定类名</li><li>scope：指定对象的作用范围<ol><li>singleton :默认值，单例的. </li><li>prototype :多例的.  </li><li>request :WEB项目中,Spring创建一个Bean的对象,将对象存入到request域中. </li><li>session :WEB项目中,Spring创建一个Bean的对象,将对象存入到session域中. </li><li>global session :WEB项目中,应用在Portlet环境.如果没有Portlet环境那么globalSession相当于session.</li></ol></li><li>init-method：指定类中的初始化方法名称 </li><li>destroy-method：指定类中销毁方法名称</li></ol></li></ol><h4 id="实例化Bean"><a href="#实例化Bean" class="headerlink" title="实例化Bean"></a>实例化Bean</h4><ol><li>使用默认无参构造函数</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.Xxx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用静态工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Xxx <span class="title">name</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Xxx(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是: 使用StaticFactory类中的静态方法name创建对象，并存入spring容器 </span></span><br><span class="line"><span class="comment">id属性：指定bean的id，用于从容器中获取 </span></span><br><span class="line"><span class="comment">class属性：指定静态工厂的全限定类名 </span></span><br><span class="line"><span class="comment">factory-method属性：指定生产对象的静态方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实例工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Xxx <span class="title">name</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Xxx(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是： 先把工厂的创建交给spring来管理。 然后在使用工厂的bean来调用里面的方法 </span></span><br><span class="line"><span class="comment">factory-bean属性：用于指定实例工厂bean的id。 </span></span><br><span class="line"><span class="comment">factory-method属性：用于指定实例工厂中创建对象的方法。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx.xxx.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="comment">&lt;!--工厂类--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> <span class="comment">&lt;!--工厂中的方法--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>理解控制反转和依赖注入：<a href="https://zhuanlan.zhihu.com/p/33492169">https://zhuanlan.zhihu.com/p/33492169</a></p><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>使用类中的构造函数，给成员变量赋值</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">constructor-arg :</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">index:指定参数在构造函数参数列表的索引位置，从0开始</span></span><br><span class="line"><span class="comment">type:指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">name:指定参数在构造函数中的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">value:它能赋的值是基本数据类型和String类型</span></span><br><span class="line"><span class="comment">ref:它能赋的值是其他bean类型，也就是说，必须得是在配置文件中配置过的bean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过配置文件给bean中的属性传值：使用set方法的方式 (常用)</span></span><br><span class="line"><span class="comment">property</span></span><br><span class="line"><span class="comment">属性： </span></span><br><span class="line"><span class="comment">name：找的是类中set方法后面的部分 </span></span><br><span class="line"><span class="comment">ref：给属性赋值是其他bean类型的 </span></span><br><span class="line"><span class="comment">value：给属性赋值是基本数据类型和string类型的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给数组注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 list 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 set 集合数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 Map 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入 properties 数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>@Component</p><p>​    用于把当前类对象存入Spring容器种，相当于配置文件里的&lt;bean&gt;&lt;/bean&gt;</p><p>这个注解有一个属性value用于指定bean的id，默认值为当前类名，首字母小写</p><p>@Controller @Service @Repository  这三个注解的作用和属性与@Component相同，只是提供了更加明确的语义化  </p><h3 id="注入数据"><a href="#注入数据" class="headerlink" title="注入数据"></a>注入数据</h3><p>相当于&lt;property name=”” ref=””&gt;  </p><p><strong>@AutoWired</strong> 自动按照类型注入  </p><p>使用注解注入属性时， set 方法可以省略</p><p>当有多个类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找    </p><p><strong>@Qualifier</strong>  在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。 </p><p>给字段注入时不能独立使用，必须和@Autowire 一起使用;给方法参数注入时，可以独立使用。  </p><p>属性：value，bean 的id</p><p><strong>@Resource</strong>  直接按照 Bean 的 id 注入 </p><p>属性：value，bean 的id</p><p><strong>@Value</strong>  注入基本数据类型和 String 类型数据的  </p><p>value：用于指定值  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;IoC-控制反转&quot;&gt;&lt;a href=&quot;#IoC-控制反转&quot; class=&quot;headerlink&quot; title=&quot;IoC(控制反转)&quot;&gt;&lt;/a&gt;IoC(控制反转)&lt;/h2&gt;&lt;p&gt;将对象的创建交给框架&lt;/p&gt;
&lt;p&gt;目的：降低程序间的耦合&lt;/p&gt;</summary>
    
    
    
    <category term="spring" scheme="http://blog.verge.ink/categories/spring/"/>
    
    
    <category term="spring" scheme="http://blog.verge.ink/tags/spring/"/>
    
    <category term="学习笔记" scheme="http://blog.verge.ink/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JDBC学习笔记</title>
    <link href="http://blog.verge.ink/2020/05/30/JDBC/"/>
    <id>http://blog.verge.ink/2020/05/30/JDBC/</id>
    <published>2020-05-29T17:04:43.000Z</published>
    <updated>2021-01-18T15:54:14.269Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDBC是啥"><a href="#JDBC是啥" class="headerlink" title="JDBC是啥"></a>JDBC是啥</h3><p>JDBC(Java DataBase connectivity)(Java 数据库连接)</p><p>由SUN公司定义的一系列操作关系型数据库的接口，后由数据库厂商对接口进行实现，提供数据库驱动jar包</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//把com.mysql.jdbc.Driver这个字节码文件加载到内存里</span></span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p><code>host = jdbc:mysql://host /db</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(host,username,passwd);</span><br></pre></td></tr></table></figure><p>连接时发现报错</p><blockquote><p>The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><p>解决方法</p><p>host后加上<code>?serverTimezone=UTC</code></p><h2 id="对象详解"><a href="#对象详解" class="headerlink" title="对象详解"></a>对象详解</h2><ol><li>DriverManage驱动管理<ul><li>注册驱动<ul><li>MySQL5以后可以自动注册</li></ul></li><li>获取数据库连接<ul><li>static getConnection(String url,String user,String password)</li><li>url = jdbc:mysql://ip地址:端口号/数据库名</li></ul></li></ul></li><li>Connection数据库连接对象<ol><li>获取执行sql语句的对象<ul><li> Statement CreateStatement(String sql)</li><li>Prestatement prepareStatement(String sql)</li></ul></li><li>管理事务</li></ol></li><li>Statement执行sql语句<ol><li>执行sql<ol><li>int executeUpdate(String sql)：执行DML(insert,update,delete)，DDL(create,alter,drop)<ul><li>返回值是操作后影响的行数</li><li>可以用来判断成功与否</li></ul></li><li>ResultSet executeQuery(String sql):执行DQL(select)</li></ol></li></ol></li><li>ResultSet查询结果的封装<ul><li>boolean next()游标向下移动一行(默认指向表头)，判断是否有数据</li><li>getXxx(“列名/列的编号，从1开始”)获取数据Xxx代表类型</li></ul></li><li>PreparedStatement<ol><li>SQL注入问题:在拼接sql‘语句时，有一些特殊的词参与拼接会造成安全问题</li><li>使用PreparedStatem对象解决问题<ol><li>定义sql语句时使用<code>?</code>作为占位符，替换参数</li><li>使用setXxx(？的编号从1开始，参数的值)</li><li>执行sql语句时不再需要传参</li></ol></li></ol></li></ol><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><p>Spring框架提供的JDBC简单封装</p><p>提供一个JDBCTemplate</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li>导入jar包</li><li>创建JdbcTemplate，依赖于DataSource<ol><li>JdbcTemplate template = new JdbcTemplate</li></ol></li><li>调用JdbcTemplate的方法完成CRUD操作<ol><li>update()增删改</li><li>queryForMap()将查询结果封装为map集合</li><li>queryForList()将查询结果封装为list集合</li><li>query()查询结果，将查询结果封装为JavaBean对象</li><li>queryForObject()将查询结果封装为对象</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JDBC是啥&quot;&gt;&lt;a href=&quot;#JDBC是啥&quot; class=&quot;headerlink&quot; title=&quot;JDBC是啥&quot;&gt;&lt;/a&gt;JDBC是啥&lt;/h3&gt;&lt;p&gt;JDBC(Java DataBase connectivity)(Java 数据库连接)&lt;/p&gt;
&lt;p&gt;由SUN公司定义的一系列操作关系型数据库的接口，后由数据库厂商对接口进行实现，提供数据库驱动jar包&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Servlet学习笔记</title>
    <link href="http://blog.verge.ink/2020/05/30/Servlet/"/>
    <id>http://blog.verge.ink/2020/05/30/Servlet/</id>
    <published>2020-05-29T16:04:09.000Z</published>
    <updated>2021-01-18T15:47:50.090Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><p>Servlet(Service applet)运行在服务器的小程序</p><p>Servlet就是一个<strong>接口</strong>，定义了某个Java类能被tomcat识别的规则</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>新建一个类</li><li>实现servlet的接口</li><li>实现接口中的抽象类</li><li>配置servlet</li></ol><h2 id="Servlet的执行流程"><a href="#Servlet的执行流程" class="headerlink" title="Servlet的执行流程"></a>Servlet的执行流程</h2><p><img src="https://i.loli.net/2020/05/30/zigWGXkjAqUTQS6.png"></p><h2 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h2><h3 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet的地址<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问Servlet的地址<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当</p><h3 id="Servlet启动时自动装载"><a href="#Servlet启动时自动装载" class="headerlink" title="Servlet启动时自动装载"></a>Servlet启动时自动装载</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">//加上这些代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">loadon-startup</span>&gt;</span>num<span class="tag">&lt;/<span class="name">loadon-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>num越小优先级越高</p><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p><code>@WebServlet(&quot;url&quot;)</code></p><p>就不用在web.xml里面配置了</p><h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><p>第一次访问后，servlet创建，第二次访问时不需要创建，直接使用，当服务器关闭时，servlet销毁</p><h2 id="Servlet结构"><a href="#Servlet结构" class="headerlink" title="Servlet结构"></a>Servlet结构</h2><p>Servlet接口下有两个实现类</p><p>HttpServlet和GenericServlet</p><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>除了service类外，对Servlet接口的其他类都进行了空实现</p><p>以后使用Servlet时，对该类进行继承就行</p><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>对http协议进行了封装，简化操作 </p><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ServletRequest --接口</span><br><span class="line">继承</span><br><span class="line">HttpServletRequest --接口</span><br><span class="line">实现</span><br><span class="line">org.apache.catalina.connector.RequestFacade(tomcat实现)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h3><h4 id="获取请求行"><a href="#获取请求行" class="headerlink" title="获取请求行"></a>获取请求行</h4><ol><li>getMethod获取请求方法</li><li><strong>getContextPath取虚拟目录</strong></li><li>getServletPath获取Servlet路径</li><li>getQueryString获取请求参数</li><li><strong>获取请求URI</strong><ol><li>getRequestURI</li><li>getRequestURL</li></ol></li><li>getProtocol获取协议版本</li><li>getRemoteAddr获取客户机IP地址</li></ol><h4 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h4><ol><li>getHeader(String name)通过请求头的名称获得请求头</li><li>Enumeration&lt;String&gt; getHeaderNames()获取所有请求头的名称</li></ol><h4 id="获取请求体"><a href="#获取请求体" class="headerlink" title="获取请求体"></a>获取请求体</h4><ul><li>只有POST有请求体</li></ul><ol><li>获取流对象<ul><li>BufferReader getReader()获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()获取字节输入流，可以操作所有数据类型</li></ul></li><li>从流对象中获取数据</li></ol><h4 id="其他（重要）"><a href="#其他（重要）" class="headerlink" title="其他（重要）"></a>其他（重要）</h4><ol><li><p>获取请求参数的通用方式（兼容GET&amp;POST）</p><ol><li>String getParameter(String name)根据参数名获取参数值</li><li>String[] getParameterValues(String name)根据参数名获取参数值的数组 – hobby=吃饭&amp;hobby=睡觉</li><li>Enumeration&lt;String&gt; getParameterNames()获取所有请求参数的名称</li><li>Map&lt;String,String[]&gt; getParameterMap()获取所有参数的map集合</li></ol></li><li><p>请求转发</p><ol><li><p>步骤</p><ol><li><p>通过request对象获取请求转发器对象：RequestDispatcher get RequestDispatcher(String path)</p></li><li><p>使用RequestDispatcher对象进行转发：forward(ServletRequest request,ServletResponse response)</p><p><code>request.getRequestDispatcher(&quot;/path&quot;).forward(request,response)</code></p></li></ol></li><li><p>特点</p><ol><li>浏览器地址栏不变化</li><li>只能转发到当前服务器内部资源</li><li>访问带转发是一次请求</li></ol></li></ol></li><li><p>共享数据</p><ul><li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p></li><li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p></li><li><p>方法：</p><ol><li>void setAttribute(String name,Object obj)存储数据</li><li>Object getAttribute(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ol></li></ul></li><li><p>获取ServletContext</p><p>1. </p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;什么是Servlet&quot;&gt;&lt;a href=&quot;#什么是Servlet&quot; class=&quot;headerlink&quot; title=&quot;什么是Servlet&quot;&gt;&lt;/a&gt;什么是Servlet&lt;/h2&gt;&lt;p&gt;Servlet(Service applet)运行在服务器的小程序&lt;/p&gt;
&lt;p&gt;Servlet就是一个&lt;strong&gt;接口&lt;/strong&gt;，定义了某个Java类能被tomcat识别的规则&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://blog.verge.ink/categories/java/"/>
    
    
    <category term="java" scheme="http://blog.verge.ink/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习笔记</title>
    <link href="http://blog.verge.ink/2020/05/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.verge.ink/2020/05/06/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-06T10:42:04.000Z</published>
    <updated>2021-01-18T15:56:39.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="登录登出"><a href="#登录登出" class="headerlink" title="登录登出"></a>登录登出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -P端口号 -h服务器名称</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; <span class="built_in">exit</span>;退出</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><p>登陆时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -P端口号 -h服务器名称 --prompt 提示符</span><br></pre></td></tr></table></figure><p>登陆后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt 提示符</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\D完整日期 \d当前数据库 \h服务器名称 \u当前用户</span><br></pre></td></tr></table></figure><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li>关键字与函数名全部大写</li><li>数据库名，表名称，字段名称全部小写</li><li>MySQL语句必须以分号结尾</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name </span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;登录登出&quot;&gt;&lt;a href=&quot;#登录登出&quot; class=&quot;headerlink&quot; title=&quot;登录登出&quot;&gt;&lt;/a&gt;登录登出&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql -u用户名 -p密码 -P端口号 -h服务器名称&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;;退出&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://blog.verge.ink/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="学习笔记" scheme="http://blog.verge.ink/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="mysql" scheme="http://blog.verge.ink/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="http://blog.verge.ink/2020/04/29/PHP/"/>
    <id>http://blog.verge.ink/2020/04/29/PHP/</id>
    <published>2020-04-28T16:17:56.000Z</published>
    <updated>2021-01-18T15:53:00.524Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h2><p>php代码需要写在<code>&lt;?php ?&gt;</code>之间</p><p>echo用来输出</p><p>php连接两个字符串使用<code>.</code>而不是<code>+</code></p><p>php每条语句都以;结尾</p><a id="more"></a><p><code>//</code>表示注释</p><h2 id="PHP的新东西"><a href="#PHP的新东西" class="headerlink" title="PHP的新东西"></a>PHP的新东西</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure><p>PHP有两种数组：索引数组、关联数组。</p><h4 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h4><p>索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fruit</span> = <span class="keyword">array</span>(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;菠萝&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以使用<code>print_r($fruit);</code>语句输出数组键及对应的值</p><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><p><code>$arr[0]=&#39;苹果&#39;;</code></p><p><code>array(&#39;0&#39;=&gt;&#39;苹果&#39;);</code></p><p><code>array(&quot;苹果&quot;,&quot;香蕉&quot;);</code></p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><p><code>$arr[&quot;0&quot;];</code>/<code>$arr[0];</code></p><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><p>关联数组是指数组的键是字符串的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fruit</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span>=&gt;<span class="string">&quot;苹果&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;banana&#x27;</span>=&gt;<span class="string">&quot;香蕉&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;pineapple&#x27;</span>=&gt;<span class="string">&quot;菠萝&quot;</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure><p>可以使用<code>print_r($fruit);</code>语句输出数组键及对应的值。</p><h5 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h5><p><code>$arr[&#39;apple&#39;]=&#39;苹果&#39;;</code></p><p><code>array(&#39;apple&#39;=&gt;&#39;苹果&#39;);</code></p><h5 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h5><p><code>$fruit[&#39;banana&#39;];</code></p><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类是一类东西的结构描述，而对象则是一类东西的一个具体实例</p><p>定义一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//方法内部可以使用$this伪变量调用对象的属性或者方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象通过new关键字进行实例化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="comment">//也可以采用变量来创建</span></span><br><span class="line"><span class="variable">$className</span> = <span class="string">&#x27;Car&#x27;</span>;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> <span class="variable">$className</span>();</span><br></pre></td></tr></table></figure><h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><p>在类中定义的变量称之为属性</p><p>属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成</p><p>public：公开的<br>protected：受保护的<br>private：私有的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义公共属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    <span class="comment">//定义受保护的属性</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$corlor</span> = <span class="string">&#x27;白色&#x27;</span>;</span><br><span class="line">    <span class="comment">//定义私有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$price</span> = <span class="string">&#x27;100000&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认都为public，外部可以访问。一般通过-&gt;对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;name;   <span class="comment">//调用对象的属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;color;  <span class="comment">//错误 受保护的属性不允许外部调用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;price; <span class="comment">//错误 私有属性不允许外部调用</span></span><br></pre></td></tr></table></figure><p>受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$price</span> = <span class="string">&#x27;1000&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;price; <span class="comment">//内部访问私有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><p>方法就是在类中的function</p><p>的方法也具有public，protected 以及 private 的访问控制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$car</span>-&gt;getName();</span><br></pre></td></tr></table></figure><p>使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;汽车&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Car::getName(); <span class="comment">//结果为“汽车”</span></span><br></pre></td></tr></table></figure><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>PHP5可以在类中使用**__construct()**定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;构造函数被调用\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car(); <span class="comment">//实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span></span><br></pre></td></tr></table></figure><p>在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用</p><p>PHP5支持析构函数，使用**__destruct()**进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;构造函数被调用 \n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&quot;析构函数被调用 \n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$car</span> = <span class="keyword">new</span> Car(); <span class="comment">//实例化时会调用构造函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;使用后，准备销毁car对象 \n&#x27;</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$car</span>); <span class="comment">//销毁时会调用析构函数</span></span><br></pre></td></tr></table></figure><h4 id="静态关键字"><a href="#静态关键字" class="headerlink" title="静态关键字"></a>静态关键字</h4><p>静态属性与方法可以在不实例化类的情况下调用，直接使用<code>类名::方法名</code>的方式进行调用。静态属性<strong>不允许</strong>对象使用-&gt;操作符调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$speed</span> = <span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Car::getSpeed();  <span class="comment">//调用静态方法</span></span><br></pre></td></tr></table></figure><p>静态方法也可以通过变量来进行动态调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;getSpeed&#x27;</span>;</span><br><span class="line"><span class="variable">$className</span> = <span class="string">&#x27;Car&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$className</span>::<span class="variable">$func</span>();  <span class="comment">//动态调用静态方法</span></span><br></pre></td></tr></table></figure><p>静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$speed</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$speed</span>+=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::speedUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BigCar::start();</span><br><span class="line"><span class="keyword">echo</span> BigCar::getSpeed();</span><br></pre></td></tr></table></figure><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>访问控制通过关键字public，protected和private来实现。</p><p>被定义为公有的类成员可以在任何地方被访问。</p><p>被定义为受保护的类成员则可以被其自身以及其子类和父类访问。</p><p>被定义为私有的类成员则只能被其定义所在的类访问。</p><p>默认为公有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;object create&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_object</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$_object</span>)) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_object</span> = <span class="keyword">new</span> Car(); <span class="comment">//内部方法可以调用私有方法，因此这里可以创建对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$car = new Car(); //这里不允许直接实例化对象</span></span><br><span class="line"><span class="variable">$car</span> = Car::getInstance(); <span class="comment">//通过静态方法来获得一个实例</span></span><br></pre></td></tr></table></figure><h4 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;speed += <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用extends</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h4 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h4><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能出现错误或异常的代码</span></span><br><span class="line">            <span class="comment">//catch表示捕获，Exception是php已定义好的异常类</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="comment">//对异常处理，方法：</span></span><br><span class="line">                <span class="comment">//1、自己处理</span></span><br><span class="line">                <span class="comment">//2、不处理，将其再次抛出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可抛出一个异常的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params"><span class="variable">$number</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$number</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;异常提示-数字必须小于等于1&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在 &quot;try&quot; 代码块中触发异常</span></span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     checkNum(<span class="number">2</span>);</span><br><span class="line">     <span class="comment">//如果异常被抛出，那么下面一行代码将不会被输出</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;如果能看到这个提示，说明你的数字小于等于1&#x27;</span>;</span><br><span class="line"> &#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">     <span class="comment">//捕获异常</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;捕获异常: &#x27;</span> .<span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h4><p>PHP具有很多异常处理类，其中Exception是所有异常处理的基类。</p><p>Exception具有几个基本属性与方法，其中包括了：</p><p>message 异常消息内容<br>code 异常代码<br>file 抛出异常的文件名<br>line 抛出异常在该文件的行数</p><p>其中常用的方法有：</p><p>getTrace 获取异常追踪信息<br>getTraceAsString 获取异常追踪信息的字符串<br>getMessage 获取出错信息</p><h4 id="捕获异常信息"><a href="#捕获异常信息" class="headerlink" title="捕获异常信息"></a>捕获异常信息</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;wrong&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Error:&#x27;</span>.<span class="variable">$ex</span>-&gt;getMessage().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ex</span>-&gt;getTraceAsString().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;异常处理后，继续执行其他代码&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="将错误信息写入错误日志"><a href="#将错误信息写入错误日志" class="headerlink" title="将错误信息写入错误日志"></a>将错误信息写入错误日志</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;wrong&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;Error:&#x27;</span>.<span class="variable">$ex</span>-&gt;getMessage().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="variable">$ex</span>-&gt;getTraceAsString().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="string">&#x27;异常行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;getLine().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$msg</span>.= <span class="string">&#x27;所在文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;getFile().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//将异常信息记录到日志中</span></span><br><span class="line">file_put_contents(<span class="string">&#x27;error.log&#x27;</span>, <span class="variable">$msg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP数据库"><a href="#PHP数据库" class="headerlink" title="PHP数据库"></a>PHP数据库</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">&#x27;code1&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">mysql_connect(<span class="variable">$host</span>,<span class="variable">$user</span>,<span class="variable">$pass</span>);<span class="comment">//连接数据库</span></span><br><span class="line">mysql_select_db(<span class="string">&#x27;code1&#x27;</span>);<span class="comment">//选择数据库</span></span><br><span class="line">mysql_query(<span class="string">&quot;set names &#x27;utf8&#x27;&quot;</span>);<span class="comment">//设置字符编码</span></span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>在数据库建立连接以后就可以进行查询，采用mysql_query加sql语句的形式向数据库发送查询指令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = mysql_query(<span class="string">&#x27;select * from user limit 1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>对于查询类的语句会返回一个资源句柄（resource），可以通过该资源获取查询结果集中的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$res</span>);</span><br><span class="line">var_dump(<span class="variable">$row</span>);</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">&quot;insert into user(name, age, class) values(&#x27;李四&#x27;, 18, &#x27;高三一班&#x27;)&quot;</span>); <span class="comment">//执行插入语句</span></span><br></pre></td></tr></table></figure><p>在mysql中，执行插入语句以后，可以得到自增的主键id,通过PHP的mysql_insert_id函数可以获取该id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$uid &#x3D; mysql_insert_id();</span><br></pre></td></tr></table></figure><h4 id="取得数据查询结果"><a href="#取得数据查询结果" class="headerlink" title="取得数据查询结果"></a>取得数据查询结果</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一些小细节&quot;&gt;&lt;a href=&quot;#一些小细节&quot; class=&quot;headerlink&quot; title=&quot;一些小细节&quot;&gt;&lt;/a&gt;一些小细节&lt;/h2&gt;&lt;p&gt;php代码需要写在&lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt;之间&lt;/p&gt;
&lt;p&gt;echo用来输出&lt;/p&gt;
&lt;p&gt;php连接两个字符串使用&lt;code&gt;.&lt;/code&gt;而不是&lt;code&gt;+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;php每条语句都以;结尾&lt;/p&gt;</summary>
    
    
    
    <category term="php" scheme="http://blog.verge.ink/categories/php/"/>
    
    
    <category term="php" scheme="http://blog.verge.ink/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习笔记</title>
    <link href="http://blog.verge.ink/2020/04/27/jQuery/"/>
    <id>http://blog.verge.ink/2020/04/27/jQuery/</id>
    <published>2020-04-27T08:04:06.000Z</published>
    <updated>2021-01-18T15:54:09.354Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>环境搭建<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> alert($)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>想要使用jQuery只需要在&lt;head&gt;标签中</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：一定千万不要在引用jquery的script标签里再写js了，重新写一个script标签</strong></p><p>可以在这里<a href="https://jquery.com/download/%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8jQuery%E7%9A%84%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC">https://jquery.com/download/下载使用jQuery的其他版本</a></p><p>网速慢的话</p><p><a href="https://www.bootcdn.cn/jquery/">https://www.bootcdn.cn/jquery/</a></p><p>这样操作</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$( &quot;#id&quot; )</span><br></pre></td></tr></table></figure><p>id若多个元素分配了相同的id，将只匹配该id选择集合的第一个DOM元素，按理来说id需要唯一</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.class&quot;</span>)</span><br></pre></td></tr></table></figure><p>假如你想改变某一类标签内容的样式可以直接使用<code>$(.class).css()</code>,不再像原生js一样需要循环</p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;tag&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="全能选择器"><a href="#全能选择器" class="headerlink" title="全能选择器"></a>全能选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;*&quot;</span>)</span><br></pre></td></tr></table></figure><p>获取文档中的所有元素</p><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p>文档中的所有的节点之间都是有这样或者那样的关系。我们可以把节点之间的关系可以用传统的家族关系来描述，可以把文档树当作一个家谱，那么节点与节点直接就会存在父子，兄弟，祖孙的关系了。</p><p><img src="http://img.mukewang.com/5590e98b0001f60d06130229.jpg"></p><h3 id="基本筛选选择器"><a href="#基本筛选选择器" class="headerlink" title="基本筛选选择器"></a>基本筛选选择器</h3><p><img src="http://img.mukewang.com/57cd1df2000146de06020498.jpg"></p><p>假如你使用标签选择器选取了所有div标签，但是你只想要第一个就可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:first&quot;</span>)<span class="comment">//选择第一个</span></span><br><span class="line">$(<span class="string">&quot;div:eq(0)&quot;</span>)<span class="comment">//选择索引值为0的那个</span></span><br><span class="line">$(<span class="string">&quot;div:lt(1)&quot;</span>)<span class="comment">//选择索引值小于1的</span></span><br></pre></td></tr></table></figure><h3 id="内容筛选选择器"><a href="#内容筛选选择器" class="headerlink" title="内容筛选选择器"></a>内容筛选选择器</h3><p><img src="http://img.mukewang.com/57cd20bf0001a97f05290214.jpg"></p><ol><li>:contains与:has都有查找的意思，但是contains查找包含“<strong>指定文本</strong>”的元素，has查找包含“<strong>指定元素</strong>”的元素</li><li>如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。</li><li>:parent与:empty是相反的，两者所涉及的子元素，包括文本节点</li></ol><h3 id="可见性筛选选择器"><a href="#可见性筛选选择器" class="headerlink" title="可见性筛选选择器"></a>可见性筛选选择器</h3><p><img src="http://img.mukewang.com/5590f6de0001e2b204460106.jpg"></p><p>我们有几种方式可以隐藏一个元素：</p><ol><li>CSS display的值是none。</li><li>type=”hidden”的表单元素。</li><li>宽度和高度都显式设置为0。</li><li>一个祖先元素是隐藏的，该元素是不会在页面上显示</li><li>CSS visibility的值是hidden</li><li>CSS opacity的值是0</li></ol><h3 id="属性筛选选择器"><a href="#属性筛选选择器" class="headerlink" title="属性筛选选择器"></a>属性筛选选择器</h3><p><img src="http://img.mukewang.com/57d654200001c46507360560.jpg"></p><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;一个元素集合[属性 | 属性 运算符 &quot;</span>value<span class="string">&quot;]&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="子元素筛选选择器"><a href="#子元素筛选选择器" class="headerlink" title="子元素筛选选择器"></a>子元素筛选选择器</h3><p><img src="https://img3.mukewang.com/5bac45120001301105960331.jpg"></p><ol><li>:first只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)</li><li>:last 只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素</li><li>如果子元素只有一个的话，:first-child与:last-child是同一个</li><li> :only-child匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配</li><li>jQuery实现:nth-child(n)是严格来自CSS规范，所以n值是“索引”，也就是说，从1开始计数，:nth-child(index)从1开始的，而eq(index)是从0开始的</li><li>nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算</li></ol><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><p><img src="http://img.mukewang.com/5592040d0001f8eb04940441.jpg" alt="img"></p><h4 id="表单对象属性筛选选择器"><a href="#表单对象属性筛选选择器" class="headerlink" title="表单对象属性筛选选择器"></a>表单对象属性筛选选择器</h4><p><img src="http://img.mukewang.com/55920c2f0001198b04940201.jpg" alt="img"></p><h3 id="特殊选择器this"><a href="#特殊选择器this" class="headerlink" title="特殊选择器this"></a>特殊选择器this</h3><blockquote><p>this，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。<br>$(this),代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值</p></blockquote><h2 id="属性与样式"><a href="#属性与样式" class="headerlink" title="属性与样式"></a>属性与样式</h2><h3 id="attr-与-removeAttr"><a href="#attr-与-removeAttr" class="headerlink" title="attr()与.removeAttr()"></a>attr()与.removeAttr()</h3><p>用来获取和设置元素属性</p><p><strong>attr()有4个表达式</strong></p><ol><li>attr(传入属性名)：获取属性的值</li><li>attr(属性名, 属性值)：设置属性的值</li><li>attr(属性名,函数值)：设置属性的函数值</li><li>attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }</li></ol><p><strong>removeAttr()删除方法</strong></p><p>.removeAttr( attributeName ) : 为匹配的元素集合中的每个元素中移除一个属性（attribute）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=<span class="string">&quot;10086&quot;</span>&gt;移动&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#10086&quot;</span>).attr(id,<span class="number">10001</span>);</span><br><span class="line">$(<span class="string">&quot;#10001&quot;</span>).attr(id);</span><br></pre></td></tr></table></figure><h3 id="html-及-text"><a href="#html-及-text" class="headerlink" title=".html()及.text()"></a>.html()及.text()</h3><p>.html() 获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法：</p><ol><li>.html() 不传入值，就是获取集合中第一个匹配元素的HTML内容</li><li>.html( htmlString ) 设置每一个匹配元素的html内容</li><li>.html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数</li></ol><p>.text()</p><p>得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法：</p><ol><li>.text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代</li><li>.text( textString ) 用于设置匹配元素内容的文本</li><li>.text( function(index, text) ) 用来返回设置文本内容的一个函数</li></ol><p>.html处理的是元素内容，.text处理的是文本内容</p><h3 id="val"><a href="#val" class="headerlink" title=".val()"></a>.val()</h3><p><strong>.val()方法</strong></p><p>主要是用于处理表单元素的值，比如 input, select 和 textarea。</p><ol><li>.val()无参数，获取匹配的元素集合中第一个元素的当前值</li><li>.val( value )，设置匹配的元素集合中每个元素的值</li><li>.val( function ) ，一个用来返回设置值的函数</li></ol><p><strong>.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容</strong>。</p><h3 id="addClass-和removeClass"><a href="#addClass-和removeClass" class="headerlink" title=".addClass()和removeClass()"></a>.addClass()和removeClass()</h3><p><strong>addClass( className )方法</strong></p><ol><li>.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名</li><li>.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名</li></ol><p><strong>注意事项：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上</span><br></pre></td></tr></table></figure><p><strong>.removeClass( )方法</strong></p><ol><li>.removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名</li><li>.removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名</li></ol><p><strong>注意事项</strong></p><p>如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除</p><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title=".toggleClass()"></a>.toggleClass()</h3><p>一次执行相当于addClass，再次执行相当于removeClass</p><p><strong>.toggleClass( )方法：</strong>在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类</p><ol><li>.toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名</li><li>.toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除</li><li>.toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值</li><li>.toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数</li></ol><p><strong>注意事项：</strong></p><ol><li>toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加</li></ol><h3 id="css"><a href="#css" class="headerlink" title=".css()"></a>.css()</h3><p><strong>获取：</strong></p><ol><li>.css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css(<span class="string">&quot;background-color&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>.css( propertyNames )：传递一组数组，返回一个对象结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css([<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;height&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>设置：</strong></p><ol><li><p>.css(propertyName, value )：设置CSS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.css(&quot;background-color&quot;,&quot;red&quot;)</span><br></pre></td></tr></table></figure></li><li><p>.css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css(&quot;width&quot;,function(index,value)&#123;</span><br><span class="line">            &#x2F;&#x2F;value带单位，先分解</span><br><span class="line">            value &#x3D; value.split(&#39;px&#39;);</span><br><span class="line">            &#x2F;&#x2F;返回一个新的值，在原有的值上，增加50px</span><br><span class="line">            return (Number(value[0]) + 50) + value[1];</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>.css( properties )：可以传一个对象，同时设置多个样式</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css(&#123;</span><br><span class="line">            &#39;font-size&#39;        :&quot;15px&quot;,</span><br><span class="line">            &quot;background-color&quot; :&quot;#40E0D0&quot;,</span><br><span class="line">            &quot;border&quot;           :&quot;1px solid red&quot;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="结点创建与属性"><a href="#结点创建与属性" class="headerlink" title="结点创建与属性"></a>结点创建与属性</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;div class=&#x27;right&#x27;&gt;&lt;div class=&#x27;aaron&#x27;&gt;动态创建DIV元素节点&lt;/div&gt;&lt;/div&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><img src="http://img.mukewang.com/56cc12f800017b4104480146.jpg" alt="img"></p><p>.append(), 内容在方法的后面，参数是将要插入的内容。</p><p>.appendTo()刚好相反，内容在方法前面，无论是一个选择器表达式 或创建作为标记上的标记它都将被插入到目标容器的末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">append()前面是被插入的对象，后面是要在对象内插入的元素内容</span><br><span class="line">appendTo()前面是要插入的元素内容，而后面是被插入的对象</span><br></pre></td></tr></table></figure><p><strong>作用是一样的</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;HTML&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;环境搭建&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; alert($)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要使用jQuery只需要在&amp;lt;head&amp;gt;标签中&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
